// -*- C++ -*-
#ifndef AIW_SWIG_HPP
#define AIW_SWIG_HPP
/**
 * Copyright (C) 2016 Antov V. Ivanov, KIAM RAS, Moscow.
 * This code is released under the GPL2 (GNU GENERAL PUBLIC LICENSE Version 2, June 1991)
 **/

#ifdef SWIGPYTHON

// #include "vec"
// aiw::Vec<3> f(){ return aiw::vec(1.,2.,3.); }
// void g(aiw::Ind<2> x){ std::cout<<"x="<<x<<std::endl; }

namespace aiw{
//------------------------------------------------------------------------------
	class SwigTypesTable{
		swig_module_info *module;
	public:
		void out(){ printf("module=%p\n", module); }
		inline SwigTypesTable(){ module = &swig_module; }
		inline int size(){ return module->size; }
		inline const char* get_item(int i){ return module->types[i]->str; }
		inline void patch(int src, int dst){ module->types[src]->clientdata = module->types[dst]->clientdata; }
		inline void set_type(PyObject* obj, int T){
			// SwigPyObject *s = (SwigPyObject*)obj;
			// WOUT(obj, s->ptr, s->next, s->ty, T, module->types[T]->str, s->ob_type->tp_name, this, module);
			((SwigPyObject*)obj)->ty = module->types[T];
			// WOUT(((SwigPyObject*)obj)->ty->str);
		}
	};
//------------------------------------------------------------------------------
	inline const char* get_swig_type(PyObject* obj){ return ((SwigPyObject*)obj)->ty->str; }
	inline void push_vec_data(void *obj, int offset, const char* data, int size){
		for(int i=0; i<size; i++) ((char*)obj)[offset+i] = data[i];
	}
	inline PyObject* pull_vec_data(void *obj, int offset, int size){
		return PyString_FromStringAndSize( ((const char*)obj)+offset, size);
	}
	class PVec{ char p[1024]; };
//------------------------------------------------------------------------------
};
#endif //SWIGPYTHON
#endif //AIW_SWIG_HPP
