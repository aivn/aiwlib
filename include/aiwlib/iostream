// -*- C++ -*-
#ifndef AIW_IOSTREAM_HPP
#define AIW_IOSTREAM_HPP

/**
 * Copyright (C) 2016, 2020-22 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#ifdef __NVCC__
#include <string>

namespace aiw { class IOstream{
       protected:
                long max_sz = -1;
        public:
                long max_size() const { return max_sz; }
                
                std::string name;
                virtual ~IOstream(){}
                virtual operator bool () const = 0;
                inline bool operator !() const { return !*this; }
                
                virtual void close() = 0;


}; }
#else // __NVCC__

// #include <iostream>
#include <cstdio>
#include <string>
#include <stdarg.h>

// #include <sys/types.h>
#include <sys/stat.h>
// #include <unistd.h>

#include "binaryio"
#include "alloc"

namespace aiw{
	//--------------------------------------------------------------------------
#ifndef SWIG
	//--------------------------------------------------------------------------
	template <typename S> void format2stream(S &&str, const char *format){
		for(int i=0; format[i]; ++i){
			if(format[i]=='%'){
				if(format[i+1]=='%'){ str.write(format, i); format += i+1; i = 0; }
				else WRAISE("illegal '%' count: ", format, format+i);
			}
		}
		str<<format;
	}
	template <typename S, typename T, typename ... Args> 
	void format2stream(S &&str, const char *format, T x, Args ... args){
		for(int i=0; true; ++i){
			if(format[i]==0) WRAISE("illegal '%' count: ", format, i, sizeof...(Args)+1, x);
			if(format[i]=='%'){ 
				if(format[i+1]=='%'){ str.write(format, i); format += i+1; i = 0; }
				else {
					if(i) str.write(format, i);
					str<<x; format2stream(str, format+i+1, args...);
					return;
				}  
			}
		}
	}
	template <typename T> struct format2stream_fill_t{ const T& data; int width; char key; };
	template <typename S, typename T> inline S&& operator << (S&& str, const format2stream_fill_t<T> &f){
		str.width(f.width); str.fill(f.key); str<<f.data;
		return str;
	}
	template <typename T> format2stream_fill_t<T> fill(const T& x, int w, char k='0'){ return format2stream_fill_t<T>{x, w, k}; }
#endif //SWIG
	//--------------------------------------------------------------------------
	class IOstream{
	protected:
		long max_sz = -1;
	public:
		long max_size() const { return max_sz; }
		
		std::string name;
		virtual ~IOstream(){}
		virtual operator bool () const = 0;
		inline bool operator !() const { return !*this; }
		
		virtual void close() = 0;
		virtual long tell() const = 0;
		bool check_tail(long sz) const { return max_sz<0 || sz<=max_sz-tell(); }
		virtual bool seek(long offset, int whence=0) = 0;
		virtual size_t read(void* buf, size_t size) = 0; // add swig typemap for bind to python style?
		// std::string read(size_t size){ char buf[size]; read(buf, size); return buf; }
		virtual size_t write(const void* buf, size_t size) = 0;
		virtual void flush() = 0;

		virtual bool eof() const = 0;

		// for iostream compability ;-(
		long tellg() const { return this->tell(); }
		bool seekg(long offset, int whence=0){ return this->seek(offset, whence); }
		
#ifndef SWIG
		virtual std::shared_ptr<IOstream> copy() const = 0;
		virtual std::shared_ptr<aiw::BaseAlloc> mmap(size_t size, bool write_mode=false){
			if(write_mode) WRAISE("can't mmapped IOstream to write mode", name); 
			std::shared_ptr<BaseAlloc> ptr(new MemAlloc<char>(size));
			size_t read_size = read(ptr->get_addr(), size);
			if(read_size!=size) WRAISE("incorrect size from read", size, read_size, name);
			return ptr;
		}
		virtual int printf(const char * format, ...) = 0;
		template <typename ... Args> IOstream& operator ()(const char *format, Args ... args){
			format2stream(*this, format, args...); return *this;
		}
		bool dump(){ return true; }
		bool load(){ return true; }
		template <typename T, typename ... Args> bool dump(const T& x, const Args& ... args){ return stream_dump_wrapper(*this, x) && this->dump(args...); }
		template <typename T, typename ... Args> bool load(      T& x,       Args& ... args){ return stream_load_wrapper(*this, x) && this->load(args...); }
#endif //SWIG

		aiw::IOstream& operator << (const char* S){ write(S, strlen(S)); return *this; }
		aiw::IOstream& operator << (bool   v){ write(v?"True":"False", v?4:5); return *this; }
		aiw::IOstream& operator << (char   c){ printf("%c", c); return *this; }
		aiw::IOstream& operator << (int    v){ printf("%i", v); return *this; }
		aiw::IOstream& operator << (long   v){ printf("%i", v); return *this; }
		aiw::IOstream& operator << (float  v){ printf("%f", v); return *this; }
		aiw::IOstream& operator << (double v){ printf("%lf", v); return *this; }
		aiw::IOstream& operator << (long double v){ printf("%lf", v); return *this; }
		aiw::IOstream& operator << (const std::string &S){ printf("%s", S.c_str()); return *this; }
		// aiw::IOstream& operator << (IOstream& (*func)(IOstream&)){ return func(*this); }

		aiw::IOstream& getline(char *buf, int bufsz, char delim='\n'){
			for(int pos=0; pos<bufsz; pos++){
				char c; if(this->read(&c, 1)!=1) break;
				if(c==delim) break;
				buf[pos] = c;
			}
			return *this; 
		}
		virtual int fileno() const { return -1; }
		virtual bool check_update() { return true; }  // ???
	};
	//--------------------------------------------------------------------------
#ifdef AIW_VEC_HPP
	template <int D, typename T> IOstream& operator << (IOstream &s, const Vec<D, T> &v){
		if(D){ s<<v[0]; } for(int i=1; i<D; i++){ s<<" "<<v[i]; } return s;
	}
#endif //AIW_VEC_HPP
	//--------------------------------------------------------------------------
}   // end of namespace aiw
namespace std{
#ifndef SWIG
	inline aiw::IOstream& getline(aiw::IOstream &&S, std::string &dst, char delim='\n'){
		for(char c; S.read(&c, 1)==1 && c!=delim;) dst += c;
		return S;
	}
#endif //SWIG
	inline aiw::IOstream& getline(aiw::IOstream &S, std::string &dst, char delim='\n'){ return getline(std::move(S), dst, delim); }	
}
namespace aiw{
	//--------------------------------------------------------------------------
	//   File
	//--------------------------------------------------------------------------
	class File: public IOstream{
		std::shared_ptr<FILE> pf;
		timespec last_mtime;
	public:
		File(){}
		File(FILE *f){ pf.reset(f, [](FILE*){}); }
		operator bool () const { return pf.get() && !feof(pf.get()); }
#ifndef SWIG
		std::shared_ptr<IOstream> copy() const { File *f = new File; *f = *this; std::shared_ptr<IOstream> r(f); return r; }
		template <typename ... Args> void open(const char *format, const char *mode, Args ... args){
			std::stringstream path; format2stream(path, format, args...); FILE *f = ::fopen(path.str().c_str(), mode);
			if(!f) WRAISE("cannot open file", path.str(), mode);
			name = path.str(); pf.reset(f, ::fclose);
			struct stat st; fstat(::fileno(f), &st); last_mtime = st.st_mtim; max_sz = mode[0]=='r'? st.st_size: -1;
			// if(mode[0]=='r'){ ::fseek(f, 0, SEEK_END); max_sz = ::ftell(f); ::fseek(f, 0, SEEK_SET); } else max_sz = -1;
		}
		template <typename ... Args> File(const char *format, const char *mode, Args ... args){ open(format, mode, args...); }
#endif //SWIG
		File(const char *path, const char *mode){ open(path, mode); }
		
		void close(){ pf.reset(); } 
		long tell() const { return ftell(pf.get()); }
		bool seek(long offset, int whence=0){ return !fseek(pf.get(), offset, whence) && (max_sz<0 || ftell(pf.get())<=max_sz); }
		size_t read(void* buf, size_t size){ return ::fread(buf, 1, size, pf.get()); }
		size_t write(const void* buf, size_t size){ return ::fwrite(buf, 1, size, pf.get()); }
		void flush(){ fflush(pf.get()); }
		bool eof() const { return feof(pf.get()) || (max_sz>=0 && ftell(pf.get())>=max_sz) ; }
#ifndef AIW_WIN32
		std::shared_ptr<aiw::BaseAlloc> mmap(size_t size, bool write_mode=false){
			return std::shared_ptr<BaseAlloc>(new MMapAlloc(pf, size, write_mode?PROT_READ|PROT_WRITE:PROT_READ)); //O_RDONLY|O_WRONLY:O_RDONLY));
		}
#endif //AIW_WIN32
		int printf(const char * format, ...){
			va_list args; va_start(args, format);   
			int r = vfprintf(pf.get(), format, args);
			va_end(args);
			return r;
		}
		int fileno() const { return ::fileno(pf.get()); }
		bool check_update(){
			struct stat st; fstat(::fileno(pf.get()), &st);
			bool res = last_mtime.tv_sec==st.st_mtim.tv_sec && last_mtime.tv_nsec==st.st_mtim.tv_nsec; 
			last_mtime = st.st_mtim;  if(max_sz>=0) max_sz = st.st_size;
			return res;
		}
	};	
	//--------------------------------------------------------------------------
	//   Wrap std::iostream
	//--------------------------------------------------------------------------
#ifndef SWIG
	struct StdOstream {
		std::ostream &f;
		StdOstream(): f(std::cout){}
		StdOstream(std::ostream &f_): f(f_){}
		size_t write(const void* buf, size_t size){ f.write((const char*)buf, size); return size; } // ???
		// long tellg() const { return f.tellg(); }

		bool dump(){ return true; }
		template <typename T, typename ... Args> bool dump(const T& x, const Args& ... args){ return stream_dump_wrapper(*this, x) && this->dump(args...); }
	};
	struct StdIstream {
		std::istream &f;
		long max_size() const { return -1; }
		bool check_tail(size_t) const { return true; }
		StdIstream(): f(std::cin){}
		StdIstream(std::istream &f_): f(f_){}
		size_t read(void* buf, size_t size){ return f.read((char*)buf, size).gcount(); }
		long tellg() const { return f.tellg(); }
		bool load(){ return true; }
		template <typename T, typename ... Args> bool load(T& x, Args& ... args){ return stream_load_wrapper(*this, x) && this->load(args...); }
	};
#endif //SWIG 
	//--------------------------------------------------------------------------
}   // end of namespace aiw

#endif //__NVCC__
#endif //AIW_IOSTREAM_HPP
