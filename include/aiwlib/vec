// -*- C++ -*-
#ifndef AIW_VEC_HPP
#define AIW_VEC_HPP
/**
 * Copyright (C) 2009-2017 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#ifndef SWIG
#include <cmath>
#include "debug"
#endif //SWIG

#ifdef SWIG
namespace aiw{
	template <int D, typename T=double> struct Vec{	T p[D]; };
	template <int D> struct Ind{  int p[D]; };
	template <int D> struct Vecf{ float p[D]; };
}
#else //SWIG
namespace aiw{
//---------------------------------------------------------------------------
	template <int D, typename T=double> class Vec{
	public:
		T p[D];
	private:
		inline void set_x(){}
		template <typename T2, typename ... Args>
		inline void set_x(const T2& x, const Args&... xxx){	p[D-1-sizeof...(Args)] = x; set_x(xxx...); }
	public:
        explicit Vec(T val=0) { for(int i=0; i<D; i++) p[i] = val; }    
		Vec(const Vec<1, T> &v){ for(int i=0; i<D; i++) p[i] = v.p[0]; }

		template <typename ... Args> explicit Vec(const Args&... xxx){ 
			static_assert(sizeof...(Args)==D, "illegal parametrs count!"); 
			set_x(xxx...); 
		}

		template <class T2> Vec(const Vec<D, T2> &v){ for(int i=0; i<D; i++) p[i] = v.p[i]; }
		template <class T2> inline Vec& operator = (const Vec<D,T2> &v){ for(int i=0; i<D; i++) p[i] = v.p[i]; return *this; }
		// template <class T2> inline operator Vec<D, T2>() const { Vec<D, T2> res; for(int i=0; i<D; i++) res[i] = p[i]; return res; }
		
		
		inline T  operator [] (int i) const { 
			WASSERT(0<=i && i<D, "Vec<D, szT>::operator [] --- index out of range: ", D, sizeof(T), i); 
			return p[i]; 
		} 
		inline T& operator [] (int i) { 
			WASSERT(0<=i && i<D, "Vec<D, szT>::operator [] --- index out of range: ", D, sizeof(T), i); 
			return p[i]; 
		} 
		
		inline Vec operator -() const { Vec res; for(int i=0; i<D; i++) res.p[i] = -p[i]; return res; }
		inline Vec operator +() const { Vec res; for(int i=0; i<D; i++) res.p[i] = +p[i]; return res; }

		template <typename T2> inline Vec& operator *= (T2 x){ for(int i=0; i<D; i++) p[i] *= x; return *this; }
		template <typename T2> inline Vec& operator /= (T2 x){ for(int i=0; i<D; i++) p[i] /= x; return *this; }
		
		inline T  periodic(int i) const { i %= D; if(i<0) i += D; return p[i]; } 
		inline T& periodic(int i)       { i %= D; if(i<0) i += D; return p[i]; } 
		inline Vec circ(int l) const { // cyclic shift
			Vec res; l %= D; if(l<0) l += D;
			for(int i=0; i<l; i++) res.p[i] = p[D-l+i]; 
			for(int i=l; i<D; i++) res.p[i] = p[i-l]; 
			return res; 
		}

		template <typename ... Args> 
		inline Vec<sizeof ...(Args), T> operator ()(Args ... xxx) const { 
			return Vec<sizeof ...(Args), T>((*this)[xxx]...); // periodic ???
		}
		template <int D2> inline Vec<D2, T> operator ()(const Vec<D2, int> &I) const { 
			Vec<D2, T> res; for(int i=0; i<D2; i++) res[i] = (*this)[I[i]]; 
			return res;
		}

		// *** OTHER FUNCTIONS ***
		inline T abs2() const { T x = 0.; for(int i=0; i<D; i++) x += p[i]*p[i]; return x; }
		inline T abs() const { return sqrt(abs2()); }

		inline Vec pow(const int n) const { // ????
			if(n==0) return Vec((T)1.);		
			if(n==1) return *this;
			Vec v, res; for(int i=0; i<D; i++) v[i] = n>0 ? p[i] : 1./p[i];
	 		const int abs_n = n>0 ? n : -n;
	    	int k = -1;	while( !(abs_n&(1<<++k)) && k<31 ) v &= v;
			res = v;
			while( abs_n>>++k && k<31 ){ v &= v; if(abs_n&(1<<k)) res &= v; }
     		return res;		
		}
		inline Vec pow(double n) const { Vec v; for(int i=0; i<D; i++) v[i] = ::pow(p[i], n); return v; }
		// inline Vec mod(T x) const { Vec v; for(int i=0; i<D; i++) v[i] = p[i]%x; return v; }

		inline Vec fabs() const { Vec v; for(int i=0; i<D; i++) v[i] = ::fabs(p[i]); return v; }
		inline Vec ceil() const { Vec v; for(int i=0; i<D; i++) v[i] = ::ceil(p[i]); return v; }
		inline Vec floor() const { Vec v; for(int i=0; i<D; i++) v[i] = ::floor(p[i]); return v; }
		inline Vec round() const { Vec v; for(int i=0; i<D; i++) v[i] = ::round(p[i]); return v; }
		template <typename T2> inline Vec<D, decltype(T()/T2())> fmod(T x) const { 
			 Vec<D, decltype(T()/T2())> v; for(int i=0; i<D; i++) v[i] = ::fmod(p[i], x); 
			 return v; 
		}
		template <typename T2> inline Vec<D, decltype(T()/T2())> fmod(const Vec<D, T2> &b) const { 
			Vec<D, decltype(T()/T2())> v; for(int i=0; i<D; i++) v[i] = ::fmod(p[i], b[i]); 
			return v; 
		}

		inline T min() const { T res = p[0]; for(int i=1; i<D; i++) res = res<p[i]?res:p[i]; return res; }
		inline T max() const { T res = p[0]; for(int i=1; i<D; i++) res = res>p[i]?res:p[i]; return res; }
		inline int imin() const { int k=0; for(int i=1; i<D; i++) k = p[k]<=p[i]?k:i; return k; }
		inline int imax() const { int k=0; for(int i=1; i<D; i++) k = p[k]>p[i]?k:i; return k; }
		inline T sum() const { T res = p[0]; for(int i=1; i<D; i++) res += p[i]; return res; }
		inline T prod() const { T res = p[0]; for(int i=1; i<D; i++) res *= p[i]; return res; }
		template <typename T2> inline void prod(T2 &res) const { res = p[0]; for(int i=1; i<D; i++) res *= p[i]; }

		inline Vec<D, int> nan() const { Vec<D, int> res; for(int i=0; i<D; i++) res[i] = std::isnan(p[i]); return res; }
		inline Vec<D, int> inf() const { Vec<D, int> res; for(int i=0; i<D; i++) res[i] = std::isinf(p[i]); return res; }
		inline bool cknan() const { for(int i=0; i<D; i++) if(std::isnan(p[i])) return true; return false; }
		inline bool ckinf() const { for(int i=0; i<D; i++) if(std::isinf(p[i])) return true; return false; }

		inline bool operator !() const { for(int i=0; i<D; i++) if(p[i]) return false; return true; }
		operator T () = delete;
		// inline operator bool() const { for(int i=0; i<D; i++) if(p[i]) return true; return false; } 

		template<typename T2> inline bool contains(const T2& x) const { 
			for(int i=0; i<D; i++) if(p[i]==x) return true; 
			return false;
		}

		inline Vec reverse() const { Vec res; for(int i=0; i<D; i++){ res[i] = p[D-i-1]; } return res; }
		inline Vec operator ~ () const { reverse(); }
		inline Vec sort() const {
			Vec res = *this;
			for(int i=0; i<D-1; i++)
				for(int j=i+1; j<D; j++)
					if(res[i]>res[j]){ T tmp = res[i]; res[i] = res[j]; res[j] = tmp; }
			return res;
		}

		inline T calc(T x) const { T res = p[D-1]; for(int i=D-2; i>=0; i--){ res = p[i]+res*x; } return res; }
		inline Vec<D-1, T> diff() const { Vec<D-1, T> res; for(int i=1; i<D; i++){ res[i-1] = i*p[i]; } return res; }
		
		T* begin(){ return p; }
		T* end(){ return p+D; }
	}; // end of class Vec
	template <typename T, typename ... Args>
	inline Vec<1+sizeof...(Args), T> vec(T x, Args ... args){
		return Vec<1+sizeof...(Args), T>(x, args...);
	}
	//--------------------------------------------------------------------------
	template<int D> using Vecf = Vec<D, float>;
	template <typename ... Args> 
	inline Vecf<sizeof...(Args)> vecf(Args ... args){
		return Vecf<sizeof...(Args)>(args...);
	}
	//--------------------------------------------------------------------------
	//  compare 
	//--------------------------------------------------------------------------
#define VEC_BIN_OP_DELETE(OP)											\
	template <int D1, int D2, typename T1, typename T2>					\
	typename std::enable_if<D1!=D2 && D1!=1 && D2!=1, bool>::type		\
	operator OP (const Vec<D1, T1> &a, const Vec<D2, T2> &b) = delete;	

#define VEC_CMP_VEC(OP, CMP, RET)										\
	template <int D, typename T1, typename T2>							\
	inline bool operator OP (const Vec<D, T1> &a, const Vec<D, T2> &b){	\
		for(int i=0; i<D; i++) if(a.p[i] CMP b.p[i]) return RET;		\
		return !RET;													\
	}																	\
	template <int D, typename T1, typename T2>							\
	inline typename std::enable_if<(D>1), bool>::type					\
		operator OP (const Vec<1, T1> &a, const Vec<D, T2> &b){			\
		for(int i=0; i<D; i++) if(a.p[0] CMP b.p[i]) return RET;		\
		return !RET;													\
	}																	\
	template <int D, typename T1, typename T2>							\
	inline typename std::enable_if<(D>1), bool>::type					\
		operator OP (const Vec<D, T1> &a, const Vec<1, T2> &b){			\
		for(int i=0; i<D; i++) if(a.p[i] CMP b.p[0]) return RET;		\
		return !RET;													\
	}																	\
	VEC_BIN_OP_DELETE(OP)
		
	VEC_CMP_VEC(<, >=, false);
	VEC_CMP_VEC(<=, >, false);
	VEC_CMP_VEC(>, <=, false);
	VEC_CMP_VEC(>=, <, false);
	VEC_CMP_VEC(==, !=, false); // округление ???
	VEC_CMP_VEC(!=, !=, true);  // округление ???
	
#undef VEC_CMP_VEC
	//--------------------------------------------------------------------------
	//  multiplication / division of a vector by a scalar
	//--------------------------------------------------------------------------
#define VEC(DD, OP) Vec<DD, decltype(T1() OP T2())>
	template <int D, typename T1, typename T2>
	inline VEC(D, *) operator * (const Vec<D, T1> &v, T2 x){
		VEC(D, *) r;								
		for(int i=0; i<D; i++) r.p[i] = v.p[i]*x;
		return r;												   
	}
	template <int D, typename T1, typename T2>
	inline VEC(D, *) operator * (T1 x, const Vec<D, T2> &v){
		VEC(D, *) r;								
		for(int i=0; i<D; i++) r.p[i] = x*v.p[i];
		return r;												   
	}
	template <int D, typename T1, typename T2>
	inline VEC(D, /) operator / (const Vec<D, T1> &v, T2 x){
		VEC(D, /) r;								
		for(int i=0; i<D; i++) r.p[i] = v.p[i]/x;
		return r;												   
	}
	template <int D, typename T1, typename T2>
	inline VEC(D, /) operator / (T1 x, const Vec<D, T2> &v){
		VEC(D, /) r;								
		for(int i=0; i<D; i++) r.p[i] = x/v.p[i];
		return r;												   
	}
	//--------------------------------------------------------------------------
	//  scalar product of vectors
	//--------------------------------------------------------------------------
	template <int D, typename T1, typename T2> 
	inline decltype(T1()*T2()) operator * (const Vec<D, T1> &a, const Vec<D, T2> &b){
		decltype(T1()*T2()) res; if(D) res = a.p[0]*b.p[0];
		for(int i=1; i<D; i++) res += a.p[i]*b.p[i];
		return res;
	}
	template <int D, typename T1, typename T2> 
	inline typename std::enable_if<(D>1), decltype(T1()*T2())>::type operator * (const Vec<D, T1> &a, const Vec<1, T2> &b){
		decltype(T1()*T2()) res = a.p[0]*b.p[0];
		for(int i=1; i<D; i++) res += a.p[i]*b.p[0];
		return res;
	}
	template <int D, typename T1, typename T2> 
	inline typename std::enable_if<(D>1), decltype(T1()*T2())>::type operator * (const Vec<1, T1> &a, const Vec<D, T2> &b){
		decltype(T1()*T2()) res = a.p[0]*b.p[0];
		for(int i=1; i<D; i++) res += a.p[0]*b.p[i];
		return res;
	}
	template <int D> inline int64_t operator * (const Vec<D, int> &a, const Vec<D, int> &b){
		int64_t res = 0;
		for(int i=0; i<D; i++) res += (int64_t)(a[i])*b[i];
		return res;
	}
	VEC_BIN_OP_DELETE(*)												
	//--------------------------------------------------------------------------
	//  binary vectors operations
	//--------------------------------------------------------------------------
#define VEC_BIN_OP(OP, ROP, EXC, ED1, E1D, IEXC, IED1)					\
	template <int D, typename T1, typename T2>							\
	inline VEC(D, ROP) operator OP (const Vec<D, T1> &a,				\
									const Vec<D, T2> &b){				\
		VEC(D, ROP) r;													\
		for(int i=0; i<D; i++) r.p[i] = EXC;							\
		return r;														\
	}																	\
	template <int D, typename T1, typename T2>							\
	inline typename std::enable_if<(D>1), VEC(D, ROP)>::type			\
	operator OP (const Vec<D, T1> &a, const Vec<1, T2> &b){				\
		VEC(D, ROP) r;													\
		for(int i=0; i<D; i++) r.p[i] = ED1;							\
		return r;														\
	}																	\
	template <int D, typename T1, typename T2>							\
	inline typename std::enable_if<(D>1), VEC(D, ROP)>::type			\
	operator OP (const Vec<1, T1> &a, const Vec<D, T2> &b){				\
		VEC(D, ROP) r;													\
		for(int i=0; i<D; i++) r.p[i] = E1D;							\
		return r;														\
	}																	\
	VEC_BIN_OP_DELETE(OP)												\
	template <int D, typename T1, typename T2>							\
	inline Vec<D, T1>& operator OP##= (Vec<D, T1> &a,					\
									   const Vec<D, T2> &b){			\
		for(int i=0; i<D; i++) a.p[i] IEXC;								\
		return a;														\
	}																	\
	template <int D, typename T1, typename T2>							\
	inline typename std::enable_if<(D>1), Vec<D, T1>&>::type			\
	operator OP##= (Vec<D, T1> &a, const Vec<1, T2> &b){				\
		for(int i=0; i<D; i++) a.p[i] IED1;								\
		return a;														\
	}																	\
	VEC_BIN_OP_DELETE(OP##=)												

	VEC_BIN_OP(+, +, a.p[i]+b.p[i], a.p[i]+b.p[0], a.p[0]+b.p[i], +=b.p[i], +=b.p[0]);					
	VEC_BIN_OP(-, -, a.p[i]-b.p[i], a.p[i]-b.p[0], a.p[0]-b.p[i], -=b.p[i], -=b.p[0]);					
	VEC_BIN_OP(/, /, a.p[i]/b.p[i], a.p[i]/b.p[0], a.p[0]/b.p[i], /=b.p[i], /=b.p[0]);					
	VEC_BIN_OP(&, *, a.p[i]*b.p[i], a.p[i]*b.p[0], a.p[0]*b.p[i], *=b.p[i], *=b.p[0]);					
#define SS(OP, A, B) (a.p[A] OP b.p[B]?a.p[A]:b.p[B])
	VEC_BIN_OP(>>, +, SS(>,i,i), SS(>,i,0), SS(>,0,i), =SS(>,i,i), =SS(>,i,0)) 
	VEC_BIN_OP(<<, +, SS(<,i,i), SS(<,i,0), SS(<,0,i), =SS(<,i,i), =SS(<,i,0)) 
#undef SS
#undef VEC
#undef VEC_BIN_OP_DELETE
#undef VEC_BIN_OP
	//--------------------------------------------------------------------------
	//  vectors product
	//--------------------------------------------------------------------------
    template <typename T1, typename T2>
	inline decltype(T1()*T2()) operator % (const Vec<2, T1> &a, const Vec<2, T2> &b){ return a.p[0]*b.p[1]-a.p[1]*b.p[0]; }
    template <typename T1, typename T2>
    inline Vec<3, decltype(T1()*T2())> operator % (const Vec<3, T1> &a, const Vec<3, T2> &b){
		Vec<3, decltype(T1()*T2())> c;
		c.p[0] = a.p[1]*b.p[2]-a.p[2]*b.p[1];
		c.p[1] = a.p[2]*b.p[0]-a.p[0]*b.p[2];
		c.p[2] = a.p[0]*b.p[1]-a.p[1]*b.p[0];
		return c;
	} 
	/*
    template <typename T1, typename T2>
    inline void operator %= (Vec<3, T1> &a, const Vec<3, T2> &b){
		T1 a0 = a[0], a1 = a[1];
		a[0] = a1*b[2]   - a[2]*b[1];
		a[1] = a[2]*b[0] - a0*b[2];
		a[2] = a0*b[1]   - a1*b[0];
		return a;
    }
	*/ 
	//--------------------------------------------------------------------------
	//  join vectors
	//--------------------------------------------------------------------------
    template <int D, class T1, class T2> inline Vec<D+1, decltype(T1()+T2())> operator | (const T1 &x, const Vec<D, T2> &v){ 
		Vec<D+1, decltype(T1()+T2())> r; r.p[0] = x; 
		for(int i=0; i<D; i++) r.p[i+1] = v.p[i]; 
		return r; 
	}
    template <int D, class T1, class T2> inline Vec<D+1, decltype(T1()+T2())> operator | (const Vec<D, T1> &v, const T2 &x){ 
		Vec<D+1, decltype(T1()+T2())> r; 
		for(int i=0; i<D; i++) r.p[i] = v.p[i]; 
		r.p[D] = x; return r; 
	}
    template <int D1, int D2, class T1, class T2> 
	inline Vec<D1+D2,  decltype(T1()+T2())> operator | (const Vec<D1,T1> &a, const Vec<D2, T2> &b){ 
		Vec<D1+D2,  decltype(T1()+T2())> r; 
		for(int i=0; i<D1; i++) r.p[i] = a.p[i]; 
		for(int i=0; i<D2; i++) r.p[D1+i] = b.p[i]; 
		return r; 
    }
	//--------------------------------------------------------------------------
	//  index work
	//--------------------------------------------------------------------------
	template<int D> using Ind = Vec<D, int>;
	template<typename ... Args> inline Ind<sizeof...(Args)> ind(Args ... args){ return Ind<sizeof...(Args)>(args...); }

	template<int D> inline Ind<D>& operator ++ (Ind<D> &I){ I[0]++; return I; }
	template<int D> inline bool operator ^= (Ind<D> &pos, const Ind<D> &Up){
		for(int i=0; i<D-1; i++) 
			if(pos[i]<Up[i]) return true; 
			else{ pos[i] = 0; ++pos[i+1]; }
		return pos[D-1]<Up[D-1];
	}
	template<int D> inline typename std::enable_if<D!=1, bool>::type
	operator ^= (Ind<D> &pos, Ind<1> Up){ return pos ^= Ind<D>(Up[0]); }
	template<int D> inline Ind<D> operator % (size_t x, const Ind<D> &p){
		Ind<D> r;
		for(int i=0; i<D; i++){ r[i] = x%p[i]; x /= p[i]; }
		return r;
	}   	
	//--------------------------------------------------------------------------
	//  ostream operation
	//--------------------------------------------------------------------------
	template <int D, typename T> std::ostream& operator << (std::ostream &s, const Vec<D, T> &v){
		if(D){ s<<v[0]; } for(int i=1; i<D; i++){ s<<" "<<v[i]; } return s;
	}
	template <int D, typename T> std::istream& operator >> (std::istream &s, Vec<D, T> &v){	
		for(int i=0; i<D; i++){ s>>v[i]; if(i<D-1 and s.get()!=',') s.unget(); } return s;
	}
#ifdef AIW_IOSTREAM_HPP
	template <int D, typename T> IOstream& operator << (IOstream &s, const Vec<D, T> &v){
		if(D){ s<<v[0]; } for(int i=1; i<D; i++){ s<<" "<<v[i]; } return s;
	}
#endif //AIW_IOSTREAM_HPP
	//--------------------------------------------------------------------------
	//   other functions
	//--------------------------------------------------------------------------
	template <int D, typename T> inline bool is_bad_value(const Vec<D, T> &v){ return v.cknan() || v.ckinf(); }
	template <int D, typename T> inline T fabsV(const Vec<D, T> &v){ T s = v[0]*v[0]; for(int i=1; i<D; i++){ s+= v[i]*v[i]; } return sqrt(s); }
	inline double fabsV(double x){ return ::fabs(x); } 
	//--------------------------------------------------------------------------
}; // end of namespace aiw

namespace std{
//---------------------------------------------------------------------------
	template<typename T> struct less;
#ifndef AIVV_LESS
#define AIVV_LESS
	template<> struct less<double> {
		inline bool operator()(double x, double y) const { 
			int px, py; frexp(x, &px); frexp(y, &py);	
			return y-x > ldexp(1., (px<py?px:py)-40);
		}
	};
	template<> struct less<float> {
		inline bool operator()(float x, float y) const { 
			int px, py; frexp(x, &px); frexp(y, &py);	
			return y-x > ldexp(1., (px<py?px:py)-16);
		}
	};
#endif //AIVV_LESS
	template<int D, typename T> struct less<aiw::Vec<D, T> > {
		bool operator()(const aiw::Vec<D, T> &x, const aiw::Vec<D, T> &y ) const { 
			less<T> cmp_l;
			for(int i=D-1; i>=0; i--){
				if(cmp_l(x[i], y[i])) return true;
				if(cmp_l(y[i], x[i])) return false;
			}
			return false;
		} 
	};	
//---------------------------------------------------------------------------
}; // end of namespace std
#endif //SWIG
#endif //AIW_EUCLID_HPP
