// -*- C++ -*-
#ifndef AIW_SWIG_HPP
#define AIW_SWIG_HPP
/**
 * Copyright (C) 2016 Antov V. Ivanov, KIAM RAS, Moscow.
 * This code is released under the GPL2 (GNU GENERAL PUBLIC LICENSE Version 2, June 1991)
 **/

#ifdef SWIGPYTHON
#include <stdio.h>

// #include "vec"
// aiw::Vec<3> f(){ return aiw::vec(1.,2.,3.); }
// void g(aiw::Ind<2> x){ std::cout<<"x="<<x<<std::endl; }

namespace aiw{
//------------------------------------------------------------------------------
/*
#ifndef SWIG
	static void *_trivial_cast(void *x, int *SWIGUNUSEDPARM(newmemory)) { return x; }
	//static swig_type_info _swigtp1 = {"_p_aiw__PVec", "aiw::PVec *", 0, 0, (void*)0, 0};
	//static swig_cast_info _swigcp1[] = {  {&_swigtp1, _trivial_cast, 0, 0},{0, 0, 0, 0}};
	static swig_cast_info _swigcp1[] = {  {0, _trivial_cast, 0, 0},{0, 0, 0, 0},{0, 0, 0, 0}};
#endif //SWIG
*/
	class SwigTypesTable{
		swig_module_info *module;
	public:
		SwigTypesTable(){ module = &swig_module; }
		SwigTypesTable next() const { SwigTypesTable stt; stt.module = module->next; return stt; }
		bool operator == (const SwigTypesTable &other) const { return module==other.module; }		
		int size() const { return module->size; }
		const char* get_item(int i){ return module->types[i]->str; }
		void patch(int dstT, const SwigTypesTable &srcM, int srcT){
			module->types[dstT]->clientdata = srcM.module->types[srcT]->clientdata;
			//_swigcp1[0].type = module->types[dstT];
			//_swigcp1[1].type = module->types[srcT];
			//module->types[dstT]->cast = _swigcp1; 
		}
		void set_type(PyObject* obj, int T){ 
			//printf("'%s' ==> set_type(%p:%p, %i) ==> '%s'\n", ((SwigPyObject*)obj)->ty->str, 
			//	   obj, SWIG_Python_GetSwigThis(obj), T, module->types[T]->str);
			((SwigPyObject*)obj)->ty = module->types[T]; 
		}
		void out_table() const {
			printf("module %p\n", module);
			for(int i=0; i<size(); i++){
				swig_type_info *t = module->types[i];
				printf("  %i: str='%s' name='%s' clientdata=%p owndata=%i\n", i, t->str, t->name, t->clientdata, t->owndata);
				swig_cast_info *c = t->cast->next;
				while(c){ printf("    cast to '%s' with clientdata=%p\n", c->type->str, c->type->clientdata); c = c->next; }
			}
		}
	};
//------------------------------------------------------------------------------
	inline const char* get_swig_type(PyObject* obj){ return ((SwigPyObject*)obj)->ty->str; }
	inline void push_vec_data(void *obj, int offset, const char* data, int size){
		for(int i=0; i<size; i++) ((char*)obj)[offset+i] = data[i];
	}
	inline PyObject* pull_vec_data(void *obj, int offset, int size){
		return PyString_FromStringAndSize( ((const char*)obj)+offset, size);
	}
	class PVec{ char p[1024]; };
	//	printf("_wrap_delete_PVec(%p) '%s'\n", args, SWIGTYPE_p_aiw__PVec->str); //aiv
//------------------------------------------------------------------------------
};
#endif //SWIGPYTHON
#endif //AIW_SWIG_HPP
