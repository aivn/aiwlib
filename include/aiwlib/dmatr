// -*- C++ -*-
#ifndef AIW_DYNAMIC_MATRIX_HPP
#define AIW_DYNAMIC_MATRIX_HPP

/**
 * Copyright (C) 2019 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <memory>
#include "matr"
#include "dvec"

namespace aiw{
	//--------------------------------------------------------------------------
	template <typename Q=double> class DynMatr{
		static void mem_free(Q* ptr) noexcept { delete [] ptr; }
		std::shared_ptr<Q> p; int X=0, Y=0;
	public:
		void fill(Q x=0){ for(int i=0; i<X*Y; i++) p[i] = x; }
		Ind<2> bbox() const { return Ind<2>(Y, X); }
		int nrows() const { return Y; }
		int ncols() const { return X; }

		      Q& operator () (int y, int x)       { WASSERT(0<=x && x<X && 0<=y && y<Y, "illegal index: ", x, y, X, Y, sizeof(Q));  return p.get()[x+y*X]; }
		const Q& operator () (int y, int x) const { WASSERT(0<=x && x<X && 0<=y && y<Y, "illegal index: ", x, y, X, Y, sizeof(Q));  return p.get()[x+y*X]; }
		      Q& operator [] (const Ind<2> &pos)       { return (*this)(pos[0], pos[1]); } 
		const Q& operator [] (const Ind<2> &pos) const { return (*this)(pos[0], pos[1]); } 
		
		void init(int Y_, int X_){
			WASSERT(X_>=0 && Y_>=0, "illegal matrix size: ", X_, Y_);
			X = X_; Y = Y_; p.reset(X*Y? new Q[X*Y]: nullptr, mem_free); for(int i=0; i<X*Y; i++) p.get()[i] = 0.; // ???
		}
		void init(int Y_, int X_, Q q){
		    WASSERT(X_==Y_, "non-square matrix! ", X_, Y_);
			init(Y_, X_); for(int i=0; i<X; i++) (*this)(i, i) = q;
		}
		void resize(int Y_, int X_){ init(Y_, X_); }	
		DynMatr(int Y_=0, int X_=0){ init(Y_, X_); }
		DynMatr(int Y_, int X_, Q q){ init(Y_, X_, q); }
		DynMatr(Ind<2> YX){ init(YX[0], YX[1]); }

		//----------------------------------------------------------------------
#define BODY															\
		WASSERT(X==B.bbox()[0], "illegal matrix size: ", bbox(), B.bbox());	\
		int BX = B.bbox()[1]; DynMatr M(Y, BX);							\
		for(int y=0; y<Y; y++)											\
			for(int z=0; z<BX; z++){									\
				M(y, z) = p.get()[y*X]*B(0, z);							\
				for(int x=1; x<X; x++) M(y, z) += (*this)(y, x)*B(x, z); \
			}															\
		return M;														
		DynMatr operator * (const DynMatr &B) const { BODY } 
		template <int YY, int XX> DynMatr operator * (const Matr<YY, XX, Q> &B) const { BODY }
#undef BODY
		//----------------------------------------------------------------------
		 
		DynMatr T() const { 
			DynMatr M(X, Y);  
			for(int y=0; y<Y; y++)
				for( int x=0; x<X; x++) M(x, y) = p.get()[x+y*X]; 
			return M;
		}
		
		DynMatr app(const int J, const int I) const {
			DynMatr M(Y-1, X-1);
			for(int y=0; y<J; y++) for(int x=0; x<I; x++) M(y, x) = p.get()[x+y*X];
			for(int y=0; y<J; y++) for(int x=I+1; x<X; x++) M(y, x-1) = p.get()[x+y*X];
			for(int y=J+1; y<Y; y++) for(int x=0; x<I; x++) M(y-1, x) = p.get()[x+y*X];
			for(int y=J+1; y<Y; y++) for(int x=I+1; x<X; x++) M(y-1, x-1) = p.get()[x+y*X];
			return M;
		} 
		Q det() const {
			if(X==1 && Y==1) return p.get()[0]; 
			Q D = 0.;
			for(int x=0; x<X; x++) D += app(0, x).det()*p.get()[x]*(1.-2.*(x%2));
			return D;
		}
		DynMatr inv() const {
			WASSERT(X==Y, "non square matrix: ", X, Y);
			DynMatr M(X, Y);
			for(int x=0; x<X; x++) M(x, 0) = app(0, x).det()*(1.-2.*((x)%2));
			Q D = 0.; for(int x=0; x<X; x++) D += p.get()[x]*M(x, 0); D = 1./D;
			for(int x=0; x<X; x++) M(x, 0) *= D;
			for(int y=1; y<Y; y++) for(int x=0; x<X; x++) M(x, y) = app(y, x).det()*(1.-2.*((x+y)%2))*D;
			return M;
		}
		Q tr() const {
			WASSERT(X==Y, "non square matrix!", X, Y, sizeof(Q));			
			Q res = p.get()[0]; for(int i=1; i<X; i++) res += p.get()[i*(X+1)];
			return res;
		}
		      Q* data()       { return p.get(); }
		const Q* data() const { return p.get(); }

		//----------------------------------------------------------------------
		DynVec<Q> row(const int y) const {
			WASSERT(0<=y && y<Y, "illegal y: ", y, X, Y, sizeof(Q));
			DynVec<Q> r(X); for(int x=0; x<X; x++) r[x] = p.get()[x+y*X];
			return r;
		}
		void row(const int y, const DynVec<Q> &r){
			WASSERT(0<=y && y<Y && r.size()==X, "illegal y: ", y, X, Y, r.size(), sizeof(Q));
			for(int x=0; x<X; x++) p.get()[x+y*X] = r[x];
		}
		template<int XX> void row(const int y, const Vec<XX, Q> &r){
			WASSERT(0<=y && y<Y && r.size()==X, "illegal y: ", y, X, Y, r.size(), sizeof(Q));
			for(int x=0; x<X; x++) p.get()[x+y*X] = r[x];
		}
		DynVec<Q> col(const int x) const {
			WASSERT(0<=x && x<X, "illegal x: ", x, X, Y, sizeof(Q));
			DynVec<Q> c(Y); for(int y=0; y<Y; y++) c[y] = p.get()[x+y*X];
			return c;
		}
		void col(const int x, const DynVec<Q> &c){
			WASSERT(0<=x && x<X && c.size()==Y, "illegal x: ", x, X, Y, c.size(), sizeof(Q));
			for(int y=0; y<Y; y++) p.get()[x+y*X] = c[y];
		}
		template<int YY> void col(const int x, const Vec<YY, Q> &c){
			WASSERT(0<=x && x<X && c.size()==Y, "illegal x: ", x, X, Y, c.size(), sizeof(Q));
			for(int y=0; y<Y; y++) p.get()[x+y*X] = c[y];
		}
	}; // end of class DynMatr
	//--------------------------------------------------------------------------
	template <typename Q> DynMatr<Q>& operator *= (DynMatr<Q> &M, const Q &v){
		int sz = M.bbox().prod(); for(int i=0; i<sz; i++) M.data()[i] *= v;
		return M; 
	}
	template <typename Q> DynMatr<Q> operator * (const DynMatr<Q> &M, const Q &v){
		DynMatr<Q> R(M.bbox()); int sz = M.bbox().prod(); for(int i=0; i<sz; i++) R.data()[i] = M.data()[i]*v;
		return R; 
	}
	template <typename Q> DynMatr<Q> operator * (const Q &v, const DynMatr<Q> &M){
		DynMatr<Q> R(M.bbox()); int sz = M.bbox().prod(); for(int i=0; i<sz; i++) R.data()[i] = v*M.data()[i];
		return R; 
	}
	//--------------------------------------------------------------------------
#define MATR_BIN_OP(OP, ROP)											\
	template <typename Q> DynMatr<Q> operator OP (const DynMatr<Q> &A,	\
												  const DynMatr<Q> &B){	\
		WASSERT(A.bbox()==B.bbox(),	#OP " ", A.bbox(), B.bbox());		\
		DynMatr<Q> R(A.bbox()); int sz = A.bbox().prod();				\
		for(int i=0; i<sz; i++)											\
			R.data()[i] = A.data()[i] ROP B.data()[i];					\
		return R;														\
	}																	\
	template <int Y, int X, typename Q>  								\
	Matr<Y, X, Q> operator OP (const Matr<Y, X, Q> &A,					\
							   const DynMatr<Q> &B){					\
		WASSERT(A.bbox()==B.bbox(),	#OP " ", A.bbox(), B.bbox());		\
		Matr<Y, X, Q> R;												\
		for(int i=0; i<X*Y; i++)										\
			R.data()[i] = A.data()[i] ROP B.data()[i];					\
		return R;														\
	}																	\
	template <int Y, int X, typename Q>  								\
	Matr<Y, X, Q> operator OP (const DynMatr<Q> &A,						\
							   const Matr<Y, X, Q> &B){					\
		WASSERT(A.bbox()==B.bbox(),	#OP " ", A.bbox(), B.bbox());		\
		Matr<Y, X, Q> R;												\
		for(int i=0; i<X*Y; i++)										\
			R.data()[i] = A.data()[i] ROP B.data()[i];					\
		return R;														\
	}																	\
	template <typename Q, typename TB>									\
	DynMatr<Q>& operator OP##= (DynMatr<Q> &A, const TB &B){			\
		WASSERT(A.bbox()==B.bbox(),	#OP "= ", A.bbox(), B.bbox());		\
		int sz = A.bbox().prod();										\
		for(int i=0; i<sz; i++) A.data()[i] ROP##= B.data()[i];			\
		return A;														\
	}																	\
	template <int Y, int X, typename Q>  								\
	Matr<Y, X, Q>& operator OP##= (Matr<Y, X, Q> &A,					\
								   const DynMatr<Q> &B){				\
		WASSERT(A.bbox()==B.bbox(),	#OP "= ", A.bbox(), B.bbox());		\
		for(int i=0; i<X*Y; i++) A.data()[i] ROP##= B.data()[i];		\
		return A;														\
	}																	

	MATR_BIN_OP(-, -)
	MATR_BIN_OP(+, +)
	MATR_BIN_OP(&, *)
#undef MATR_BIN_OP
	//--------------------------------------------------------------------------
#define BODY															\
	WASSERT(v.size()==M.bbox()[0], "v*M ", v.size(), M.bbox());			\
	for(int x=0; x<X; x++) t[x] = v[0]*M(0, x);							\
	for(int y=1; y<Y; y++) for(int x=0; x<X; x++) t[x] += v[y]*M(y, x);	\
	return t;
	// v as line
	template <typename Q> inline DynVec<Q> operator * (const DynVec<Q> &v, const DynMatr<Q> &M){ int Y = v.size(), X = M.bbox()[1]; DynVec<Q> t(X); BODY }
	template <int Y, typename Q> inline DynVec<Q> operator * (const Vec<Y, Q> &v, const DynMatr<Q> &M){ int X = M.bbox()[1]; DynVec<Q> t(X); BODY }
	template <int Y, int X, typename Q> inline Vec<X, Q> operator * (const DynVec<Q> &v, const Matr<Y, X, Q> &M){ Vec<X, Q> t; BODY }
#undef BODY
	//--------------------------------------------------------------------------
#define BODY													\
	WASSERT(M.bbox()[1]==v.size(), "M*v ", M.bbox(), v.size());	\
	for(int y=0; y<Y; y++){										\
		t[y] = v[0]*M(y, 0);									\
		for(int x=1; x<X; x++) t[y] += v[x]*M(y, x);			\
	}															\
	return t; 
	// v as column
	template <typename Q> DynVec<Q> operator * (const DynMatr<Q> &M, const DynVec<Q> &v){ int Y = M.bbox()[0], X = v.size(); DynVec<Q> t(Y); BODY }
	template <int X, typename Q> DynVec<Q> operator * (const DynMatr<Q> &M, const Vec<X, Q> &v){ int Y = M.bbox()[0]; DynVec<Q> t(Y); BODY }
	template <int Y, int X, typename Q> Vec<Y, Q> operator * (const Matr<Y, X, Q> &M, const DynVec<Q> &v){ Vec<Y, Q> t; BODY }
#undef BODY
	//--------------------------------------------------------------------------
#define BODY															\
	DynMatr<Q> M(a.size(), b.size());									\
	for(int y=0; y<a.size(); y++)										\
		for(int x=0; x<b.size(); x++) M(y, x) = a[y]*b[x];				\
	return M;
	// tensor mult.
	template <typename Q> inline DynMatr<Q> operator ^ (const DynVec<Q> &a, const DynVec<Q> &b){ BODY }
	template <int D, typename Q> inline DynMatr<Q> operator ^ (const Vec<D, Q> &a, const DynVec<Q> &b){ BODY }  
	template <int D, typename Q> inline DynMatr<Q> operator ^ (const DynVec<Q> &a, const Vec<D, Q> &b){ BODY }
	//--------------------------------------------------------------------------
	template <typename Q> std::ostream& operator << (std::ostream &str, const DynMatr<Q> &M){
		for(int y=0; y<M.bbox()[0]; y++){
			for(int x=0; x<M.bbox()[1]; x++) str<<M(y, x)<<'\t';
			str<<'\n';
		}
		return str;
	}
#undef BODY
	//--------------------------------------------------------------------------
	// template <int N, typename Q, typename C> void dispense(const Matr<N, N, Q> &src, const Ind<N> &IDs, C& dst){
	// 	for(int y=0; y<N; y++) for(int x=0; x<N; x++) dst(IDs[y], IDs[x]) += src(y, x); // ???
	// }
	//--------------------------------------------------------------------------
	// using DMatr = aiw::DynMatr<double>;
}   // end of namespace aiw
#endif //AIW_DYNAMIC_MATRIX_HPP
