// -*- C++ -*-
#ifndef AIW_BITMASK_HPP
#define AIW_BITMASK_HPP

/**
 * Copyright (C) 2024 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <cstdint>

namespace aiw{
	//--------------------------------------------------------------------------
	template <int D> class BitMask {  // параметризовать по типу?
		static const int sz = D/64+bool(D%64);
		uint64_t p[sz];  // счетчик с числом единиц?
	public:
		void fill(bool x){
			if(x){
				for(int i=0; i<sz-bool(D%64); i++) p[i] = ~uint64_t(0);
				if(D%64) p[sz-1] = (uint64_t(1)<<D%64)-1;
			}
			else for(int i=0; i<sz; i++) p[i] = 0;
		}
		BitMask(bool x=false){ fill(x); }
		BitMask(const BitMask &src, bool inv=false){
			if(inv){
				for(int i=0; i<sz-bool(D%64); i++) p[i] = ~src.p[i];
				if(D%64) p[sz-1] = ~src.p[sz-1]&((uint64_t(1)<<D%64)-1);
			} else for(int i=0; i<sz; i++) p[i] = src.p[i];
		}
		int size() const { int res = 0; for(int i=0; i<sz; i++){ res += __builtin_popcountl(p[i]); } return res; }
		
		bool get(int i) const { return p[i/64]&(uint64_t(1)<<i%64); }
		bool operator [](int i) const { return get(i); }
		void set(int i, bool x=true){
			if(x) p[i/64] |= uint64_t(1)<<i%64;
			else p[i/64] &= ~(uint64_t(1)<<i%64);
		}
		bool any() const {
			for(int i=0; i<sz; i++) if(p[i]) return true;
			return false;
		}
		operator bool () const { return any(); }
		bool operator !() const { return !any(); }
		bool all() const {
			for(int i=0; i<sz-bool(D%64); i++) if(p[i]!=~uint64_t(0)) return false;
			if(D%64 && p[sz-1]!=(uint64_t(1)<<D%64)-1) return false;
			return true;			
		}
		BitMask operator ~ () const { return BitMask(*this, true); }  // ???

		class Iterator{
			friend class BitMask;
			const uint64_t *p = nullptr; int pos = D, sz = D;
		public:
			int operator * () const { return pos; }
			bool operator != (Iterator) const { return pos<sz; }
			void operator ++ (){  // это можно оптимизировать
				while(pos<D && *p && ++pos%64) if(*p&(uint64_t(1)<<pos%64)) return;
				while(pos<D && !*++p) pos += 64; 
				while(pos<D && !(*p&(uint64_t(1)<<pos%64))) pos++;
			}
		};
		Iterator begin() const {  // это можно оптимизировать
			Iterator I; I.p = p; I.pos = 0;
			for(int i=0; i<sz && !p[i]; i++){ I.p++; I.pos += 64; }
			while(I.pos<D && !get(I.pos)) I.pos++;
			return I;
		}
		Iterator end() const { return Iterator(); }
		// __builtin_ffsl (unsigned long x)
		// Возвращает единицу плюс индекс младшего значащего 1 бита x, или, если x равно нулю, возвращает ноль. 

		BitMask& operator |= (const BitMask &other){
			for(int i=0; i<sz; i++) p[i] |= other.p[i];
			return *this;
		}
		BitMask& operator &= (const BitMask &other){
			for(int i=0; i<sz; i++) p[i] &= other.p[i];
			return *this;
		}
		// добавить срезы?
	};
	//--------------------------------------------------------------------------
}   // end of namespace aiw
#endif //AIW_BITMASK_HPP
