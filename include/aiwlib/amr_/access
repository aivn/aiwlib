// -*- C++ -*-
#ifndef AIW_AMR_ACCESS_HPP
#define AIW_AMR_ACCESS_HPP

/**
 * Copyright (C) 2019-20 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

namespace aiw{
	//--------------------------------------------------------------------------
	// ищет соседний тайл, tpos - относительная позиция, если тайла нет возвращает ноль. Смысл force неясен, сейчас force нигде не используется
	template <typename T, int D, int R>	typename AdaptiveMesh<T, D, R>::tile_t* AdaptiveMesh<T, D, R>::tile_t::find_nb_tile(Ind<D> tpos, bool force) const {
		if(parent){
			int ti = parent->find_child_ID(this);
			for(int k=0; k<D; k++) tpos[k] += bool((1<<k)&ti); // перешли в систему координат родительского тайла
			if(ind(0)<=tpos && tpos<ind(2)) return parent->childs[pos2zoff(tpos, 1)]; // находимся внутри родительского тайла
			Ind<D> upos; for(int i=0; i<D; i++){ upos[i] = tpos[i]>=0?tpos[i]/2:-1; tpos[i] = (tpos[i]+2)%2; } // позиция уровнем выше и доп позиция
			tile_t *utile = parent->find_nb_tile(upos, force); // это тайл уровнем выше
			if(utile){
				int cht = pos2zoff(tpos, 1);
				if(force && !utile->childs[cht]){
					root->ltiles.emplace_back(); utile->childs[cht] = &(root->ltiles.back());
					utile->childs[cht]->parent = utile;  utile->childs[cht]->root = root;
					utile->childs[cht]->set_coords(cht);
				}
				return utile->childs[cht];
			}
		} else { // это тайл верхнего уровня
			tpos += root->pos;
			if(ind(0)<=tpos && tpos<root->msh->tiles.bbox()) return root->msh->tiles[tpos].root;
		}
		return nullptr; 
	}
	//--------------------------------------------------------------------------
	// при необходимости рекурсивно спускается вниз по тайлу
	// неоптимизировано, trmode не поддерживается, только для НЕПРЕРЫВНОГО ПОЛЯ
	template <typename T, int D, int R> bool AdaptiveMesh<T, D, R>::tile_t::first(cell_t &C, int trmode, int start){ 
		if(get_cell_usage(0, start)){ C.offset = start; C.ptr = cell(start); WASSERT(C.ptr, "", this, start, rank, bmin); C.tile = this;	return true;  }
		int tid = cID2ctID(start); if(childs[tid]) return childs[tid]->first(C, trmode, (start<<D)&RDbits);
		return false; 
	}
	//--------------------------------------------------------------------------
	// ходит вверх по тайлам, для спуска вызывает first
	template <typename T, int D, int R> bool AdaptiveMesh<T, D, R>::tile_t::next(cell_t &C, int trmode){
		if(C.offset+1<tile_sz && first(C, trmode, C.offset+1)) return true;
		tile_t *t = this, *p = parent; uint32_t i = C.offset;
		while(p){
			i = (p->find_child_ID(t)<<((R-1)*D))|(i>>D); // смещение уровнем выше
			if(i+1<tile_sz && p->first(C, trmode, i+1)) return true;
			t = p; p = t->parent;
		}
		return false;
	} 
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> T* AdaptiveMesh<T, D, R>::heavy_tile_t::cell(int cID){  // если ПАМЯТЬ НЕ ВЫДЕЛЕНА возвращает nullptr
		int chID = cID>>D;
		if(patches && patches[chID]) return patches[chID]->data + (cID&Dbits);
		return get_chunk_info(chID)==1 ? data+cID : nullptr;
	}
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> T* AdaptiveMesh<T, D, R>::light_tile_t::cell(int cID){  // если ПАМЯТЬ НЕ ВЫДЕЛЕНА возвращает nullptr
		int chID = cID>>D;
		if(patches && patches[chID]) return patches[chID]->data+(cID&Dbits);
		return chunks[chID] ? page->data+(int(chunks[chID]-1)<<D)+(cID&Dbits) : nullptr;
	}
	//--------------------------------------------------------------------------
	//  Cell
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> const typename AdaptiveMesh<T, D, R>::Cell AdaptiveMesh<T, D, R>::Cell::operator [](const Ind<D> &dpos) const { // доступ к соседям
		Cell res; res.offset = calc_nb_zoffset(dpos, offset|(Dbits<<(R*D)));
		if(check_out_tile(res.offset)) res.tile = tile->find_nb_tile(zoff2pos<D>((res.offset>>(R*D)), 2)-ind(1)); // попали в другой тайл
		else res.tile = tile;
		res.offset &= RDbits; if(res.tile && res.tile->get_cell_usage(0, res.offset)) res.init();
		return res;
	}
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> template<typename F>
	void AdaptiveMesh<T, D, R>::Cell::deep2face(F&& f, typename AdaptiveMesh<T, D, R>::tile_t *t, uint32_t off, int mask, int res4cmp, int axe){
		uint32_t childID = cID2ctID(off); t = t->childs[childID];
		if(!t){ WRAISE("", bmin(), this->rank(), axe); return; } // <<< что то пошло не так, такого быть не должно - разрыв в поле ячеек
		off = (off<<D)&RDbits;
		double dS = 1./(1<<((D-1)*(t->rank-tile->rank)));
		for(int i=0; i<(1<<D); i++) if((i&mask)==res4cmp){
				if(t->get_cell_usage(0, off+i)){ Cell nbC; nbC.init(t, off+i); f(nbC); }
				else deep2face(f, t, off+i, mask, res4cmp, axe);
			}				
	}
	//--------------------------------------------------------------------------
	// f(Cell &nbC)
	// axe==0 --- обход по шаблону крест. axe==+/-a --- ось а, грань слева/справа
	// ifdR - допустимая разница рангов (0 - любая, 1 - соседи того же уровня или крупнее, 2 - только крупнее)
	template <typename T, int D, int R> template<typename F> void AdaptiveMesh<T, D, R>::Cell::face(F&& f, int axe, int ifdR){ 
		if(axe==0){ for(int i=1; i<=D; i++){ face(f, -i, ifdR); face(f, i, ifdR); } return; } // шаблон крест
		Cell nbC; nbC.ptr = nullptr;
		// считаем offset и тайл соседней ячейки
		int sign = axe<0? -1: 1; uint32_t a = abs(axe)-1; nbC.offset = calc_nb_zoffset<D>(a, sign, offset|(Dbits<<(R*D)));
		if(bound()&(1<<(2*a+(axe>0)))){ f(nbC); return; } // это граничная ячейка
		Ind<D> nbt_pos; nbt_pos[a] = sign; nbC.tile = check_out_tile(nbC.offset)? tile->find_nb_tile(nbt_pos): tile;
		
		nbC.offset &= RDbits;
		
		bool way_up = nbC.tile && nbC.tile->parent;
		if(nbC.tile){
			if(nbC.tile->get_cell_usage(0, nbC.offset)){ if(ifdR<=1){ nbC.init(); f(nbC); } return; } // один сосед на том же уровне
			if(nbC.tile->get_cell_split(false, nbC.offset)){ if(ifdR){ return; } way_up = false; } //  точно идем вниз, много мелких соседей
		} else if(tile->parent) {  //  мы на границе тайла текущего уровня, дальше только вверх
			tile_t *t = tile, *p = t->parent; uint32_t off = offset;
			while(p){
				off = (p->find_child_ID(t)<<((R-1)*D))|(off>>D); // смещение родительской ячейки в тайле выше
				uint32_t uoff = calc_nb_zoffset<D>(a, sign, off|(Dbits<<(R*D))); // соседняя ячейка уровнем выше
				nbC.offset = uoff&RDbits;
				if(check_out_tile(uoff)){ // попали в соседний тайл уровнем выше
					nbC.tile = p->find_nb_tile(nbt_pos);
					if(nbC.tile && nbC.tile->get_cell_usage(0, nbC.offset)){ nbC.init(); f(nbC); return; }
				} else if(p->get_cell_usage(0, nbC.offset)){ nbC.init(p); f(nbC); return; } // остались в верхнем тайле
				t = p; p = t->parent;
			}
			WRAISE("", bmin(), rank());
		}
		if(way_up){  // пробуем подняться, один большой сосед по грани
			tile_t *t = nbC.tile, *p = t->parent; uint32_t uoff = nbC.offset;
			while(p){
				uoff = (p->find_child_ID(t)<<((R-1)*D))|(uoff>>D);
				if(p->get_cell_usage(0, uoff)){ nbC.init(p, uoff); f(nbC); return; } 
				t = p; p = t->parent;
			}
		}
		// подняться не удалось, идем вниз - много мелких соседей
		if(nbC.tile && !ifdR) deep2face(f, nbC.tile, nbC.offset, 1<<a, bool(axe<0)<<a, a);
		// else f(nbC); // это граница сетки или переход в сторону более мелких соседей 
	}
	//--------------------------------------------------------------------------
	template <typename T, int D, int R>  template <typename dT, typename F1, typename F2> void AdaptiveMesh<T, D, R>::foreach2Xdt(F1 &&f1, F2 &&f2, dT dt){
		dT dt_arr[max_rank+1] = {dt}; for(int i=1; i<=max_rank; i++) dt_arr[i] = dt_arr[i-1]/2;
		for(int i=0; i<(1<<max_rank); i++){
			for(auto t: *this) for(auto C: t) if(!(i%(1<<(max_rank-C.rank())))) f1(C, i>>(max_rank-C.rank()), dt_arr[C.rank()]);
			for(auto t: *this) for(auto C: t) if(!((i+1)%(1<<(max_rank-C.rank())))) f2(C, (i+1)>>(max_rank-C.rank()), dt_arr[C.rank()]);
		}
	}
	//--------------------------------------------------------------------------
};
#endif //AIW_AMR_ACCESS_HPP
