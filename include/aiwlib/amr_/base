// -*- C++ -*-
#ifndef AIW_AMR_BASE_HPP
#define AIW_AMR_BASE_HPP

/**
 * Copyright (C) 2019-20 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

namespace aiw{
	//--------------------------------------------------------------------------
	//   tile_t
	//--------------------------------------------------------------------------
	// устанавливает bmin и step (в т.ч. для потомков), tID --- позиция тайла у родителя
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::tile_t::set_coords(int tID){ 
		if(parent){ step = parent->step/2; for(int i=0; i<D; i++) bmin[i] = parent->bmin[i]+bool(tID&(1<<i))*(1<<R)*step[i]; }
		else { bmin = root->msh->tiles.cell_angle(root->pos, false); step = root->msh->tiles.step/(1<<R); }
		for(int i=0; i<(1<<D); i++) if(childs[i]) childs[i]->set_coords(i);
	}			
	//--------------------------------------------------------------------------
	//   out_info()
	//--------------------------------------------------------------------------			
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::out_info() const {
		printf("#==== OUT INFO ====\n");
		for(Ind<D> pos; pos^=tiles.bbox(); ++pos) tiles[pos].out_info();
		size_t sz = size(), msz = memsz();
		printf("#==== max_rank=%i size=%ld memsz=%ld memory overhead=%g\n", get_max_rank(), sz, msz, double(msz)/(sizeof(T)*sz));
	}
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::root_t::out_info() const {
		printf("#R[%i", pos[0]); for(int i=1; i<D; i++) printf(",%i", pos[i]);
		printf("]: this=%p max_rank=%i root=%p htiles=%i ltiles=%i patches=%i\n",
			   this, get_max_rank(), root, int(htiles.size()), int(ltiles.size()), int(patches.size()));
		for(const heavy_tile_t &t: htiles) if(!t.root) t.out_info();
		root->out_info();
	}			
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::heavy_tile_t::out_info() const {
		char buf[2*rank+1]; for(int i=0; i<2*rank; i++) buf[i] = ' '; buf[2*rank] = 0;
		printf("#%sH: this=%p parent=%p rank=%hi root=%p ch_use=%hi ch_alloc=%hi ch_free=%hi usages[0]=%XL usages[1]=%XL first_free_chunk=%i far_ch_sz=%i\n",
			   buf, this, parent, rank, root, ch_use, ch_alloc, ch_free, usages[0][0], usages[1][0], first_free_chunk, far_ch_sz);
		for(int i=0; i<(1<<D); i++) if(childs[i]) childs[i]->out_info();
	}
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::light_tile_t::out_info() const {
		char buf[2*rank+1]; for(int i=0; i<2*rank; i++) buf[i] = ' '; buf[2*rank] = 0;
		printf("#%sL: this=%p parent=%p rank=%hi root=%p ch_use=%hi ch_alloc=%hi ch_free=%hi usages[0]=%XL usages[1]=%XL page=%p asz=%i\n",
			   buf, this, parent, rank, root, ch_use, ch_alloc, ch_free, usages[0][0], usages[1][0], page, alloc_chunks_sz());
		for(int i=0; i<(1<<D); i++) if(childs[i]) childs[i]->out_info();
	}
	//--------------------------------------------------------------------------
	//   selfcheck()
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::root_t::selfcheck() const{
		for(const heavy_tile_t& t: htiles) t.selfcheck();
		for(const light_tile_t& t: ltiles) t.selfcheck();
		for(const heavy_tile_t& ht: htiles) if(ht.far_ch_sz){ 
				bool res = false;
				for(const light_tile_t& lt: ltiles) if(lt.page==&ht){ res = true; break; }
				if(!res){
					out_info();
					WOUT(&ht, ht.far_ch_sz, ht.alloc_chunks_sz(), ht.root, ht.parent, ht.rank);
					for(int i=0; i<chunks_sz; i++) WOUT(i, ht.get_chunk_usage(i), ht.get_chunk_info(i), ht.patches[i]);
					abort();
				}
			}
	}
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::heavy_tile_t::selfcheck() const{
		bool res = true;
		if(parent){ parent->find_child_ID(this); if(parent->rank+1!=rank){ WOUT(parent->rank, rank); res= false; } }
		else if((root && root->root!=this) || rank){ WOUT(root->root, rank); res = false; }
		for(int i=0; i<(1<<D); i++) if(childs[i] && (childs[i]->parent!=this || childs[i]->root!=root || childs[i]->rank!=rank+1)){
				WOUT(i, this, childs[i], childs[i]->parent, root, childs[i]->root, rank, childs[i]->rank); res = false;
			}
		/* */
		for(int i=0; i<usages_sz; i++) if(usages[0][i]!=usages[1][i]){ WOUT(i, usages[0][i], usages[1][i]); res = false; } 
		for(int i=0; i<chunks_sz; i++) if(get_chunk_usage(i) && get_chunk_info(i)!=1){ WOUT(i, get_chunk_usage(i), get_chunk_info(i)); res = false; }
		for(int i=0; i<chunks_sz; i++) if(patches[i]){ WOUT(i, patches[i], get_chunk_usage(i), get_chunk_info(i)); res = false; }
		/* */
		if(!res){
			if(root){
				root->out_info(); 
				for(const light_tile_t&lt: root->ltiles) if(lt.page==this){
						printf("#--- page ---");
						for(int i=0; i<chunks_sz; i++) WOUT(i, lt.chunks[i], lt.get_chunk_usage(i));
						break;
					}
			printf("#--- self ----\n"); out_info();
			abort();
			}
		}
	}
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::light_tile_t::selfcheck() const{
		bool res = true;
		if(parent){ parent->find_child_ID(this); if(parent->rank+1!=rank){ WOUT(parent->rank, rank); res= false; } }
		else if((root && root->root!=this) || rank){ WOUT(root->root, rank); res = false; }
		for(int i=0; i<(1<<D); i++) if(childs[i] && (childs[i]->parent!=this || childs[i]->root!=root || childs[i]->rank!=rank+1)){
				WOUT(i, this, childs[i], childs[i]->parent, root, childs[i]->root, rank, childs[i]->rank); res = false;
			}
		/* */
		for(int i=0; i<usages_sz; i++) if(usages[0][i]!=usages[1][i]){ WOUT(i, usages[0][i], usages[1][i]); res = false; } 
		for(int i=0; i<chunks_sz; i++){
			if(bool(get_chunk_usage(i))!=bool(chunks[i])){ WOUT(i, get_chunk_usage(i), chunks[i]); res = false; }
			if(chunks[i] && page->get_chunk_info(chunks[i]-1)!=2){ WOUT(i, chunks[i], page->get_chunk_info(chunks[i]-1), page->get_chunk_usage(chunks[i]-1)); res = false; }
		}
		for(int i=0; i<chunks_sz; i++) if(patches[i]){ WOUT(i, patches[i], get_chunk_usage(i), chunks[i]); res = false; }
		/* */		
		if(!res){ root->out_info(); printf("#--- self ----\n"); out_info(); printf("#--- page ----\n");  page->out_info(); abort(); }
	}
	//--------------------------------------------------------------------------
	//   root_t
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> int AdaptiveMesh<T, D, R>::root_t::get_max_rank() const {
		int res = 0;
		for(const heavy_tile_t &t: htiles) if(res<t.rank) res = t.rank;
		for(const light_tile_t &t: ltiles) if(res<t.rank) res = t.rank;
		return res;
	}
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::root_t::tiles2dat(IOstream& hS, IOstream& lS) const {
		for(const heavy_tile_t &t: htiles) if(t.root) t.out2dat(hS);
		for(const light_tile_t &t: ltiles) t.out2dat(lS); 
	}
	//--------------------------------------------------------------------------
	//  AdaptiveMesh
	//--------------------------------------------------------------------------
	template <typename T, int D, int R>	void AdaptiveMesh<T, D, R>::set_max_rank_box_step(){ // устанавливает max_rank, box и шаги
		max_rank = 0; for(Ind<D> pos; pos^=tiles.bbox(); ++pos) max_rank = std::max(tiles[pos].get_max_rank(), max_rank);
		box = tiles.bbox()*(1<<(R+max_rank)); this->set_axes(bmin, bmax);
	}
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> void AdaptiveMesh<T, D, R>::init(Ind<D> tbox, const aiw::Vec<D> &bmin_, const aiw::Vec<D> &bmax_){
		box = tbox*(1<<R); this->set_axes(bmin_, bmax_);
		tiles.init(tbox, bmin_, bmax_);
		for(Ind<D> pos; pos^=tbox; ++pos){
			root_t &r = tiles[pos]; r.msh = this; r.pos = pos;
			r.htiles.emplace_back(); heavy_tile_t *t; r.root = t = &(r.htiles.back()); t->root = &r; t->set_coords(-1);
			for(int i=0; i<usages_sz; i++) t->usages[0][i] = t->usages[1][i] = ~uint64_t(0); // все ячейки активированы
			for(int i=0; i<chunks_sz; i++) t->set_chunk_info(i, 1); // все чанки локально заняты, сделать это через  alloc_chunk?
			t->ch_use = chunks_sz; // t->first_free_chunk = chunks_sz;
		}
		set_max_rank_box_step();
	}
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> size_t AdaptiveMesh<T, D, R>::size() const { // число ячеек
		size_t res = 0;
		for(Ind<D> pos; pos^=tiles.bbox(); ++pos){
			const root_t &r = tiles[pos];
			for(const heavy_tile_t& t: r.htiles) if(t.root) res += (1<<D)*t.ch_use;
			for(const light_tile_t& t: r.ltiles) res += (1<<D)*t.ch_use;
		}
		return res;
	}
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> size_t AdaptiveMesh<T, D, R>::memsz() const { // размер памяти в байтах
		size_t res = sizeof(*this) + sizeof(root_t)*tiles.bbox().prod();
		for(Ind<D> pos; pos^=tiles.bbox(); ++pos){
			const root_t &r = tiles[pos];
			// res += r.htiles.size()*(sizeof(heavy_tile_t)-8*chunks_sz) + r.ltiles.size()*(sizeof(light_tile_t)-8*chunks_sz) + r.patches.size()*sizeof(patch_t);
			res += r.htiles.size()*sizeof(heavy_tile_t) + r.ltiles.size()*sizeof(light_tile_t) + r.patches.size()*sizeof(patch_t);
		}
		return res;
	}
	//--------------------------------------------------------------------------
	//  Cell
	//--------------------------------------------------------------------------
	template <typename T, int D, int R> uint32_t AdaptiveMesh<T, D, R>::Cell::bound(){ // по два бита на каждую ось, слева/справа
		if(bound_!=~0) return bound_;
		bound_ = 0; uint64_t goff = (uint64_t(tile->get_tile_pos())<<(R*D))|offset, mask = (~uint64_t(0))>>(64-D*(R+tile->rank));
		for(int i=0; i<D; i++){
			uint64_t omask = zmasks[D-1]<<i, gm = goff&omask;
			if(tile->root->pos[i]==0 && !gm) bound_ |= 1<<(i*2);
			if(tile->root->pos[i]==tile->root->msh->tiles.bbox()[i]-1 && gm==(mask&omask)) bound_ |= 1<<(1+(i*2));
		}
		return bound_;
	} 
	//--------------------------------------------------------------------------
};  // end of namespace aiw
#endif //AIW_AMR_BASE_HPP
