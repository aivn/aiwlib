// -*- C++ -*-
#ifndef AIW_MESH_VIEW_HPP
#define AIW_MESH_VIEW_HPP

/**
 * Copyright (C) 2020-21 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <omp.h>
#include <utility>
#include "../alloc"
#include "../interpolations"
#include "../base_mesh"
#include "base"

namespace aiw{
	//--------------------------------------------------------------------------
	class MeshView: public BaseView, BaseMesh<16> { 
		using BaseView::head;
		int D = 0, szT = 0;
		std::shared_ptr<BaseAlloc> mem;
		bool segy = false;  // транспонирует оси и делает flip по вертикали
		
		struct access_t { // public BaseMesh<2> ???
			static const int dim = 2;
			typedef float cell_type; 
			const char *ptr;
			Ind<2> box, mul;
			Vec<2> bmin, step, rstep;
			int logscale, interp;
			CellFieldAccess cfa;
			bool powZ2 = false; // для seg-Y
			int Z0 = 0;         // начальная точка при усилении сигнала в seg-Y
			
			access_t(const MeshView &data, const ConfView &conf);
			float operator[](Ind<2> pos) const { pos >>= ind(0, 0); pos <<= box-ind(1); return cfa.get_f(ptr+mul*pos) *(powZ2?(Z0-pos[1])*(Z0-pos[1]):1.f); }
			void mod_coord(int axe, double r, int &pos, double &x) const { // вычисляет pos и  x на основе r
				if(interp&(0xF<<(4*(1-axe)))){
					pos = std::floor(logscale&1<<axe ? log(r/bmin[axe])*rstep[axe]-.5 :(r-bmin[axe])*rstep[axe]-.5); // ???
					x = logscale&1<<axe ? log(r/(bmin[axe]*pow(step[axe], pos)))*rstep[axe]-.5 : (r-bmin[axe])*rstep[axe]-pos-.5;
				} else pos = logscale&1<<axe ? log(r/bmin[axe])*rstep[axe] :(r-bmin[axe])*rstep[axe];
			}
			float operator()(const Vec<2> &r) const {
				Ind<2> pos; Vec<2> x; mod_coord(0, r[0], pos[0], x[0]); mod_coord(1, r[1], pos[1], x[1]);
				return interpolate(*this, pos, x, interp);
			}
		};

		std::vector<CellFieldAccess> cfa_list;
	public:
		// std::string head;

	    bool load(aiw::IOstream &S);
		// bool load_as_segy(aiw::IOstream &S);
		bool load_from_segy(aiw::IOstream &S);

		int dim() const OVERRIDE { return D; }
		void get_conf(ConfView &conf, bool firstcall=false) const OVERRIDE;  // настраивает conf (с учетом crop)
		aiw::Vec<2> f_min_max(const ConfView &conf) const OVERRIDE;          // вычисляет min-max, как это делать для preview?

		std::string get(const ConfView& conf, aiw::Vec<2> r) const OVERRIDE;

		void plot(const ConfView &conf, Image &image, const CalcColor &color) const OVERRIDE;
		void preview(const ConfView& conf0, Image &image, const CalcColor &color) const OVERRIDE;  // рассчитан на маленькое изображение, учитывает только flip
	};
	//--------------------------------------------------------------------------
};
#endif //AIW_MESH_VIEW_HPP
