// -*- C++ -*-
#ifndef AIW_SPHERE_VIEW_HPP
#define AIW_SPHERE_VIEW_HPP

/**
 * Copyright (C) 2020 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <omp.h>
#include <utility>
#include "../sphere"
#include "../interpolations"
#include "../binary_format"
#include "base"

namespace aiw{
	//--------------------------------------------------------------------------
	class SphereView { 
		int R = 0, szT = 0, mode = 0, sz = 0;
		std::shared_ptr<BaseAlloc> mem;
		std::vector<CellFieldAccess> cfa_list;
	public:
		std::string head;

	    bool load(aiw::IOstream &S){
			BinaryFormat bf; bf.D = 0; bf.R = -1; if(!bf.load(S)) return false;
			head = bf.head; szT = bf.szT; R = bf.R; mode = R>>29; R &= ~(7<<29);  sph_init_table(R);
			sz = mode==0? sph_cells_num(R): (mode==1? sph_vertex_num(R): sph_edges_num(R));
			mem = S.mmap(sz*szT, 0); cfa_list = bf.tinfo.get_access();
			return true;
		}

		int dim() const { return 2; }
		void get_conf(ConfView &conf, bool firstcall=false) const {  // настраивает conf (с учетом crop)
			conf.dim = 2; conf.features = ConfView::opt_mollweide|ConfView::opt_cell_bound;
			conf.bmin0 = conf.bmin = vec(0.); conf.bmax0[0] = conf.bmax[0] = 360; conf.bmax0[1] =  conf.bmax[1] = 180; conf.axes = ind(0, 1);
			conf.anames[0] = "phi"; conf.anames[1] = "theta";
			conf.cfa_list = cfa_list;
		}
		aiw::Vec<2> f_min_max(const ConfView &conf) const {
			const char *ptr = (const char*)(mem->get_addr());
			float f_min, f_max; f_min = f_max = conf.cfa.get_f(ptr);
			for(int i=1; i<sz; i++){
				float f = conf.cfa.get_f(ptr+i*szT);
				if(f_min>f) f_min = f;
				if(f_max<f) f_max = f;
			}
			return Vec<2>(f_min, f_max);
		}

		float get(const ConfView& conf, const Vec<3>& r) const {
			const char *ptr = (const char*)(mem->get_addr());
			if(!conf.sph_interp || mode>1){
				size_t ID = mode==0? sph_cellInd(r, R): (mode==1? sph_vertInd(r, R): sph_edgeInd(r, R));
				return conf.cfa.get_f(ptr + ID*szT);
			}			
			uint64_t IDs[13]; double weights[13]; int szw = sph_interp_weights(r, R, mode, IDs, weights);
			float v = 0; for(int i=0; i<szw; i++) v += conf.cfa.get_f(ptr + IDs[i]*szT)*weights[i];
			return v;
		}
		float get(const ConfView& conf, const Vec<2>& r) const { return get(conf, polar(r[1], r[0])*(M_PI/180)); }
		
		template <typename P> void plot(const ConfView &conf, P &image, const CalcColor &color) const {
#ifdef EBUG
			double t0 = omp_get_wtime();
#endif //EBUG
			double phi0 = conf.sph_phi0*M_PI/180;
			if(conf.mollweide){
				int x_max = image.size[0]/2, y_max = image.size[1]/2, x; 
				double h = 1./y_max, hx = 2./x_max; double alpha = x_max*h;
#pragma omp parallel for	
				for(int y=-y_max; y<y_max; y++){
					for(x=-x_max; x<=-sqrt(y_max*y_max-y*y)*alpha; x++) image.set_pixel(ind(x_max+x, y_max+y), ind(255)); // empty fill
					double Y = y*h, a1 = sqrt(1.-Y*Y), b1 = M_PI/(2.*a1), z1 = 2*(asin(Y)+Y*a1)/M_PI, c1 = sqrt(1-z1*z1);  
					for(; x<sqrt(y_max*y_max-y*y)*alpha; x++){
						double sbv, cbv; sincos(b1*x*hx+phi0, &sbv, &cbv);
						Vec<3> coord = vec(c1*cbv, c1*sbv, z1);
						image.set_pixel(ind(x_max+x, y_max+y), color(get(conf, coord)));
					}
					for(; x<x_max; x++) image.set_pixel(ind(x_max+x, y_max+y), ind(255)); // empty fill
				}
			} else {				
				Vec<2> step = vec(2*M_PI, -M_PI)/image.size; Vec<2> bmin = vec(phi0-M_PI, M_PI) + .5*step;
				int sz_x = image.size[0], sz_y = image.size[1];
#pragma omp parallel for	
				for(int iy=0; iy<sz_y; iy++) for(int ix=0; ix<sz_x; ix++) image.set_pixel(ind(ix, iy), color(get(conf, bmin+vec(ix*step[0], iy*step[1]))));
				// for(Ind<2> pos; pos^=image.size; ++pos) image.set_pixel(pos, color(get(conf, bmin+(pos&step))));
			}
			WOUT(omp_get_wtime()-t0);
		}
		template <typename P> void preview(const ConfView& conf0, P &image, const CalcColor &color) const{  // рассчитан на маленькое изображение, учитывает только flip
			ConfView conf = conf0; conf.uncrop();
			plot(conf, image, color);
		}
	};
	//--------------------------------------------------------------------------
};
#endif //AIW_SPHERE_VIEW_HPP
