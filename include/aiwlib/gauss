// -*- C++ -*-
#ifndef AIW_GAUSS_HPP
#define AIW_GAUSS_HPP
/**
 * Copyright (C) 2010-2011, 2016, 2017 Antov V. Ivanov <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/
//------------------------------------------------------------------------------
#ifndef AIW_WIN32
#include <sys/time.h>
#endif //AIW_WIN32
#include <stdlib.h>
#include <math.h>
#include "vec"

namespace aiw{
	//--------------------------------------------------------------------------
	const double rand_alpha = 1./(1.+RAND_MAX), rand_alpha2PI = 2*M_PI/(1.+RAND_MAX);

	inline void rand_init(unsigned int &seed, int thID=0){
#ifndef AIW_WIN32
		if(seed==0){
			timeval t;
			gettimeofday(&t, NULL);
			seed = t.tv_usec*(1+thID);
		}
#endif //AIW_WIN32
	}
	inline void rand_init(){ unsigned int seed = 0; rand_init(seed); srand(seed); }

#ifndef AIW_WIN32
	inline double rand_gauss(){ return sqrt(-2.*log(rand_alpha*(random()+1.)))*cos(rand_alpha2PI*random()); }
	inline double rand_gauss(unsigned int &seed){ return sqrt(-2.*log(rand_alpha*(rand_r(&seed)+1.)))*cos(rand_alpha2PI*rand_r(&seed));	}
#else   //AIW_WIN32
	inline double rand_gauss(){ return sqrt(-2.*log(rand_alpha*(rand()+1.)))*cos(rand_alpha2PI*rand()); }
	inline double rand_gauss(unsigned int &seed){ return rand_gauss(); }
	//inline void sincos(double x, double *s, double *c){ *s = sin(x); *c = cos(x); }
	inline void sincosf(float x, float *s, float *c){ *s = sinf(x); *c = cosf(x); }
#endif  //AIW_WIN32

	template <int D, class T=double> inline Vec<D, T> rand_gaussV(){ Vec<D, T> v; for(int i=0; i<D; i++) v[i] = rand_gauss(); return v; }
	template <int D, class T=double> inline Vec<D, T> rand_gaussV(unsigned int &seed){ Vec<D, T> v; for(int i=0; i<D; i++) v[i] = rand_gauss(seed); return v; }
#ifndef AIW_WIN32
	inline void sincos(double phi, double *s, double *c){ *s = sin(phi); *c = cos(phi); }
#else  //AIW_WIN32
	inline void sincos(double phi, double *s, double *c){ *s = sin(phi); *c = cos(phi); }
#endif //AIW_WIN32
	//--------------------------------------------------------------------------
    template <typename T> inline aiw::Vec<3, T> rotate(const aiw::Vec<3, T>& a, const aiw::Vec<3, T>& n, double phi){ // |n|==1
		// a*cos(phi) - a%n*sin(phi) + n*(a*n)*(1-cos(phi));
		double s, c; sincos(phi, &s, &c);
		return a*c - a%n*s + n*((a*n)*(1-c));
	}
	//--------------------------------------------------------------------------
    template <typename T> inline aiw::Vec<3, T> rotate(const aiw::Vec<3, T>& a, const aiw::Vec<3, T>& b){
		// a*cos(b.abs()) - a%b*sin(b)/b.abs() + b*(a*b)*(1-cos(b))/(b*b);
		double b2 = b*b;
		if(b2<1e-16) return a;
		double b_abs = sqrt(b2); 
		double sin_b, cos_b; sincos(b_abs, &sin_b, &cos_b);
		return a*cos_b - a%b*(sin_b/b_abs) + b*((a*b)*(1-cos_b)/b2);
	}
	//--------------------------------------------------------------------------
    template <int R, typename T> inline aiw::Vec<3, T> rotate(const aiw::Vec<3, T>& a, const aiw::Vec<3, T> &b){
		Vec<3, T> res=a, add=a;
		for(int i=1; i<=R; i++){ add %= b/-i; res += add; }
		return res;
	}
	//--------------------------------------------------------------------------
	template <typename T> inline aiw::Vec<3, T> arc_rotate(const aiw::Vec<3, T>& a, const aiw::Vec<3, T> &b){
		Vec<3, T> res = a%b; T res_abs = res.abs();
		return res*(asin(res_abs)/res_abs);
	}
	//--------------------------------------------------------------------------
	inline aiw::Vec<3, double> polar(double theta, double phi){
		double s_th, c_th; sincos(theta, &s_th, &c_th);
		double s_ph, c_ph; sincos(phi,   &s_ph, &c_ph);
		return vec(s_th*c_ph, s_th*s_ph, c_th);
	}
	template <typename T> inline aiw::Vec<2, double> polar(const aiw::Vec<3, T> &n){ //==> theta, phi
		T n_z = n[2]/n.abs(); if(n_z<-1){ n_z = -1; } else if(n_z>1) n_z = 1;
		return vec(acos(n_z), atan2(n[1], n[0]));
	}
	//--------------------------------------------------------------------------
	template <typename T> inline aiw::Vec<2, T> perp(const aiw::Vec<2, T> &a){ return Vec<2, T>(-a[1], a[0]); } 
	template <typename T> inline aiw::Vec<3, T> perp(const aiw::Vec<3, T> &a){ 
		Vec<3, T> a_fabs = a.fabs(); 
		int i_min = a_fabs[0]<a_fabs[1]?0:1; 
		if(a_fabs[i_min]>a_fabs[2]) i_min = 2;
		Vec<3, T> ort; ort[i_min] = 1.; Vec<3, T> p = ort%a;
		return p/p.abs(); 
	} 
	//--------------------------------------------------------------------------
#ifndef AIW_WIN32
	template <typename T> aiw::Vec<3, T> gauss_rotate(const aiw::Vec<3, T>& a, T g){
		return rotate(a, rotate(perp(a), a*T(rand_alpha2PI*random()/a.abs()))*T(g*rand_gauss())); 
	}
	template <typename T> aiw::Vec<3, T> gauss_rotate(const aiw::Vec<3, T>& a, T g, unsigned int &seed){
		return rotate(a, rotate(perp(a), a*T(rand_alpha2PI*rand_r(&seed)/a.abs()))*T(g*rand_gauss(seed))); 
	}
#endif //AIW_WIN32
	//--------------------------------------------------------------------------
} 
#endif //AIW_GAUSS_HPP
