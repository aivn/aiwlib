// -*- C++ -*-
#ifndef AIW_SEGY_HPP
#define AIW_SEGY_HPP

/**
 * Copyright (C) 2016-2017 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <list>
#include <vector>
#include "mesh"

namespace aiw{
	extern bool segy_ibm_format;
	//--------------------------------------------------------------------------
	// принимает/возвращает сетки aiw::Mesh<float, 1|2|3>, ось времени в сейсмограммах всегда отвечает оси X, шаги отвечают шагам сеток 

	// возвращает максимальную длину трассы, count --- максимальное число трасс для чтения
	int segy_raw_read(IOstream &S, std::list<std::vector<float> > &data, std::vector<Vecf<8> > &heads, size_t count, bool read_data);
#ifndef SWIG
	inline int segy_raw_read(IOstream &&S, std::list<std::vector<float> > &data, std::vector<Vecf<8> > &heads, size_t count, bool read_data){
		return segy_raw_read(std::move(S), data, heads, count, read_data);
	}
	// segy_read... возвращают геометрию --- сетку размерами [8={PVx,PVy,PVz,PPx,PPy,PPz,dt,trace_sz}][Nx][опицонально Ny]
	Mesh<float, 2> segy_read_geometry(IOstream &&S, bool read_file_head=true, size_t count=-1);
	Mesh<float, 2> segy_read(IOstream &&S, Mesh<float, 2> &data, bool read_file_head=true, size_t count=-1);
	Mesh<float, 3> segy_read(IOstream &&S, Mesh<float, 3> &data);

	//void segy_write(IOstream &&S, const std::vector<float> &data, Vec<2> PV, Vec<3> PP);
	void segy_write(IOstream &&S, const Mesh<float, 1> &data, double z_pow, Vec<2> PV, Vec<3> PP);
	void segy_write(IOstream &&S, const Mesh<float, 2> &data, double z_pow, Vec<2> PV, Vec<3> PP0, double rotate=0., bool write_file_head=true);
	void segy_write(IOstream &&S, const Mesh<float, 3> &data, double z_pow, Vec<2> PV, Vec<3> PP0, double rotate=0., bool write_file_head=true);
#endif //SWIG 
	inline aiw::Mesh<float, 2> segy_read_geometry(aiw::IOstream &S, bool read_file_head=true, size_t count=-1){ 
		return segy_read_geometry(std::move(S), read_file_head, count); 
	}	
	inline aiw::Mesh<float, 2> segy_read(aiw::IOstream &S, aiw::Mesh<float, 2> &data, bool read_file_head=true, size_t count=-1){
		return segy_read(std::move(S), data, read_file_head, count); 
	}
	inline aiw::Mesh<float, 3> segy_read(aiw::IOstream &S, aiw::Mesh<float, 3> &data){
		return segy_read(std::move(S), data); 
	}
	inline void segy_write(aiw::IOstream &S, const aiw::Mesh<float, 1> &data, double z_pow, aiw::Vec<2> PV, aiw::Vec<3> PP){
		segy_write(std::move(S), data, z_pow, PV, PP); 
	}
	inline void segy_write(aiw::IOstream &S, const aiw::Mesh<float, 2> &data, double z_pow, aiw::Vec<2> PV, aiw::Vec<3> PP0, 
						   double rotate, bool write_file_head=true){ 
		segy_write(std::move(S), data, z_pow, PV, PP0, rotate, write_file_head); 
	}
	inline void segy_write(aiw::IOstream &S, const aiw::Mesh<float, 3> &data, double z_pow, aiw::Vec<2> PV, aiw::Vec<3> PP0, 
						   double rotate, bool write_file_head=true){
		segy_write(std::move(S), data, z_pow, PV, PP0, rotate, write_file_head); 
	}
	//--------------------------------------------------------------------------
	template <typename T> void segy_set_int(char* buf, int val){
		T x = val;
		if(segy_ibm_format) for(size_t i=0; i<sizeof(T); i++) buf[i] = ((char*)(&x))[sizeof(T)-1-i];
		else memcpy(buf, &x, sizeof(T)); 
	}
	template <typename T> int segy_get_int(const char* buf){
		T x;
		if(segy_ibm_format) for(size_t i=0; i<sizeof(T); i++) ((char*)(&x))[sizeof(T)-1-i] = buf[i];
		else memcpy(&x, buf, sizeof(T));
		return x;
	}
	//--------------------------------------------------------------------------	
	// можно ввести поля определяющие позиции для записи обязательных данных в заголовок.
	class SegyFileHead{
		char head[3600];
	public:
		double dt;      // шаг по времени, в секундах
		int trace_sz;   // число отсчетов в трассе
		int profile_sz; // число трасс в профиле (магнитограмме)

		SegyFileHead();

		// pos --- позиция в байтах
		void set_int16(int pos, int value){ segy_set_int<int16_t>(head+3200+pos, value); } 
		void set_int32(int pos, int value){ segy_set_int<int32_t>(head+3200+pos, value); }
		int get_int16(int pos) const { return segy_get_int<int16_t>(head+3200+pos); }
		int get_int32(int pos) const { return segy_get_int<int32_t>(head+3200+pos); }

		void dump(aiw::IOstream&);
		void load(aiw::IOstream&);
	};
	//--------------------------------------------------------------------------
	class SegyTraceHead{
		char head[240];
	public:
		double dt;          // шаг по времени, в секундах
		int trace_sz;       // число отсчетов в трассе
		aiw::Vec<3> PV, PP; // координаты ПВ и ПП

		SegyTraceHead();

		// pos --- позиция в байтах
		void set_int16(int pos, int value){ segy_set_int<int16_t>(head+pos, value); } 
		void set_int32(int pos, int value){ segy_set_int<int32_t>(head+pos, value); }
		int get_int16(int pos) const { return segy_get_int<int16_t>(head+pos); }
		int get_int32(int pos) const { return segy_get_int<int32_t>(head+pos); }

		void dump(aiw::IOstream&);
		bool load(aiw::IOstream&);

		void write(aiw::IOstream &S, const float *data, double z_pow=0);
		aiw::Mesh<float, 1> read(aiw::IOstream&);
	};
	//--------------------------------------------------------------------------
};
#endif //AIW_SEGY_HPP
