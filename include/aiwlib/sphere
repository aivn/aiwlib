// -*- C++ -*-
#ifndef AIW_SPHERE_HPP
#define AIW_SPHERE_HPP

#include "vec"

namespace aiw{
	//--------------------------------------------------------------------------	
	//   инициализация
	//--------------------------------------------------------------------------	
	void sph_init_table(int rank); // инициализирует таблицы вплоть до ранга rank
	void sph_free_table(int rank=-1); // освобождает таблицы старше ранга rank (включительно)
	int sph_max_rank();  // максимальный инициализированный ранг
	//--------------------------------------------------------------------------
	//   доступ к произвольному рангу, C-style
	//--------------------------------------------------------------------------
	uint64_t sph_cellInd(const aiw::Vec<3> &r, int rank); // индекс ячейки
	const aiw::Vec<3>& sph_cell(uint64_t ID, int rank); // центр ячейки
	double sph_cell_area(uint64_t ID, int rank); // площадь ячейки	
	const aiw::Vec<3, uint64_t>& sph_cell_vert(uint64_t ID, int rank); // индексы вершин ячейки
	const aiw::Vec<3, uint64_t>& sph_cell_cell(uint64_t ID, int rank); // близжайшие соседи ячейки
	// const aiw::Vec<3, uint64_t>& sph_cell_edge(uint64_t ID, int rank); // близжайшие ребра ячейки

	const aiw::Vec<3>& sph_vert(uint64_t ID, int rank); // вершина (узел) сетки
	const aiw::Vec<3, uint64_t>& sph_vert_vert(uint64_t ID, int rank); // индексы вершин вершины
	const aiw::Vec<6, uint64_t>& sph_vert_cell(uint64_t ID, int rank); // ячейки, к которым относится вершина
	// const aiw::Vec<6, uint64_t>& sph_vert_edge(uint64_t ID, int rank); // близжайшие ребра вершины

	// const aiw::Vec<2, uint64_t>& sph_edge_cell(uint64_t ID, int rank); // близжайшие ячейки ребра 
	// const aiw::Vec<2, uint64_t>& sph_edge_vert(uint64_t ID, int rank); // близжайшие вершины ребра
	//--------------------------------------------------------------------------
	class SphInd{
		uint64_t index_; // 5 бит на ранг, остальное на индекс
	public:		
		void set(uint64_t index, int rank);
		BaseSphIndex(uint64_t index, int rank){ set(index, rank); }
		uint64_t index() const;
		int rank() const;

		inline SphInd operator ++ (int);
		inline SphInd operator ++ ();
		inline SphInd operator -- (int);
		inline SphInd operator -- ();
	};
	//--------------------------------------------------------------------------
	struct SphCellInd: public SphInd{
		SphCellInd up() const;
		SphCellInd down() const;
		inline operator uint64_t() const { return index(); }

		SphCellInd(const aiw::Vec<3> &r, int rank);
		double area() const;
		const aiw::Vec<3>& center() const;
		const aiw::Vec<3>& vert(int i) const; // 0<=i<3
		SphVertInd vertInd(int i) const;    // 0<=i<3
		SphCellInd cellInd(int i) const;        // 0<=i<3
		SphEdgeInd edgeInd(int i) const;	    // 0<=i<3
	};
	//--------------------------------------------------------------------------
	struct SphVertInd: public SphInd{
		SphVertInd up() const;
		SphVertInd down() const;
		inline operator uint64_t() const { return index(); }

		const aiw::Vec<3>& center() const;
		SphCellInd cellInd(int i) const;  // 0<=i<6
		SphEdgeInd edgeInd(int i) const;  // 0<=i<6	
		SphVertInd vertInd(int i) const;  // 0<=i<6	
	};
	//--------------------------------------------------------------------------
	struct SphEdgeInd: public SphInd{
		SphEdgeInd up() const;
		SphEdgeInd down() const;
		inline operator uint64_t() const { return index(); }

		const aiw::Vec<3>& vert(int i) const; // 0<=i<2
		SphVertInd vertInd(int i) const;    // 0<=i<2
		SphCellInd cellInd(int i) const;        // 0<=i<2
	};
	//--------------------------------------------------------------------------
};
#endif //AIW_SPHERE_HPP
