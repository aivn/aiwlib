// -*- C++ -*-
#ifndef AIW_ZIP_AMR_BASE_HPP
#define AIW_ZIP_AMR_BASE_HPP

/**
 * Copyright (C) 2020--21 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 *
 * ZipAdaptiveMesh base methods implementation.
 * !!! DO NOT INCLUDE THIS FILE MANUALLY !!!
 **/

//------------------------------------------------------------------------------
template <typename T, int D> T& ZipAdaptiveMesh<T, D>::get(Ind<D> pos){
	int r = 1<<max_rank; Cell c;
	if(this->check_out_pos(pos) || !forest[pos/r].get(c, pos2zoff(pos%r, max_rank), max_rank)) return out_value;
	return *c;
}
//------------------------------------------------------------------------------
template <typename T, int D> void ZipAdaptiveMesh<T, D>::set_max_rank_box_step(){ // устанавливает max_rank, box и шаги
	max_rank = 0; for(auto &t: forest) max_rank = std::max(t.max_rank, max_rank);
	box = forest.bbox()*(1<<max_rank); this->set_axes(bmin, bmax);
	for(int i=0; i<rank_lim+1; i++) steps[i] = forest.step/(1<<i);
}
//------------------------------------------------------------------------------
template <typename T, int D> void ZipAdaptiveMesh<T, D>::init(Ind<D> tbox, const aiw::Vec<D> &bmin_, const aiw::Vec<D> &bmax_, int R0){
	// заменить R0 на min_rank?
	box = tbox*(1<<R0); this->set_axes(bmin_, bmax_); max_rank = R0;
	forest.init(tbox, bmin_, bmax_);
	for(Ind<D> pos; pos^=tbox; ++pos){
		tree_t &t = forest[pos]; t.msh = this; t.pos = pos; t.bmin = bmin_+(pos&step); // <<< ??? *(1<<R0) ???
		t.max_rank = R0; t.tree.clear(); t.data.resize(1<<(R0*D)); t.root = ptile_t(0, R0, 0);
		t.tiles.clear(); t.tiles.emplace_back(R0, R0);
		WOUT(t.root.tree, t.root.off, t.root.rank);
	}
	set_max_rank_box_step();
}
//------------------------------------------------------------------------------
template <typename T, int D> void ZipAdaptiveMesh<T, D>::init(const Mesh<int, D> &ranks){
	max_rank = 0; for(int r: ranks) max_rank = std::max(max_rank, r);
	box = ranks.bbox()*(1<<max_rank); this->set_axes(ranks.bmin, ranks.bmax);
	forest.init(ranks.bbox(), ranks.bmin, ranks.bmax);
	for(Ind<D> pos; pos^=forest.bbox(); ++pos){
		tree_t &t = forest[pos]; t.msh = this; t.pos = pos; t.bmin = bmin+(pos&forest.step);
		int R = ranks[pos]; t.max_rank = R; t.tree.clear(); t.data.resize(1<<(R*D)); t.root = ptile_t(0, R, 0);
		t.tiles.clear(); t.tiles.emplace_back(R, R);
		WOUT(t.root.tree, t.root.off, t.root.rank);
	}
	set_max_rank_box_step();	
}
//------------------------------------------------------------------------------
template <typename T, int D> size_t ZipAdaptiveMesh<T, D>::memsz() const { // размер памяти в байтах
	size_t res = sizeof(*this) + sizeof(tree_t)*forest.bbox().prod();
	for(auto &t: forest) res += sizeof(T)*t.data.size() + 4*t.tree.size();
	return res;
}
//------------------------------------------------------------------------------
template <typename T, int D> void ZipAdaptiveMesh<T, D>::dump(IOstream&& S) const {
	BinaryFormat bf; bf.init((BaseMesh<D>&)*this);	bf.szT = sizeof(T); bf.D |= 1<<30; bf.box = nullptr;
	// bf.tinfo.root = T()^bf.tinfo;
	bf.dump(S); S.dump(forest.bbox()); for(auto &t: forest) t.dump(S);
	S.flush();
	//	WOUT(box, bmin, bmax, max_rank, forest.bbox(), forest[ind(0)].data.size(), forest[ind(0)].tree.size(), forest[ind(0)].tiles.size(), forest[ind(0)].root.off, forest[ind(0)].root.rank, forest[ind(0)].root.tree);
}
//------------------------------------------------------------------------------
template <typename T, int D> bool ZipAdaptiveMesh<T, D>::load(IOstream&& S, int use_mmap, bool raise_on_error){ // mmap пока игнорируется
	BinaryFormat bf; bf.init((BaseMesh<D>&)*this);	bf.szT = sizeof(T); bf.D |= 1<<30;  bf.box = nullptr;
	if(!bf.load(S)){
		if(raise_on_error){ WRAISE("incorrect ZipAdaptiveMesh::load(): ", D, bf.D, sizeof(T), bf.szT, S.name, S.tell(), bf.head); }
		return false;
	}
	head = bf.head; logscale = bf.logscale;
	Ind<D> box_; S.load(box_);  init(box_, bmin, bmax);
	WOUT(box, bmin, bmax);
	for(auto &t: forest) t.load(S);
	WOUT("for ok");
	set_max_rank_box_step();
	//	WOUT(box, bmin, bmax, max_rank, forest.bbox(), forest[ind(0)].data.size(), forest[ind(0)].tree.size(), forest[ind(0)].tiles.size(), forest[ind(0)].root.off, forest[ind(0)].root.rank, forest[ind(0)].root.tree);
	return true;
}
//------------------------------------------------------------------------------
template <typename T, int D> ZipAdaptiveMesh<T, D>::operator Mesh<T, D>() const {
	Mesh<T, D> res(box, bmin, bmax);
	for(Ind<D> pos: irange(box)) res[pos] = get(pos);
	return res;
}
//------------------------------------------------------------------------------
template <typename T, int D>  template <typename F> void ZipAdaptiveMesh<T, D>::foreach(F &&f, int min_rank, int ti){
	for(tree_t& tr: forest){ // это можно сделать параллельным
		Cell C; if(!tr.get_first(C, min_rank)) continue;
		WOUT(min_rank, max_rank, ti);
		do{  WOUT(C.cR, C.tR, C.coff, C.toff,  C.tile, C.ptr, C.bmin(), max_rank); f(C, ti>>(max_rank-C.rank())); } while(C.next(min_rank));
	}
}
//------------------------------------------------------------------------------
template <typename T, int D>  template <typename F1, typename F2> void ZipAdaptiveMesh<T, D>::foreach2Xdt(F1 &&f1, F2 &&f2){
	// это можно сделать параллельным по лесу
	// проход по дереву можно сделать селективным по рангу? Хотя неясно какой это даст выигрыш (не более чем в два раза)?	
	for(int i=0; i<(1<<max_rank); i++){
		int min_rank = max_rank; while(min_rank>0 && (i&(1<<(max_rank-min_rank))==0)) min_rank--;
		foreach(f1, min_rank, i);
		min_rank = max_rank; while(min_rank>0 && ((i+1)&(1<<(max_rank-min_rank))==0)) min_rank--;
		foreach(f2, min_rank, i+1);
		/*
		for(tree_t& tr: forest){
			Cell C; tr.get_first(C);
			do{
				if(!(i%(1<<(max_rank-C.rank())))) f1(C, i>>(max_rank-C.rank()));
				C.next_all_rank();
			} while(C);
		}
		for(tree_t& tr: forest){
			Cell C; tr.get_first(C);
			do{
				if(!((i+1)%(1<<(max_rank-C.rank())))) f2(C, (i+1)>>(max_rank-C.rank()));
				C.next_all_rank();
			} while(C);
		}
		*/
	}
}
//------------------------------------------------------------------------------
template <typename T, int D>  void ZipAdaptiveMesh<T, D>::out2dat(IOstream&& S){
	foreach([&](Cell &C, int){
			Vec<2> a = C.bmin()(0,1), b = a+C.step()(0,1); 
			S("% % %\n", a, C.rank(), *C);
			S("% % % %\n", a[0], b[1], C.rank(), *C);
			S("% % %\n", b, C.rank(), *C);
			S("% % % %\n", b[0], a[1], C.rank(), *C);
			S("% % %\n\n\n", a, C.rank(), *C);
		});
} 
//------------------------------------------------------------------------------
#endif //AIW_ZIP_AMR_BASE_HPP
