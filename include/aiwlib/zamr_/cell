// -*- C++ -*-
#ifndef AIW_ZIP_AMR_CELL_HPP
#define AIW_ZIP_AMR_CELL_HPP

/**
 * Copyright (C) 2020--21 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 *
 * ZipAdaptiveMesh::Cell methods implementation.
 * !!! DO NOT INCLUDE THIS FILE MANUALLY !!!
 **/

//------------------------------------------------------------------------------
template <typename T, int D>  Vec<D> ZipAdaptiveMesh<T, D>::Cell::step() const { return tree->msh->steps[cR]; }
template <typename T, int D>  Vec<D> ZipAdaptiveMesh<T, D>::Cell::bmin() const { return tree->bmin + (zoff2pos<D>(coff, cR)&step()); }
//------------------------------------------------------------------------------
template <typename T, int D> bool ZipAdaptiveMesh<T, D>::tree_t::get_first(ZipAdaptiveMesh<T, D>::Cell &cell, int min_rank){
	if(max_rank<min_rank) return false;
	cell.tree = this; cell.ptr = data.data(); // остальное делает конструктор Cell
	cell.cR = tiles[0].cR; cell.tR = tiles[0].tR; cell.toff = Dbits<<(D*cell.tR);
	WOUT(tiles.size(), cell.cR, cell.tR);
	if(cell.cR>=min_rank) return true;
	return cell.next_tile(min_rank);
}
// ищет ячейку со смещением off на Z-кривой ранга rank,
// возвращает false при выходе за пределы дерева, при этом ячейка не меняется
// может найти как более крупную так и более мелкую ячейки
template <typename T, int D>  bool ZipAdaptiveMesh<T, D>::tree_t::get(ZipAdaptiveMesh<T, D>::Cell &cell, uint32_t off, int rank){  // доступ к ячейке
	if(off>=tile_sz(rank)) return false;
	cell.tree = this;  cell.cR = cell.tR = root.rank;  ptile_t cursor = root;
	if(rank<max_rank) off <<= D*(max_rank-rank);  else off >>= D*(rank-max_rank); // приводим off к max_rank
	while(cursor.tree){  // спускаемся по дереву 
		cursor = tree[cursor.off + ((off>>(D*(max_rank-cell.cR))) & RDbits(cell.tR))]; // [+фрагмент off длиной D*tR бит]
		cell.tR = cursor.rank; cell.cR += cell.tR;
	} // тут нужна проверка что ячейка такого ранга и правда сущеcтвует?
 	cell.coff = off>>(D*(max_rank-cell.cR));
	cell.toff = cell.coff & RDbits(cell.tR);
	cell.ptr = data.data()+cursor.off+cell.toff;
	cell.toff |= Dbits<<(D*cell.tR);  // запас в старших битах для отрицательных смещений к соседям

	// cell.tile = ... здесь его невозможно эффективно инициализировать ???
	
	return true;
}
//------------------------------------------------------------------------------
// переключает ячейку на первую ячейку следующиго тайла  с рангом не ниже чем min_rank 
template <typename T, int D>  bool ZipAdaptiveMesh<T, D>::Cell::next_tile(int min_rank){
	tile++; ptr++; coff <<= D*(tree->max_rank-cR); // в процессе поиска coff имеет ранг max_rank
	// WOUT(cR, tR, coff, toff, ptr-tree->data.data(), tile, min_rank);
	// for(auto t: tree->tiles) WOUT(t.cR, t.tR);
	for(int sz=tree->tiles.size(); tile<sz; tile++){
		cR = tree->tiles[tile].cR; tR = tree->tiles[tile].tR;
		if(cR>=min_rank){ coff >>= (tree->max_rank-cR)*D; coff++; toff = Dbits<<(D*tR); return true; }
		ptr += 1<<(D*tR); coff += 1<<D*(tR<<(tree->max_rank-cR));
	}
	return false;
}
template <typename T, int D>  bool ZipAdaptiveMesh<T, D>::Cell::next(int min_rank){
	// WOUT(toff, coff, tR, cR, min_rank);
	if(++toff < (uint32_t(1)<<(D*tR+D))){ ptr++; coff++; return true; } // остаемся в рамках тайла
	// WOUT(toff, coff, tR, cR, min_rank);
	return next_tile(min_rank);
}
//------------------------------------------------------------------------------
// если нет соседней ячейки на этом уровне возвращаемая ячейка неактивна
template <typename T, int D>  const typename ZipAdaptiveMesh<T, D>::Cell ZipAdaptiveMesh<T, D>::Cell::operator [](const Ind<D> &dpos) const {  // доступ к соседям
	Cell res = *this;  res.toff = calc_nb_zoffset(dpos, toff); // новое смещение внутри тайла с учетом запаса в старших битах
	int32_t doff = int32_t(res.toff)-int32_t(toff); // разница в смещениях на ранге tR, поскольку R>=tR можно не приводить ее к R
	if(((res.toff>>(D*res.tR))&Dbits)==Dbits){ res.ptr += doff; res.coff += doff; } // остались внутри тайла
	else if(int32_t(coff)+doff<0 || !tree->get(res, coff+doff, cR)){ // вышли за пределы дерева
		Ind<D> tree_pos = tree->pos; res.ptr = nullptr;
		uint32_t off0 = (Dbits<<(D*cR+D))|coff, off1 = calc_nb_zoffset<D>(dpos, off0);		
		for(int i=0; i<D; i++) if(!(off1&(uint32_t(1)<<(cR*D+i)))){ if(off1&(uint32_t(1)<<(cR*D+D+i))) tree_pos[i]++; else tree_pos[i]--; }
		if(ind(0)<=tree_pos && tree_pos<tree->msh->forest.bbox()){
			tree->msh->forest[tree_pos].get(res, off1&RDbits(cR), cR);
			if(res.cR!=cR) res.ptr = nullptr;
		}
	}
	return res;
}
//------------------------------------------------------------------------------
template <typename T, int D>  bool ZipAdaptiveMesh<T, D>::Cell::is_bound(int axe) const {  // принимает номер оси со знаком (грань слева/справа) начиная с единицы
	int a = abs(axe)-1;
	if(axe<0) return tree->pos[a]==0 && !(coff&(zmasks[D]<<a)); 
	if(tree->pos[a]==tree->msh->forest.bbox()[a]-1){ uint32_t mask = (zmasks[D]<<a)&RDbits(cR); return (coff&mask)==mask; }
	return false;
}
//------------------------------------------------------------------------------
// f(Cell &nbC)
// axe==0 --- обход по шаблону крест. axe==+/-a --- ось а, грань слева/справа
// ifdR - допустимая разница рангов (0 - любая, 1 - соседи того же уровня или крупнее, 2 - только крупнее)
template <typename T, int D>  template <typename F>  void ZipAdaptiveMesh<T, D>::Cell::face(F&& f, int axe, int ifdR){ 
	if(axe==0){ for(int i=1; i<=D; i++){ face(f, -i, ifdR); face(f, i, ifdR); } return; } // шаблон крест
	int sign = axe<0? -1: 1; uint32_t a = abs(axe)-1;
	Cell res = *this;  res.toff = calc_nb_zoffset<D>(a, sign, toff);
	int32_t doff = int32_t(res.toff)-int32_t(toff);  // разница в смещениях на ранге tR, поскольку R>=tR можно не приводить ее к R
	if(((res.toff>>(D*res.tR))&Dbits)==Dbits){ if(ifdR<2){ res.ptr += doff; res.coff += doff; f(res); } return; } // остались внутри тайла
	if(int32_t(coff)+doff<0 || !tree->get(res, coff+doff, cR)){ // вышли за пределы дерева
		Ind<D> tree_pos = tree->pos; tree_pos[a] += sign;
		uint32_t off0 = (uint32_t(Dbits)<<(D*cR+D))|coff, off1 = calc_nb_zoffset<D>(a, sign, off0);		
		if(tree_pos[a]<0 || tree->msh->forest.bbox()[a]<=tree_pos[a]){ res.ptr = nullptr; f(res); } // вышли за границу
		tree->msh->forest[tree_pos].get(res, off1&RDbits(cR), cR);
	}
	if((res.cR<cR && !ifdR) || (res.cR==cR && ifdR<2)) f(res); // сосед того же ранга или крупнее
	else if(res.cR>cR && !ifdR){  // много мелких соседей
		uint32_t max_coff = (res.coff>>(D*(cR-res.cR)))+1, mask = zmasks[D]<<a, imask = ~mask; 
		if(sign<0) res.coff |= mask&RDbits(res.tree->max_rank-res.cR);
		else res.coff &= ~(mask&RDbits(res.tree->max_rank-res.cR));
		res.tree->get(res, res.coff, res.tree->max_rank);
		while((res.coff>>(D*(cR-res.cR)))<max_coff){ // обходим грань
			f(res);
			uint32_t fix = res.coff&mask; res.coff |= mask; res.coff++; res.coff &= imask; res.coff |= fix; 
			if(sign<0) res.coff |= mask&RDbits(res.tree->max_rank-res.cR);
			else res.coff &= ~(mask&RDbits(res.tree->max_rank-res.cR));
			if(!res.tree->get(res, res.coff, res.cR)) return;
		}
	}
}
//------------------------------------------------------------------------------
#endif //AIW_ZIP_AMR_CELL_HPP
