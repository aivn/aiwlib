// -*- C++ -*-
#ifndef AIW_BINARY_IO_HPP
#define AIW_BINARY_IO_HPP

/**
 * Copyright (C) 2017, 2020, 2021 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <type_traits>
#include <string>
#include <complex>
#include <vector>
#include <list>
#include <map>
// #include "debug"

template <typename T> struct aiw_dump_load { static const int mode = std::is_trivially_copyable<T>::value; }; // 0 --- возможно есть внешние dump/load, 1 --- тривиальные, 2 --- встроенные

/*
template <typename T> struct aiw_dump_load { static const int mode = 0; }; // 0 --- возможно есть внешние dump/load, 1 --- тривиальные, 2 --- встроенные
#define AIW_POD(T) template <> struct aiw_dump_load<T> { static const int mode = 1; }

AIW_POD(double); AIW_POD(int8_t);  AIW_POD(int16_t);  AIW_POD(int32_t);  AIW_POD(int64_t);
AIW_POD(float); AIW_POD(uint8_t); AIW_POD(uint16_t); AIW_POD(uint32_t); AIW_POD(uint64_t);
AIW_POD(bool);
*/
template <typename T> struct aiw_dump_load<std::complex<T> > { static const int mode = 1; };

// template <typename T> struct BinInWrapper: public T {};

namespace aiw{
	template <typename T> size_t uwrite(std::ostream &S, const T *p, size_t sz){ size_t pos = S.tellp(); return S.write((const char*)p, sz).tellp()-pos; }
	template <typename T> size_t uread(std::istream &S, T *p, size_t sz){ size_t pos = S.tellg(); return S.read((char *)p, sz).tellg()-pos; }	
	// global case
	template <typename S, typename T> typename std::enable_if<aiw_dump_load<T>::mode==0, bool>::type dump(S &s, const T& x){
		static_assert(sizeof(T)==0, "\n\n\033[31;1;5m*** Please, create function bool dump(S&, const T&) for binary dump of type T! ***\033[0m\n"); return false; }
	template <typename S, typename T> typename std::enable_if<aiw_dump_load<T>::mode==0, bool>::type load(S &s, T& x){
		static_assert(sizeof(T)==0, "\n\n\033[31;1;5m*** Please, create function bool load(S&, T&) for binary load of type T! ***\033[0m\n"); return false; }
	template <typename S, typename T> typename std::enable_if<aiw_dump_load<T>::mode==1, bool>::type
	dump(S &s, const T& x){ return uwrite<T>(s, &x, sizeof(T))==sizeof(T); }
	template <typename S, typename T> typename std::enable_if<aiw_dump_load<T>::mode==1, bool>::type
	load(S &s,       T& x){ return  uread<T>(s, &x, sizeof(T))==sizeof(T); }
	template <typename S, typename T> typename std::enable_if<aiw_dump_load<T>::mode==2, bool>::type
	dump(S &s, const T& x){ return x.dump(s); }
	template <typename S, typename T> typename std::enable_if<aiw_dump_load<T>::mode==2, bool>::type
	load(S &s, T& x){ return x.load(s); }

	template <typename S, typename T> bool stream_dump_wrapper(S& s, const T& x){ return dump(s, x); }
	template <typename S, typename T> bool stream_load_wrapper(S& s, T& x){ return load(s, x); }

	// fix size arrays
	template <typename S, typename T, int D> bool dump(S &s, T const (&p)[D]){
		if(aiw_dump_load<T>::mode==1) return uwrite<T>(s, p, D*sizeof(T))==D*sizeof(T);
		for(int i=0; i<D; i++) if(!dump(s, p[i])) return false;
		return true;
	}
	template <typename S, typename T, int D> bool load(S &s, T (&p)[D]){
		if(aiw_dump_load<T>::mode==1) return s.read(p, D*sizeof(T))==D*sizeof(T);
		for(int i=0; i<D; i++) if(!load(s, p[i])) return false;
		return true;
	}
	
	// std::string
	template <typename S> bool dump(S &s, const std::string& x){ return dump(s, uint32_t(x.size())) && uwrite<char>(s, &(x[0]), x.size())==x.size(); }
	template <typename S> bool load(S &s, std::string& x){
		uint32_t sz=0; if(!load(s, sz) || !s.check_tail(sz)) return false;  
		x.resize(sz); if(s.read(&(x[0]), sz)!=sz){ std::string().swap(x); return false; }
		return true;
	}

	// std::vector
	template <typename S, typename T> bool dump(S &s, const std::vector<T> &v){
		if(!dump(s, uint64_t(v.size()))){ return false; } if(!v.size()) return true;
		if(aiw_dump_load<T>::mode==1) return uwrite<T>(s, v.data(), sizeof(T)*v.size())==sizeof(T)*v.size();
		for(const T& x: v) if(!dump(s, x)) return false;
		return true;
	}
	template <typename S, typename T> bool load(S &s, std::vector<T> &v){
		uint64_t sz; if(!load(s, sz) || !s.check_tail(sz*sizeof(T))){ return false; } if(!sz) return true;
		v.resize(sz); bool isOK = false;
		if(aiw_dump_load<T>::mode==1) isOK = s.read(v.data(), sizeof(T)*sz)==sizeof(T)*sz;
		else for(T& x: v) if(!load(s, x)){  isOK = false; break; }
		if(!isOK) std::vector<T>().swap(v); 
		return isOK;
	}
	template <typename S> bool dump(S &s, const std::vector<bool>& X){
		if(!dump(s, uint64_t(X.size()))){ return false; } if(!X.size()) return true;
		uint64_t cursor=0, buf=0;
		for(auto i=X.begin(); i!=X.end(); ++i){
			buf |= uint64_t(*i)<<cursor++; 
			if(cursor==64){ if(!dump(s, buf)){ return false; } cursor = 0; buf = 0; }
		}
		if(cursor && !dump(s, buf)) return false;
		return true;
	}		
	template <typename S> bool load(S &s, std::vector<bool>& X){
		uint64_t sz=0; if(!load(s, sz)){ return false; }  if(!sz) return true;
		X.resize(sz); uint64_t cursor=64, buf=0;
		for(auto i=X.begin(); i!=X.end(); ++i){
			if(cursor==64){ if(!load(s, buf)){ std::vector<bool>().swap(X); return false; } cursor = 0; }
			*i = buf&(uint64_t(1)<<cursor++);
		}
		return true; 
	}

	// std::list
	template <typename S, typename T> bool dump(S &s, const std::list<T>& X){
		if(!dump(s, uint64_t(X.size()))) return false;
		for(const T &x: X) if(!dump(s, x)) return false;
		return true;
	}		
	template <typename S, typename T> bool load(S &s, std::list<T>& X){
		uint64_t sz = 0; if(!load(s, sz) || !s.check_tail(sz*sizeof(T))) return false;
		X.resize(sz); for(T &x: X) if(!load(s, x)){ std::list<T>().swap(X); return false; }
		return true;
	}		

	// std::map
	template <typename S, typename K, typename V> bool dump(S &s, const std::map<K, V>& X){
		if(!dump(s, uint64_t(X.size()))) return false;
		for(auto I=X.begin(); I!=X.end(); ++I) if(!dump(s, I->first) || !dump(s, I->second)) return false;
		return true;
	}		
	template <typename S, typename K, typename V> bool load(S &s, std::map<K, V>& X){
		uint64_t sz = 0; if(!load(s, sz)) return false;
		K k; V v; for(size_t i=0; i<sz; i++) if(load(s, k) && load(s, v)) X[k] = v; else return false;
		return true;
	}

	/*
	// check load
	template <typename T> struct BinaryLoadChecker{ T x; BinaryLoadChecker& self(){ return *this; } };
	template <typename T> BinaryLoadChecker<T> bin_load_chk(T x){ return BinaryLoadChecker<T>({x}); }
	template <typename S, typename T> bool load(S &s, BinaryLoadChecker<T> &checker){
		T x; if(!load(s, x)) WRAISE("incorrect binary load", s.tellg(), x);
		if(x!=checker.x) WRAISE("incorrect binary load value", x, checker.x, "expected");
		return true;
	}
	*/
} // end of namespace aiw
#endif //AIW_BINARY_IO_HPP
