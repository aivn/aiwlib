// -*- C++ -*-
#ifndef AIW_PIRAMIDE_HPP
#define AIW_PIRAMIDE_HPP

/**
 * Copyright (C) 2020-21 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <vector>

namespace aiw{
	//--------------------------------------------------------------------------
	template <typename T, int D> class Piramide{
		std::vector<T> data;
		std::vector<size_t> offs;
	public:
		void init(int R, T v=T()){
			offs.resize(R+1); size_t sz = 0;
			for(int i=0; i<=R; i++){ offs[i] = sz; sz += size_t(1)<<(i*D); }
			data.resize(sz, v);
		}
		// void fill(const T& x){ for(T &p: data) p = x; }
		int rank(){ return offs.size(); }
		/*
		T& at(size_t off, int rank){ return data[offs[rank]+off]; }
		template <typename F> void reduce(F&& f){
			for(int R=offs.size()-1; R>0; R--) for(size_t i=0; i<(size_t(1)<<(R*D)); i++) f(at(i, R), at(i>>D, R-1));
		}
		*/
		T get(size_t off, int rank) const { return data[offs[rank]+off]; }
		void set(size_t off, int rank, T v){ data[offs[rank]+off] = v; }
		template <typename F> void reduce(F&& f){
			for(int R=offs.size()-1; R>0; R--) for(size_t i=0; i<(size_t(1)<<(R*D)); i++) set(i>>D, R-1, f(get(i, R), get(i>>D, R-1)));
		}		
	};
	//--------------------------------------------------------------------------
	template <int D> class BitPiramide{
		std::vector<uint64_t> data;
		std::vector<size_t> offs;  // в чанках по 64 бита
	public:
		void init(int R){
			offs.resize(R+1); size_t sz = 0;
			for(int i=0; i<=R; i++){ offs[i] = sz; sz += (size_t(1)<<(i*D))/64+1; }
			data.resize(sz, 0);
		}
		int rank(){ return offs.size(); }

		T get(size_t off, int rank) const { WASSERT(0<=R && R<rank(), R, rank()); return data[offs[rank]+off/64]&(uint64_t(1)<<off%64); }
		void set(size_t off, int rank, bool v){
			WASSERT(0<=R && R<rank(), R, rank());
			if(v) data[offs[rank]+off/64] |= (uint64_t(1)<<off%64); else data[offs[rank]+off/64] &= ~(uint64_t(1)<<off%64);
		}
		bool all(size_t a, size_t b, int rank) const {
			WASSERT(0<=R && R<rank(), R, rank());
			size_t a0 = a/64, b0 = b/64, off = offs[rank]; uint64_t mask;
			mask = ~uint64_t(0)<<(a%64); if((data[off+a0]&mask)!=mask) return false;
			mask = ~uint64_t(0); for(int i=a0+1; i<b0; i++) if(data[off+i]!=mask) return false;
			mask = ~uint64_t(0)>>(b%64); if((data[off+b0]&mask)!=mask) return false;
			return true;
		}
		bool any(size_t a, size_t b, int rank) const {
			WASSERT(0<=R && R<rank(), R, rank());
			size_t a0 = a/64, b0 = b/64, off = offs[rank]; uint64_t mask;
			mask = ~uint64_t(0)<<(a%64); if(data[off+a0]&mask) return true;
			mask = ~uint64_t(0); for(int i=a0+1; i<b0; i++) if(data[off+i]&mask) return true;
			mask = ~uint64_t(0)>>(b%64); if(data[off+b0]&mask) return true;
			return false;
		}
		void pushup(){} // сливает тайлы, идет снизу вверх?
	};
	//--------------------------------------------------------------------------
};
#endif //AIW_PIRAMIDE_HPP
