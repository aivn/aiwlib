// -*- C++ -*-
#ifndef AIW_OP_TRAITS_HPP
#define AIW_OP_TRAITS_HPP

/**
 * Copyright (C) 2021 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <type_traits>
#include <utility>
#include <iostream>
#include "iostream"


namespace aiw{
	//--------------------------------------------------------------------------
	template <typename T> constexpr auto has_T_mul_double(T* ) -> decltype(std::declval<T>() * 1.0, true) {
		return std::is_convertible<decltype(std::declval<T>() * 1.0), T>::value;
	}
	template <typename T> constexpr bool has_T_mul_double(...) { return false; }
	//--------------------------------------------------------------------------
	template <typename T> constexpr auto has_std_ostream_lshift_T(T* ) -> decltype(std::cout<<std::declval<T>(), true) { return true; }
	template <typename T> constexpr bool has_std_ostream_lshift_T(...) { return false; }
	template <typename T> constexpr auto has_aiw_IOstream_lshift_T(T* ) -> decltype(*(IOstream*)(nullptr)<<std::declval<T>(), true) { return true; }
	template <typename T> constexpr bool has_aiw_IOstream_lshift_T(...) { return false; }
	//--------------------------------------------------------------------------
	template <typename T> constexpr auto has_T_less_T(T* ) -> decltype(std::declval<T>() < std::declval<T>(), true) { return true; }
	template <typename T> constexpr bool has_T_less_T(...) { return false; }
	template <typename T> constexpr auto has_T_more_T(T* ) -> decltype(std::declval<T>() < std::declval<T>(), true) { return true; }
	template <typename T> constexpr bool has_T_more_T(...) { return false; }
	//--------------------------------------------------------------------------
}   // end of namespace aiw
#endif //AIW__HPP
