// -*- C++ -*-
#ifndef AIW_TENSOR3S_HPP
#define AIW_TENSOR3S_HPP
/**
 * Copyright (C) 2015-2016 Antov V. Ivanov  <aiv.racs@gmail.com> and Sergey Khilkov <ezz666@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include "vec"

namespace aiw{
	//--------------------------------------------------------------------------
	// абсолютно симметричный тензор ранга R над трехмерным пространством
	template <int R, typename T=double> struct Tensor3S{
		static const int size = (R+1)*(R+2)/2; // количество коэфицентов в полиформе от 3 переменных
		static const int rank = R;             // ранг тензора
		T p[size];                             // массив коэффициентов

		inline Vec<3,T> vec() const { // ???
			static_assert(R==1, "can't convert Tensor3S<R!=1> to Vec"); 
			return Vec<3,T>(p[0], p[1], p[2]); 
		}

		constexpr int fact(int n){ return n?n*fact(n-1):1; }
		constexpr int coef(int i, int j){ return fact(R)/fact(i)/fact(j)/fact(R-i-j); }

		inline void clean(){ for(int i=0; i<size; i++) p[i] = 0.; }
		Tensor3S(){ clean(); }
		//----------------------------------------------------------------------
		inline Tensor3S operator + (const Tensor3S &t) const {	
			Tensor3S res; for(int i=0; i<size; i++) res.p[i] = p[i]+t.p[i]; return res;
		}
		inline Tensor3S operator - (const Tensor3S &t) const {	
			Tensor3S res; for(int i=0; i<size; i++) res.p[i] = p[i]-t.p[i]; return res;
		}
		inline void operator += (const Tensor3S &t){ for(int i=0; i<size; i++) p[i] += t.p[i]; }
		inline void operator -= (const Tensor3S &t){ for(int i=0; i<size; i++) p[i] -= t.p[i]; }
		inline void operator *= (T x){ for(int i=0; i<size; i++) p[i] *= x; }
		inline void operator /= (T x){ (*this) *= 1./x; }		
		//----------------------------------------------------------------------
		inline Tensor3S(const Vec<3, T> &m){ // создает тензор на основе вектора m в тензорной степени R
			T m0[R+1] = {1., m[0]}, m1[R+1] = {1., m[1]}, m2[R+1] = {1., m[2]}; 
			for(int i=1; i<R; ++i){ m0[i+1] = m0[i]*m[0]; m1[i+1] = m1[i]*m[1]; m2[i+1] = m2[i]*m[2]; }
			int q = 0; for(int i=0; i<=R; ++i)	for(int j=0; j<=R-i; ++j) p[q++] = m0[i]*m1[j]*m2[R-i-j]; 
		}
		inline void add(const Vec<3, T> &m, double scale=1.){ // добавляет соотв. компоненты вектора
			T m0[R+1] = {1., m[0]}, m1[R+1] = {1., m[1]}, m2[R+1] = {1., m[2]}; 
			for(int i=1; i<R; ++i){ m0[i+1] = m0[i]*m[0]; m1[i+1] = m1[i]*m[1]; m2[i+1] = m2[i]*m[2]; }
			int q = 0; for(int i=0; i<=R; ++i)	for(int j=0; j<=R-i; ++j) p[q++] += scale*m0[i]*m1[j]*m2[R-i-j]; 
		}
		inline T operator * (const Tensor3S &t) const { // свертка
			T res = 0.; int q = 0;
			for(int i=0; i<=R; ++i) for(int j=0; j<=R-i; j++){ res += p[q]*t.p[q]*coef(i,j); ++q; }
			return res;
		} 
		inline T sq() const { return (*this)*(*this); } // скалярный квадрат тензора
		//----------------------------------------------------------------------
		// доступ к элементу тензора по степеням (l=R-i-j), согласован с предыдущим порядком обхода
		T& get(int i, int j){ 
			WASSERT(i+j<=R, "incorrect index", i, j, R); 
			return p[j+i*(R+1)-i*(i-1)/2]; 
		}
		const T& get(int i, int j) const { 
			WASSERT(i+j<=R, "incorrect index", i, j, R); 
			return p[j+i*(R+1)-i*(i-1)/2]; 
		}
		// свертка двух тензоров с рангами различающимися на единицу дает вектор
		inline Vec<3,T> operator * (const Tensor3S<R-1,T> &t) const { 
			Vec<3,T> m;
			for(int i=0; i<=R-1; ++i) 
				for(int j=0; j<=R-1-i; ++j){
					T C = t.get(i,j)*t.coef(i,j);
					m[0] += get(i+1,j)*C;
					m[1] += get(i,j+1)*C;
					m[2] += get(i,j)*C;
				} 					
			return m;
		} 
		inline Vec<3,T> operator * (const Tensor3S<R+1,T> &t) const { return t*(*this); }
	};
	//--------------------------------------------------------------------------
	template <int R, typename T> inline Tensor3S<R, T> operator * (const Tensor3S<R, T> &t, T x){
		Tensor3S<R, T> res; for(int i=0; i<t.size; i++) res.p[i] = t.p[i]*x; return res;
	}
	template <int R, typename T> inline Tensor3S<R, T> operator * (T x, const Tensor3S<R, T> &t){ return t*x; }
	//--------------------------------------------------------------------------
	// свертка тензора с вектором
	template <int R, typename T> inline Tensor3S<R-1,T> operator * (const Tensor3S<R,T> &t, const Vec<3,T> &m){
		Tensor3S<R-1,T> res;
		for(int i=0; i<=R-1; ++i) 
			for(int j=0; j<=R-1-i; ++j) 
				res.get(i,j) = t.get(i+1,j)*m[0] + t.get(i,j+1)*m[1] + t.get(i,j)*m[2];
		return res;
	}
	template <int R, typename T> inline Tensor3S<R-1,T> operator * (const Vec<3,T> &m, const Tensor3S<R,T> &t){ return t*m; }
	//--------------------------------------------------------------------------
	// свертка общего вида двух тензоров, предыдущие свертки (частные случаи) введены как оптимизации этой
#define ABS(x) ((x)<0?-(x):(x))
	template <int R1, int R2, typename T> 
	inline typename std::enable_if<(ABS(R1-R2)>1), Tensor3S<ABS(R1-R2),T> >::type
	operator * (const Tensor3S<R1,T> &t1, const Tensor3S<R2,T> &t2){
		Tensor3S<ABS(R1-R2),T> res;
		for(int i=0; i<=(R1<R2?R1:R2); ++i) 
			for(int j=0; j<=(R1<R2?R1:R2)-i; ++j){
				T C = R1<R2? t1.get(i,j)*t1.coef(i,j) : t2.get(i,j)*t2.coef(i,j);
				for(int k=0; k<=res.rank; ++k)
					for(int l=0; l<=res.rank-k; ++l)
						res.get(k, l) += C*(R1<R2?t2.get(i+k, j+l):t1.get(i+k, j+l));
			}
		return res;
	}
#undef ABS
	//--------------------------------------------------------------------------
	template <int R, typename T> std::ostream& operator <<(std::ostream &str, const Tensor3S<R,T> &t){
		str<<"{0,0,"<<R<<":"<<t.get(0,0);
		for(int i=1; i<=R; ++i) for(int j=0; j<=R-i; ++j) str<<" "<<i<<","<<j<<","<<R-i-j<<":"<<t.get(i,j);
		return str<<"}";
	}
	//--------------------------------------------------------------------------
}
#endif //AIW_TENSOR3S_HPP
