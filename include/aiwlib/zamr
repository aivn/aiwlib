// -*- C++ -*-
#ifndef AIW_ZIP_AMR_HPP
#define AIW_ZIP_AMR_HPP

/**
 * Copyright (C) 2020--21 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <vector>
#include <algorithm>
// #include <array>
#include "mesh"
#include "zcube"
#include "piramide"

// TODO
// 1. отщепить адресацию при обходе от данных, что бы можно было хранить данные в std::vector<std::vector<T> >

namespace aiw{
	//--------------------------------------------------------------------------
	template <typename T, int D>  class ZipAdaptiveMesh: public aiw::BaseMesh<D>{
		UsingBaseMeshAttributes;

		static constexpr int rank_lim = 26/D;                             // максимально возможный ранг разбиения
		static constexpr uint32_t Dbits = (1<<D)-1;                       // D бит подряд
		static uint32_t RDbits(int R){ 	return (uint32_t(1)<<(R*D))-1; }  // RD бит подряд
		static uint32_t tile_sz(int R){  return 1<<(R*D); }               // число ячеек в тайле ранга R
		//----------------------------------------------------------------------
		// указатель на следующий фрагмент (тайл) дерева
		//----------------------------------------------------------------------		
		struct ptile_t{
			uint32_t off : 26;
			uint32_t rank : 5;
			uint32_t tree : 1;  // если флаг поднят то это тайл узлов, иначе тайл данных

			// void set(bool sign_, uint32_t rank_, uint32_t off_){ tree = sign_; rank = rank_; off = off_; }
			ptile_t(): off(0), rank(0), tree(0) {}
			ptile_t(bool tree_, uint32_t rank_, uint32_t off_): off(off_), rank(rank_), tree(tree_) {} 

			// bool operator < (ptile_t b) const { return get_off()<b.get_off(); }
		};
		//----------------------------------------------------------------------
	public:
		class Cell; 
	private:
		//----------------------------------------------------------------------
		// элементы индекса тайлов данных, используются в tree_t и при перестроении дерева
		//----------------------------------------------------------------------
		struct index_t{
			uint16_t cR : 11;  // ранг разбиения
			uint16_t tR : 5;   // ранг задающий размер тайла			
			
			index_t(): cR(0), tR(0){}
			index_t(int cR_, int tR_): cR(cR_), tR(tR_){}
			bool operator != (index_t b) const { return *(uint16_t*)this!=*(uint16_t*)&b; }
		};
		//----------------------------------------------------------------------
		// дерево из которых собирается лес
		//----------------------------------------------------------------------
		struct tree_t{
			ptile_t root;
			std::vector<ptile_t> tree;  
			std::vector<T> data;

			void set_ptr(ptile_t &ptr, int rank, const       T* tgt) const { ptr.set(0, rank, tgt-data.data()); }
			void set_ptr(ptile_t &ptr, int rank, const ptile_t* tgt) const { ptr.set(1, rank, tgt-tree.data()); }

			bool get_first(Cell &cell, int min_rank); // настраивает cell на первуя ячейку с рангом не ниже чем min_rank
			
			// ищет ячейку со смещением off на Z-кривой ранга rank, состояние cell может быть произвольным
			// возвращает false при выходе за пределы дерева, при этом ячейка не меняется
			// может найти как более крупную так и более мелкую ячейки
			bool get(Cell &cell, uint32_t off, int rank);
			
			int max_rank;  // максимальный ранг в дереве
			Vec<D> bmin;   // координаты левого угла
			Ind<D> pos;    // позиция дерева в лесу
			ZipAdaptiveMesh *msh;

			// для каждого ранга вектор пар coff, позиция в векторе данных
			// std::vector<std::vector<std::pair<uint32_t, ptile_t> > > index; // индекс тайлов с данными по рангам
			std::vector<index_t> tiles;   // по два байта на каждый тайл в data - ранг Z-кривой, ранг тайла, заменяет индекс для обхода с фиксированным рангом.
			
			bool dump(IOstream &S) const { //return S.dump(bmin, pos, max_rank, root, tree, data, tiles); }
				WOUT(bmin, pos, max_rank, root.off, root.rank, root.tree, tree.size(), data.size(), tiles.size());
				bool res = S.dump(bmin, pos, max_rank, root, tree, data, tiles);
				WOUT(res, bmin, pos, max_rank, root.off, root.rank, root.tree, tree.size(), data.size(), tiles.size());
				return res;
			}
			bool load(IOstream &S)       { //return S.load(bmin, pos, max_rank, root, tree, data, tiles); }
				WOUT(bmin, pos, max_rank, root.off, root.rank, root.tree, tree.size(), data.size(), tiles.size());
				bool res = S.load(bmin, pos, max_rank, root, tree, data, tiles);
				WOUT(res, bmin, pos, max_rank, root.off, root.rank, root.tree, tree.size(), data.size(), tiles.size());
				return res;
			}
#ifdef AIW_ZAMR_TEST
			void test_out2dat(IOstream &Stree, IOstream &Sdata, IOstream &Svalues, ptile_t, Vec<D> start, int rank0, float sz, int& counter) const;
#endif //AIW_ZAMR_TEST
		}; //  end of struct tree_t
		//----------------------------------------------------------------------
		Mesh<tree_t, D> forest;
		Vec<D> steps[rank_lim+1];      // шаги на разных рангах
		int max_rank;                  // максимальный ранг по всей сетке
		void set_max_rank_box_step();  // устанавливает rank_max, box и шаги
	public:		
		class Cell {
		protected:
			T* ptr = nullptr;   // указатель на данные ячейки
			uint32_t cR, tR;    // ранг ячейки и ранг задающий размер тайла как 1<<tR по каждой из сторон
			uint32_t coff = 0;  // смещение внутри дерева на данном ранге R (если рассматривать данный ранг как непрерывную Z-кривую в дереве)
			uint32_t toff = 0;  // смещение внутри тайла ПЛЮС Dbits<<(tR*D) (обеспечивает запас бит в старших позициях для отриц. смещений)
			// typename std::vector<std::pair<uint32_t, ptile_t> >::iterator index; // позиция в индексе дерева
			uint32_t tile = 0;  // номер тайла в tree->tiles, при случайном доступе его невозможно эффективно инициализировать?
			tree_t *tree = nullptr;
			
			friend class ZipAdaptiveMesh;
			bool next_tile(int min_rank);  // переключает ячейку на первую ячейку следующиго тайла  с рангом не ниже чем min_rank 
			bool next(int min_rank);       // переключает ячейку на следующую позицию с рангом не ниже чем min_rank 
			/*
			void jump(tree_t* tree, int dR){
				uint32_t d = 1<<(dR*D);	poff += d; toff += d;
				if(toff < (1<<(D*(tR+1)))) ptr += d; else if(!tree->get(*this, poff, R)) ptr = nullptr;
			}
			*/
		public:
			operator bool () const { return ptr; }  
			bool operator !() const { return !ptr; }

			int rank() const { return cR; }  // уровень вложенности
			Vec<D> step() const;
			Vec<D> bmin() const;
			
			T& operator * () { return *ptr; } // доступ к данным ячейки
			const T& operator * () const { return *ptr; }
			T* operator -> () { return ptr; }
			const T* operator -> () const { return ptr; }

			// если нет соседней ячейки на этом уровне возвращаемая ячейка неактивна
			const Cell operator [](const Ind<D> &dpos) const; // доступ к соседям
			template <typename ... Args>  const Cell operator() (Args ... dpos) { return (*this)[Ind<D>(dpos...)]; } // доступ к соседям

			bool is_bound(int axe) const;  // принимает номер оси со знаком (грань слева/справа) начиная с единицы (как в face)
			// T* chunk(){ if(tR && !(toff&Dbits)) return ptr; else return nullptr; }
			
			// f --- функция вида f(Cell &nbC)
			// axe==0 --- обход по шаблону крест. axe==+/-a --- ось а, грань слева/справа
			// ifdR --- допустимая разница рангов (0 - любая, 1 - соседи того же уровня или крупнее, 2 - только крупнее)
			template <typename F>  void face(F&& f, int axe, int ifdR=0);	   // проверки является ли ячейка граничной?
			// inline typename       meta_t<M>::meta_data_type& meta(int i)       {...}
			// inline typename const meta_t<M>::meta_data_type& meta(int i) const {...}
		}; // end of class Cell
		//----------------------------------------------------------------------
		//  инициализация сетки
		void init(Ind<D> tbox, const aiw::Vec<D> &bmin_, const aiw::Vec<D> &bmax_, int R0=0);
		void init(Ind<D> tbox, int R0=0){ init(tbox, vec(0.), tbox*(1<<R0), R0); }
		void init(const Mesh<int, D> &ranks); 
#ifdef AIW_ZAMR_TEST
		void test_init();
		void test_out2dat(const char *path) const;
#endif //AIW_ZAMR_TEST
		
		// ZipAdaptiveMesh copy() const;
		//  сбор информации о сетке
		// inline Ind<D> bbox() const { return tiles.bbox()*(1<<R); } <<== box from base_mesh 
		int get_max_rank() const { return max_rank; }
		size_t size() const {  size_t res = 0; for(const auto &t: forest) res += t.data.size(); return res; }   // число ячеек
		size_t memsz() const;  // размер памяти в байтах

		// void out_info() const;
		void out2dat(IOstream&&); 
		// void tiles2dat(IOstream&& hS, IOstream&& lS) const { for(Ind<D> pos; pos^=forest.bbox(); ++pos) tiles[pos].forest2dat(hS, lS); }
		// void selfcheck() const { for(Ind<D> pos; pos^=tiles.bbox(); ++pos) tiles[pos].selfcheck(); }
		
		// прямой доступ к ячейкам нулевого ранга?		
		// порождение итераторв для обходов на соотв рангах?

		// минимальный/максимальный ранги, размер памяти, число тайлов (в т.ч. по рангам), заполненность тайлов и пр.
		// T& operator(const Vec<D> &r){} // доступ к произвольной ячейке по координате ???
		// template <typename SEE_UP_F, typename SEE_DOWN_F> void commit(SEE_UP_F see_up_f, SEE_DOWN_F see_down_f, const std::vector<Ind<D> > &stencil){}

		// f_check(const Cell&) ==> 1 (разбить), 0 (не менять), -1 (слияние),
		// f_split(const Cell&src, T *dst_chunk_data), f_join(const Cell &src_chunk_start, T& dst)  
		template <typename F_CHECK, typename F_SPLIT, typename F_JOIN>
		void rebuild(F_CHECK &&f_check, F_SPLIT &&f_split, F_JOIN &&f_join, bool parallel=false, int axe=-1);
		template <typename F_CHECK> void rebuild(F_CHECK &&f_check, bool parallel=false, int axe=-1){
			rebuild(f_check, [](const Cell &src, T *dst){ for(int i=0; i<(1<<D); i++) dst[i] = *src; }, [](const Cell &src, T &dst){ dst = *src; }, parallel, axe);
		}
		
	protected:
		T& get(Ind<D> pos); 
		const T& get(Ind<D> pos) const { return ((ZipAdaptiveMesh*)this)->get(pos); } 
	public:
		T out_value;
		// const T& operator [](const Ind<D> &pos) const { return get(pos); }
		T& operator [](const Ind<D> &pos)       { return (T&)get(pos); }
		// const T& operator ()(const Vec<D> &coord) const { return get(this->coord2pos(coord)); }
		T& operator ()(const Vec<D> &coord)       { return (T&)get(this->coord2pos(coord)); }		
		//----------------------------------------------------------------------
		//   сброс и чтение с диска
		//----------------------------------------------------------------------
		void dump(IOstream&& S) const;
		void dump(IOstream& S) const { dump(std::move(S)); }
		bool load(IOstream&& S, int use_mmap=0, bool raise_on_error=true); // mmap пока игнорируется
		bool load(IOstream& S, int use_mmap=0, bool raise_on_error=true){ return load(std::move(S), use_mmap, raise_on_error); }

		operator Mesh<T, D>() const;
		//----------------------------------------------------------------------
		//   всякие обходы
		//----------------------------------------------------------------------
		// f[1|2] принимают Cell& и int ti
		template <typename F> void foreach(F &&f, int min_rank=0, int ti=0);    
		template <typename F1, typename F2> void foreach2Xdt(F1 &&f1, F2 &&f2);

		/*
		// pos --- левый нижний угол conefold на сетке тайлов нулевого уровня, conefold занимает 2^D тайлов
		double conefold_complexity(Ind<D> pos) const;  // в ячейках X шаг
		//template <typename dT, typename F1, typename F2> void conefold(Ind<D> pos, F1 &&f1, F2 &&f2, dT dt); 
		//template <typename dT, typename F1, typename F2> void conefold(F1 &&f1, F2 &&f2, dT dt); 
	private:
		template <typename dT, typename F1, typename F2> void conefold(Cell &C1, Cell &C2, F1 &&f1, F2 &&f2, dT dt); // рекурсивный вызов 
		template <typename dT, typename F1, typename F2> void conefold1(tile_t** ground, F1 &&f1, F2 &&f2, dT dt); // рекурсивный вызов 
		template <typename dT, typename F1, typename F2> void conefold2(tile_t** ground, F1 &&f1, F2 &&f2, dT dt); // замыкание рекурсии
	public:
		template <typename dT, typename F1, typename F2> void conefold(Ind<D> pos, F1 &&f1, F2 &&f2, dT dt); 
		template <typename dT, typename F1, typename F2> void conefold(F1 &&f1, F2 &&f2, dT dt); 
		*/
	private:
		//-----------------------------------------------------------------------
		//   структура отвечающая за перестроение дерева, нужна в т.ч. для того что бы уменьшить число аргументов рекурсивных ф-й
		//-----------------------------------------------------------------------
		struct rebuild_t{ 
			template <typename F_CHECK, typename F_SPLIT, typename F_JOIN> void init(tree_t &tree, F_CHECK &&f_check, F_SPLIT &&f_split, F_JOIN &&f_join);
			void commit();  // накатывает изменения на разбиваемое дерево

		private:
			std::vector<T> data;  tree_t* tr;  // новая версия данных и перестраиваемое дерево
			std::vector<Cell> js_cells;  std::vector<bool> js_types;  int delta_sz; uint32_t max_rank; // список объединяемых/разбиваемых ячеек и действия над ними
			void add_join(const Cell& cell){ js_cells.push_back(cell); js_types.push_back(false); delta_sz -=  Dbits; max_rank = std::max(max_rank, cell.cR-1); }
			void add_split(const Cell& cell){ js_cells.push_back(cell); js_types.push_back(true); delta_sz +=  Dbits; max_rank = std::max(max_rank, cell.cR+1); }

			struct unode_t{ uint32_t tile: 24; uint32_t tRmax: 8; }; // точки роста --- номер тайла и максимально возможный tR тайла
			std::vector<index_t> tiles;   // таблица разбитых тайлов
			std::vector<unode_t> unodes;  // номера тайлов потенциально являющихся точками роста (которые могут являться первым октетом более крупного тайла)
			Cell js_cell; int js_drank;   // измененная ячейка и изменение ранга за счет действия над ячейкой 
			void split_tile(int rank, uint32_t next_off);    // рекурсивная функция для разбивки тайлов, вызывается из конструктора
			uint32_t js_off;              // смещение тайла на Z-кривой ранга max_rank
			void add_tile(index_t t);     // добавляет тайл в tiles, меняет js_off  и при необходимости отмечает позицию тайла в unodes 

			ptile_t build_tree(const Piramide<bool, D> &P, int cR, int tR, uint32_t zoff, uint32_t &tnum, uint32_t &data_off); // рекурсивная функция, на основе tiles и пирамиды настраивает дерево
			
			// нужна таблица точек роста, мб по рангам, и нужно понять как ее перестраивать вместе с tiles
			
			
			// std::vector<uint32_t>::iterator jsI; uint32_t dst_pos = 0; Cell cell; // курсоры
			// std::vector<std::pair<ptile_t, ptile_t> > tiles; // тайлы с данными (ранг/смещение данных и ранг/смещение на общей сетке дерева)
			// template <typename F_SPLIT, typename F_JOIN> void copy_tile(F_SPLIT &&f_split, F_JOIN &&f_join, int rank);

			// Piramide<uint8_t, D> ranks;
			// uint32_t build_tree(uint32_t tiles_off, uint32_t rank, int trI); // trI==-1 означает tr->root,  возвращает новый tiles_off
		};
		//----------------------------------------------------------------------
	};  // end of class ZipAdaptiveMesh
	//--------------------------------------------------------------------------
	// template <typename T, int D> std::ostream& operator << (std::ostream &S, typename ZipAdaptiveMesh<T, D>::tree_t::index_t t){ return S<<t.cR<<' '<<t.tR; }
	//--------------------------------------------------------------------------
#include "zamr_/cell"
#include "zamr_/base"
#include "zamr_/rebuild"
	
	//#include "zamr_/base"
	// #include "zamr_/LRnLA"
#ifdef AIW_ZAMR_TEST
#include "zamr_/test"
#endif //AIW_ZAMR_TEST
	//--------------------------------------------------------------------------
};  // end of namespace aiw
#endif //AIW_ZIP_AMR_HPP

// https://arxiv.org/pdf/1910.10641
