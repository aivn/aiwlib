// -*- C++ -*-
#ifndef AIW_QPLT_VTEXTURE_HPP
#define AIW_QPLT_VTEXTURE_HPP

/**
 * Copyright (C) 2020-21 Antov V. Ivanov  <aiv.racs@gmail.com>  with support Kintech Lab
 * Licensed under the Apache License, Version 2.0
 **/

#include <vector>
#include "../matr"
#include "base"

namespace aiw{
	//--------------------------------------------------------------------------
	class VTexture{
		int main_flat;               // номер главного флэта (имеющего самопересечение) 
		Vecf<2> C0[3];               // смещения при переходе в дальний (подложенный) флэт
		Matr<2, 2, float> M[3][3];   // матрицы преобразования при переходе в другой флэт
		bool flips[3][2], laxis[3];  // флипы по осям, что бы координаты приводились к центру и номер оси для неглавного флэта при расчете длины
		// float Alen[3][3]; Vecf<2> Blen[3][3]; // коэффициенты расчета длины при переходе из флэта во флэт, диагональ пока не используется
	public:
		void init(const QpltPlotter &plt);

		struct Iterator{
			const VTexture *vtx = nullptr;
			int fID, gID;  // номер текущего и следующего флэта (осей ортогональных граням вкоселя)
			Vecf<2> f, g;  // позиции в текущем и следующем флэте
			float len; 

			CU_HD void conf();  // настраивает axe, len, next_fpos
			CU_HD void next(){ fID = gID; f = g; conf(); }
		};
		CU_HD Iterator trace(int flat, Vecf<2> fpos) const {
			Iterator I; I.vtx = this;  I.fID = flat;
			for(int i=0; i<2; i++) I.f[i] = flips[flat][i] ? 1.f-fpos[i]: fpos[i];
			I.conf(); return I;
		} 
	};
	//--------------------------------------------------------------------------
};  // end of namespace aiw
#endif //AIW_QPLT_VTEXTURE_HPP
