// -*- C++ -*-
#ifndef AIW_ALLOC_HPP
#define AIW_ALLOC_HPP

/**
 * Copyright (C) 2016 Antov V. Ivanov <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#ifndef SWIG		

#ifndef AIW_WIN32
#    include <sys/mman.h>
#    include <fcntl.h> 
#    include <unistd.h>
#else  //AIW_WIN32
#    include <windows.h>
#endif //AIW_WIN32
#include <memory>
#include "debug"

namespace aiw{
//---------------------------------------------------------------------------------------------
	class BaseAlloc{
	protected:
		void *ptr = nullptr;
		size_t size = 0;
	public:
		void* get_addr(){ return ptr; }
		size_t get_size() const { return size; }

		virtual ~BaseAlloc(){}
		virtual size_t get_sizeof() const = 0;
	};
//---------------------------------------------------------------------------------------------	
#ifndef __NVCC__
	template<typename T> struct MemAlloc: public BaseAlloc{
		template<typename ... Args> MemAlloc(size_t sz, Args ... args){
			size = sz; ptr = new T[sz](args...);
			if(!ptr) WRAISE("can't allocate memory ", size, sizeof(T));
		}
		~MemAlloc(){ delete [] (T*)ptr; }
		size_t get_sizeof()  const { return sizeof(T); }				
	};
	template<> struct MemAlloc<char>: public BaseAlloc{
		MemAlloc(size_t sz){
			size = sz; ptr = malloc(sz);
			if(!ptr) WRAISE("can't allocate memory ", size);
		}
		~MemAlloc(){ if(ptr) free(ptr); }
		size_t get_sizeof()  const { return 1; }				
	};
//---------------------------------------------------------------------------------------------	
#ifndef AIW_WIN32
	struct MemAlignAlloc: public BaseAlloc{
		size_t sizeT;
		MemAlignAlloc(size_t sz, size_t szT, int align){
			size = sz; sizeT = szT;
			if(posix_memalign(&ptr, align, sizeT*size)) WRAISE("posix_memalign failed", size, sizeT, sizeT*size, align);
		}
		~MemAlignAlloc(){ if(ptr) free(ptr); }
		size_t get_sizeof()  const { return sizeT; }				
	};
#endif //AIW_WIN32
//---------------------------------------------------------------------------------------------	
	template <typename T> T* init_mem_ptr(std::shared_ptr<BaseAlloc>& mem, size_t sz, int align){
#ifndef AIW_WIN32
		if(align) mem.reset(new MemAlignAlloc(sz, sizeof(T), align));
		else
#endif //AIW_WIN32
			mem.reset(new MemAlloc<T>(sz));
		return (T*)(mem->get_addr());
	}
//---------------------------------------------------------------------------------------------	
#ifndef AIW_WIN32
    class MMapAlloc: public BaseAlloc{
		std::shared_ptr<FILE> pf;
		void *mmap_ptr;
		size_t mmap_sz; 
	public:
		MMapAlloc(const std::shared_ptr<FILE> &pf_, size_t sz, int flags): pf(pf_){
			size = sz; int fd = fileno(pf.get()); size_t pg_sz = sysconf(_SC_PAGE_SIZE), offset = ftell(pf.get());
			mmap_sz = size+offset%pg_sz;
			mmap_ptr = mmap(NULL, mmap_sz, flags, MAP_PRIVATE, fd, offset/pg_sz*pg_sz);
			if(mmap_ptr==MAP_FAILED) WRAISE("can't mmapped file ", fd, offset, size, flags, mmap_sz, pg_sz);
			ptr = (char*)mmap_ptr + offset%pg_sz;
			fseek(pf.get(), size, SEEK_CUR);
		}
		~MMapAlloc(){ munmap(mmap_ptr, mmap_sz); }
		size_t get_sizeof()  const { return 1; }
    };
#endif //AIW_WIN32
//---------------------------------------------------------------------------------------------
#else //__NVCC__
	class CuMemAlloc: BaseAlloc{
		CuMemAlloc(size_t size_){ size = size_; cudaMallocManaged((void**)&ptr, size); }
		~CuMemAlloc(){ cudaFree(ptr); }
		size_t get_sizeof() const { return 1; }
	};
#endif //__NVCC__
//---------------------------------------------------------------------------------------------
}
#endif //SWIG		
#endif //AIW_ALLOC_HPP
