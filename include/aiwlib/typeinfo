// -*- C++ -*-
#ifndef AIW_TYPEINFO_HPP
#define AIW_TYPEINFO_HPP

/**
 * Copyright (C) 2017,2020 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <type_traits>
#include <map>
#include <array>
#include <vector>
#include <string>
#include <iostream>
// #include <typeinfo>
#include <complex>
#include "vec"
#include "dvec"
#include "matr"
#include "dmatr"
#include "iostream"
#include "binaryio"
#include "packer"

// эти макросы перегружают внутри и снаружи оператор obj^TypeInfo
// (оператор --- именно потому что его можно перегрузить как внутри, так и снаружи)
// при этом необходимо перечислить поля структуры для которых будет собрана информация
// предполагается, что имя типа передаваемое  пользователем более информативно чем RTTI typeid(T).name()
// этот же  макроc определяет функции dump/load что обеспечивает сохранение информации на диcк в том же виде что и TypeInfo
// ДОЛЖНА (как???) проводится проверка типа на POD - он должен иметь такой же размер и порядок следования полей
// для POD-типов память просто копируется и смещения не изменяются, иначе
// в TypeInfo после записи/чтения в packer ДОЛЖНЫ лежать смещения полей согласно  dump/load!!!

#define TYPEINFO(TNAME, ARGS...)										\
	aiw::TypeInfo::field_t operator ^ (aiw::TypeInfo& ti) const {		\
		return ti.add(TNAME,  #ARGS, this, ARGS);						\
	}																	\
    void dump(aiw::IOstream &S) const {									\
		if(std::is_trivially_copy_constructible<decltype(*this)>::value) \
			S.write(this, sizeof(*this));								\
		else aiw::dump_to_iostream(S, ARGS);							\
	}																	\
    void load(aiw::IOstream &S){										\
		if(std::is_trivially_copy_constructible<decltype(*this)>::value) \
			S.read(this, sizeof(*this));								\
		else aiw::load_from_iostream(S, ARGS);							\
	}

#define TYPEINFO_X(T, ARGS...)											\
	inline aiw::TypeInfo::field_t operator ^ (const T& X,				\
											  aiw::TypeInfo& ti){		\
		return ti.add(#T,  #ARGS, &X, ARGS);							\
	}																	\
	aiw::IOstream& operator < (aiw::IOstream& S, const T&X){			\
		if(std::is_trivially_copy_constructible<T>::value)				\
			S.write(&X, sizeof(X));										\
		else aiw::dump_to_iostream(S, ARGS);							\
		return S;														\
	}																	\
	aiw::IOstream& operator > (aiw::IOstream& S, T&X){					\
		if(std::is_trivially_copy_constructible<T>::value)				\
			S.read(&X, sizeof(X));										\
		else aiw::load_from_iostream(S, ARGS);							\
		return S;														\
	}																	

namespace aiw{
	//--------------------------------------------------------------------------
	struct CellFieldAccess{ // это структура доступа к ячейке
		std::string label;     // для отображения в общем списке
		int xfem_field = -1;   // номер xfem-поля в xfem-блобе (-1 --- обычная структура)		
		int typeID = -1;       // 0 - float, 1 - double и т.д., см ниже
		int offset = 0;        // смещение в ячейке
		int xfem_szT = 0;      // размер текущей ячейки xfem-блоба
		int xfem_dim = 0;      // число полей в xfem-блобе
		int ibit = -1;         // какой бит показывать (для целых чисел, -1 --- не используется)
		aiw::Ind<2> xfem_pos;  // позиция в текущем динамическом массиве или xfem-блобе, (если отрицательны обратная индексация с конца)

		// int dyn_dim = 0;       // размерность текущего динамического массива
		// int dyn_off = 0;       // смещение начала текущего динамического массива в  структуре
		// int dim;     // размерность  целевого вектора, пока мы этого не умеем

		// std::vector<Ind<3> > dyn_arrs;  // динамические массивы перед данным полем (szT, D, offset)

		template <typename T> float get_i(const char *cell) const {  // принимает указатель на ячейку
			if(xfem_field>=0){ // это xfem-блоб, это работает тольок если блоб не пустой --- проверка на пустой блоб должны выполняться выше!!!
				int mul = xfem_szT; 
				const char* f = cell+xfem_dim*4+*(const uint16_t*)(cell+xfem_field*4)+offset; const uint8_t *sz = (const uint8_t*)(cell+xfem_field*4+2);
				for(int i=0; i<2; i++){
					int p = xfem_pos[i]; if(p<-int(sz[i]) || int(sz[i])<=p) return nanf("");
					f += mul*(p<0? int(sz[i])+p: p); mul *= sz[i];
				}
				return ibit>=0? T(bool(*(const T*)f & (T(1)<<ibit))): *(const T*)f;
			} else return ibit>=0? T(bool(*(const T*)(cell+offset) & (T(1)<<ibit))): *(const T*)(cell+offset);
		}
		template <typename T> float get(const char *cell) const {  // принимает указатель на ячейку
			if(xfem_field>=0){ // это xfem-блоб, это работает тольок если блоб не пустой --- проверка на пустой блоб должны выполняться выше!!!
				int mul = xfem_szT; 
				const char* f = cell+xfem_dim*4+*(const uint16_t*)(cell+xfem_field*4)+offset; const uint8_t *sz = (const uint8_t*)(cell+xfem_field*4+2);
				for(int i=0; i<2; i++){
					int p = xfem_pos[i]; if(p<-int(sz[i]) || int(sz[i])<=p) return nanf("");
					f += mul*(p<0? int(sz[i])+p: p); mul *= sz[i];
				}
				return *(const T*)f;
			} else return *(const T*)(cell+offset);
				/*
				{ // это обычная структура
				int mul = dyn_szT;
				for(const Ind<3> &I: dyn_arrs){ // обрабатываем динамические массивы идущие перед полем
					int sz = I[0]; for(int i=0; i<I[1]; i++) sz *= ((const int*)(cell+I[2]))[i];
					cell += sz;
				}
				cell += offset; const char* f = cell;  // проверять границы диапазона, возвращать nan?
				for(int i=0; i<dyn_dim; i++){
					int p = dyn_pos[i],  sz = *(const int*)(cell); if(p<-sz || sz<=p) return nanf(""); 
					f += mul*(p<0? sz+p: p)+4; mul *= sz; cell += 4;
				}
				return *(const T*)f;
				}
				*/
		}
		float get_f(const char *cell) const {  // принимает указатель на ячейку		
			switch(typeID){
			case 0: return get<float>(cell);
			case 1: return get<double>(cell);
			case 2: return get<bool>(cell); 
			case 3: return get_i<char>(cell); 
			case 4: return get_i<uint8_t>(cell);
			case 5: return get_i<int8_t>(cell); 
			case 6: return get_i<uint16_t>(cell);
			case 7: return get_i<int16_t>(cell); 
			case 8: return get_i<uint32_t>(cell);
			case 9: return get_i<int32_t>(cell); 
			case 10: return get_i<uint64_t>(cell);
			case 11: return get_i<int64_t>(cell); 
			}
			return nanf("");
		}		
	}; // end of structure CellFieldAccess
#ifndef SWIG
	inline Packer& operator < (Packer &P, const CellFieldAccess &cfa){
		return P<cfa.label<cfa.xfem_field<cfa.typeID<cfa.offset<cfa.xfem_szT<cfa.xfem_dim<cfa.xfem_pos<cfa.ibit;
	}
	inline Packer& operator > (Packer &P, CellFieldAccess &cfa){
		return P>cfa.label>cfa.xfem_field>cfa.typeID>cfa.offset>cfa.xfem_szT>cfa.xfem_dim>cfa.xfem_pos>cfa.ibit;
	}
	//--------------------------------------------------------------------------
	struct TypeInfo{
		//----------------------------------------------------------------------
		struct field_t { // описание поля структуры
			std::string Tname;     // пользовательское имя типа
			int typeID = -1;       // -1 --- какой то тип пользователя
			std::vector<int> dim;  // размерность (если это массив), -1 означает свободную размерность определенную в самом поле, быстрая ось в конце
			int szT = 0;           // размер типа, это некое дублирование информации но так проще
			std::string fname;      // имя поля

			field_t& add_dim(int D){ dim.insert(dim.begin(), D); return *this; }
			field_t& add_dimV(int D){ dim.push_back(D); return *this; }
		};
		//----------------------------------------------------------------------
		struct struct_info_t{  // описание структуры 
			int szT;                         // общий размер структуры
			std::map<int, field_t>  fields;  // таблица вида смещение: поле, автоматическая сортировка по смещениям
		};
		//----------------------------------------------------------------------
		std::map<std::string, struct_info_t> table;  // таблица типов
		field_t root;  // корень (то, что было получено на вход)
		std::vector<field_t> xfem_root; // корни полей для xfem_blob-а
		std::vector<int> xfem_szT;      // размеры структур в  xfem_blob-е

		operator bool () const { return root.szT || xfem_root.size(); }
		
		//----   методы заполнения  --------------------------------------------
	private:
		void mk_struct(struct_info_t&, const char*, const char*){} // замыкание рекурсии
		template <typename T, typename ... Args> // эта функция обрабатывает поля одной структуры и создает (если раньше не было) описание структуры в table
		void mk_struct(struct_info_t &si, const char* names, const char* ptr0, const T& arg0, const Args& ... args){
			if(names[0] && names[0]=='X' && names[1] && names[1]=='.') names += 2;  // X-mode
			int i=0; while(names[i] and names[i]!=' ' and names[i]!=',' and names[i]!='\t') i++; // ищем конец имени для поля
			int offset = (const char*)&arg0-ptr0;
			if(si.fields.find(offset)==si.fields.end()){ field_t &f = si.fields[offset]; f = arg0^*this;  f.fname = std::string(names, i); }
		    while(names[i] and (names[i]==' ' or names[i]==',' or names[i]=='\t')) i++;  // ищем начало следующего имени
			mk_struct(si, names+i, ptr0, args...);   // обрабатываем следующее поле
		}
	public:
		template <typename T, typename ... Args> field_t add(const char *Tname, const char* names, const T* ptr0, const Args& ... args){
			if(table.find(Tname)==table.end()){ // если такой тип (структура) еще не зарегистрирована 
				struct_info_t &si = table[Tname]; si.szT = sizeof(T);
				mk_struct(si, names, (const char*)ptr0, args...);
			}
			field_t f; f.Tname = Tname; f.szT = sizeof(T); // смещение и имя поля остаются неопределены
			return f; 
		}
		//----------------------------------------------------------------------
		//  интерфейс доступа (должно быть два режима работы - доступ к памяти и к блобу на диске)
		//  доступ к динамическим массивам в памяти пока не имеет смысла:
		//   1. онлайн визуализация таких структур не востребована
		//   2. вариантов организации таких структур слишком много
		//  доступ к POD типам на диске и в памяти эквивалентен (если не так то все плохо).
		//  есть две возможности:
		//   1. структура возможно содержит динамические массивы (к часть стат. массивов и содержащие POD-типы)
		//   2. xfem-blob (размер блоба, сам блоб и размеры массивов) содежащий POD-типы
		//  ввести возможность объединения разнесенных по памяти величин в вектор или матрицу?
	private:
		void add_field(std::vector<aiw::CellFieldAccess>& res, const field_t &f, CellFieldAccess cfa) const;
		void add_array(std::vector<aiw::CellFieldAccess>& res, const field_t &f, CellFieldAccess cfa, int idim) const;
	public:
		std::vector<aiw::CellFieldAccess> get_access() const;
		std::vector<aiw::CellFieldAccess> get_xfem_access() const;
		//----------------------------------------------------------------------
	};  // end of class TypeInfo
	//--------------------------------------------------------------------------	
	inline std::ostream& operator << (std::ostream &S, const TypeInfo::field_t &f){
		S<<f.Tname; for(int x: f.dim) S<<'['<<x<<']';
		return S<<"; // szT="<<f.szT<<", fname="<<f.fname<<'\n';
	}
	inline std::ostream& operator << (std::ostream &S, const TypeInfo::struct_info_t &s){
		S<<"struct {\n";
		for(auto f: s.fields) S<<'\t'<<f.first<<" : "<<f.second;
		return S<<"}; // "<<s.szT<<" bytes\n";
	}
	inline std::ostream& operator << (std::ostream &S, const TypeInfo &ti){
		for(auto I: ti.table) S<<I.first<<' '<<I.second;
		return S<<ti.root;
	}
	// inline std::ostream& operator << (std::ostream &S, const TypeInfo::access_t &a){
	//	S<<a.Tname; for(int x: a.dim) S<<'['<<x<<']';
	//	return S<<"; // szT="<<a.szT<<", offset="<<a.offset<<'\n';
	// }
	//--------------------------------------------------------------------------
	inline Packer& operator < (Packer &P, const TypeInfo::field_t &f) { return P<f.Tname<f.typeID<f.szT<f.dim<f.fname; }
	inline Packer& operator > (Packer &P,       TypeInfo::field_t &f) { return P>f.Tname>f.typeID>f.szT>f.dim>f.fname; }
	inline Packer& operator < (Packer &P, const TypeInfo::struct_info_t &S) { return P<S.szT<S.fields; }
	inline Packer& operator > (Packer &P,       TypeInfo::struct_info_t &S) { return P>S.szT>S.fields; }
	inline Packer& operator < (Packer &P, const TypeInfo &ti) {
		P<ti.table<ti.root<ti.xfem_root;
		if(ti.xfem_root.size()) P.write(ti.xfem_szT.data(), ti.xfem_szT.size()*4);
		return P;
	}
	inline Packer& operator > (Packer &P, TypeInfo &ti) {
		P>ti.table>ti.root>ti.xfem_root;
		if(ti.xfem_root.size()){ ti.xfem_szT.resize(ti.xfem_root.size()); P.read(ti.xfem_szT.data(), ti.xfem_szT.size()*4); }
		return P;
	}
	//--------------------------------------------------------------------------
#define ADD_BASE_TYPE(T, TID) inline TypeInfo::field_t operator ^ (T, TypeInfo&){ TypeInfo::field_t f; f.Tname = #T; f.typeID = TID; f.szT = sizeof(T); return f; }
	ADD_BASE_TYPE(float,    0)
	ADD_BASE_TYPE(double,   1)
	ADD_BASE_TYPE(bool,     2)
	ADD_BASE_TYPE(char,     3)
	ADD_BASE_TYPE(uint8_t,  4)
	ADD_BASE_TYPE(int8_t,   5)
	ADD_BASE_TYPE(uint16_t, 6)
	ADD_BASE_TYPE(int16_t,  7)
	ADD_BASE_TYPE(uint32_t, 8)
	ADD_BASE_TYPE(int32_t,  9)
	ADD_BASE_TYPE(uint64_t, 10)
	ADD_BASE_TYPE(int64_t,  11)
#undef ADD_BASE_TYPE

	template <typename T, int D> TypeInfo::field_t operator ^ (T const (&p)[D], TypeInfo& ti){ return (p[0]^ti).add_dim(D); } 
	template <typename T, size_t D> TypeInfo::field_t operator ^ (const std::array<T, D> &p, TypeInfo& ti){ return (p[0]^ti).add_dim(D); }
	
	template <typename T> TypeInfo::field_t operator ^ (std::complex<T>, TypeInfo& ti){ return (T()^ti).add_dimV(2); }
	
	template <int D, typename T> TypeInfo::field_t operator ^ (const Vec<D, T> &X, TypeInfo &tio){ return (T()^tio).add_dimV(D); }
	template <int Y, int X, typename T> TypeInfo::field_t operator ^ (const Matr<Y, X, T> &M, TypeInfo &tio){ return (T()^tio).add_dimV(X).add_dimV(Y); }
	// template <typename T> inline TypeInfo::field_t operator ^ (const DynVec<T> &X, TypeInfo &tio){ return (T()^tio).add_dimV(-1); }
	// template <typename T> inline TypeInfo::field_t operator ^ (const DynMatr<T> &X, TypeInfo &tio){ return (T()^tio).add_dimV(-1).add_dimV(-1); }

	template <typename T> TypeInfo::field_t operator ^ (T, TypeInfo&){
		static_assert(sizeof(T)==0, "\n\n\033[31;1;5m*** Please, use macros TYPEINFO or TYPEINFO_X for your type! ***\033[0m\n");
		return TypeInfo::field_t();
	} 
	//--------------------------------------------------------------------------
#endif //SWIG
}   // end of namespace aiw
#endif //AIW_TYPEINFO_HPP
