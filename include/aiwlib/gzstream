// -*- C++ -*-
#ifndef AIW_GZSTREAM_HPP
#define AIW_GZSTREAM_HPP

/**
 * Copyright (C) 2016 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#ifndef AIW_NO_ZLIB

#ifndef SWIG
#include <zlib.h>
#endif //SWIG
#include "iostream"

namespace aiw{
//------------------------------------------------------------------------------
	class GzFile: public IOstream {
		std::shared_ptr<gzFile_s> pf;
	public:
		GzFile(){}
		operator bool () const { return pf.get() && !gzeof(pf.get()); }
#ifndef SWIG
		std::shared_ptr<IOstream> copy() const { GzFile *f = new GzFile; *f = *this; std::shared_ptr<IOstream> r(f); return r; }
		template <typename ... Args> void open(const char *format, const char *mode, Args ... args){
			std::stringstream path; format2stream(path, format, args...); gzFile f = ::gzopen(path.str().c_str(), mode);
			if(!f) WRAISE("can't open file", path.str(), mode);
			name = path.str(); pf.reset(f, ::gzclose);
		}
		template <typename ... Args> GzFile(const char *format, const char *mode, Args ... args){ open(format, mode, args...); }
#endif //SWIG
		GzFile(const char *path, const char *mode){ open(path, mode); }
		
		void close(){ pf.reset(); } 
		long tell() const { return ::gztell(pf.get()); }
		bool seek(long offset, int whence=0){ return !::gzseek(pf.get(), offset, whence); }
		size_t read(void* buf, size_t size){ return ::gzread(pf.get(), buf, size); }
		size_t write(const void* buf, size_t size){ return ::gzwrite(pf.get(), buf, size); }
		void flush(){} // ???
		bool eof() const { return gzeof(pf.get()); }
		int printf(const char * format, ...){
			va_list args; va_start(args, format);   
			int r = gzprintf(pf.get(), format, args);
			va_end(args);
			return r;
		}		

	};
//------------------------------------------------------------------------------
};
#endif //AIW_NO_ZLIB
#endif //AIW_GZSTREAM_HPP
