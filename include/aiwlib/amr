// -*- C++ -*-
#ifndef AIW_AMR_HPP
#define AIW_AMR_HPP

/**
 * Copyright (C) 2018-20 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <vector>
#include <list>
#include <map>
#include <algorithm>
// #include "bit_piramide"
// #include "cubicarr" 
#include "zcube"
#include "mesh"

namespace aiw{
	//--------------------------------------------------------------------------
	template <typename T, int D, int R>  class AdaptiveMesh: public aiw::BaseMesh<D>{
		UsingBaseMeshAttributes;
		
		static const int tile_rank = R;
		static const uint64_t Dbits = ~((~0)<<D);
		static const uint64_t CHbits = ~((~0)<<(1<<D));
		static const uint64_t RDbits = ~((~0)<<(R*D));
		static const int32_t R1Dbits = ~((~0)<<((R-1)*D));
		static const int tile_sz = 1<<(D*R);       // число ячеек в тайле
		static const int chunks_sz = 1<<(D*(R-1)); // число чанков
		static const int usages_sz = 1<<(D*R-6);   // число 64х битных слов в массиве usages, должно быть R*D>=6
		static void copy_chunk(const T* src, T* dst){ for(int i=0; i<(1<<D); i++) dst[i] = src[i]; }
		static int cID2ctID(int off){ return (off>>((R-1)*D))&Dbits; } //  смещение ячейки в номер дочернего тайла 
		static int chID2ctID(int chID){ return (chID>>((R-2)*D))&Dbits; } //  смещение чанка в номер дочернего тайла
		static bool check_out_tile(uint32_t nb_off){ return ((nb_off>>(R*D))&Dbits)!=Dbits; } // выходит ли смещение соседней ячейки за пределы тайла
		// static_assert(D<=6);
		//----------------------------------------------------------------------
		// template <typename MM> struct meta_t{ MM data[1<<(R*D)]; typedef MM meta_data_type;  static const bool is_meta = true;  };
		// template <> struct meta_t<void>{ int *data = nullptr;    typedef int meta_data_type; static const bool is_meta = false; };
		//----------------------------------------------------------------------
		struct tile_t;
		struct cell_t { // данные интерфейса для доступа к ячейке
			T* ptr;        // указатель на ячейку
			tile_t *tile;  // тайл в котором лежит ячейка
			int offset;    // позиция ячейки в тайле 
		};
		//----------------------------------------------------------------------
		//  базовый тайл, интерфейс для работы с флагами, выделением памяти, обхода и пр.
		//----------------------------------------------------------------------
		struct root_t;
		struct patch_t { T data[1<<D]; }; /* patch_t *next; // односвязный список патчей в тайле для быстрого коммита? */ 
		struct tile_t{  // базовый тайл
			// meta_t<M> *meta = nullptr;
			root_t *root = nullptr;  // корневая структура дерева тайлов, если тайл играет роль страницы root = nullptr
			Vec<D> bmin, step;	     // нижний угол и шаг тайла - СЧИТАТЬ ИХ В load  и при аллоцировании тайла!!!!

			tile_t *parent = nullptr, *childs[1<<D] = {nullptr};  // родительский  и дочерние тайлы, устанавливать ссылки на соседей для нижнего уровня?
			//			int find_child_ID(const tile_t *tile) const { for(int i=0; i<(1<<D); i++) if(childs[i]==tile) return i; WRAISE("", this, tile); return -1; } // ищет номер дочернего тайла 
			int find_child_ID(const tile_t *tile) const {
				for(int i=0; i<(1<<D); i++) if(childs[i]==tile) return i;
				if(root) root->out_info();
				WOUT(this, tile, root, tile->parent, tile->root);
				abort();
				return -1;
			} // ищет номер дочернего тайла 
			void set_coords(int tID); // устанавливает bmin и step (в т.ч. для потомков), tID --- позиция тайла у родителя
			//------------------------------------------------------------------
			//  работа с флагами использования и выделением памяти
			//------------------------------------------------------------------
			uint64_t usages[3][usages_sz] = {{0}};  // флаги текущего [0] и будущего [1] использования (этого достаточно для обхода), ghost  

			bool get_cell_usage(bool future, int off) const { return usages[future][off>>6]&(uint64_t(1)<<(off&0x3f)); }
			void set_cell_usage_on(int off)  { usages[1][off>>6] |=   uint64_t(1)<<(off&0x3f);  }
			void set_cell_usage_off(int off) { usages[1][off>>6] &= ~(uint64_t(1)<<(off&0x3f)); }

			bool get_chunk_usage(bool future, int chID) const { return usages[future][chID>>(6-D)]&(CHbits<<((chID<<D)&0x3f)); } 
			int get_chunk_usage(int chID) const { int i = chID>>(6-D); uint64_t m = CHbits<<((chID<<D)&0x3f); return bool(usages[0][i]&m) + 2*bool(usages[1][i]&m); } 
			bool chunk_is_full(int chID) const { uint64_t mask = CHbits<<((chID<<D)&0x3f); return (usages[0][chID>>(6-D)]&mask)==mask; }
			void set_chunk_usage_on(int chID)  { usages[1][chID>>(6-D)] |=   CHbits<<((chID<<D)&0x3f);  }
			void set_chunk_usage_off(int chID) { usages[1][chID>>(6-D)] &= ~(CHbits<<((chID<<D)&0x3f)); }
			
			uint16_t rank = 0, ch_use = 0, ch_alloc = 0, ch_free = 0;  //  уровень вложения, число занятых, аллоцированных и освобожденных чанков
			virtual int alloc_chunks_sz() const = 0; // это можно потом оптимизировать через счетчики как ch_use+ch_alloc-ch_free
			virtual void alloc_chunk(int chID) = 0; // гарантированно аллоцирует чанк, если чанк уже аллоцирован ничего не происходит

			void commit_usages(){ ch_use += ch_alloc; ch_alloc = 0; ch_use -= ch_free; for(int i=0; i<usages_sz; i++) usages[0][i] = usages[1][i]; }

			bool get_cell_split(bool future, int off) const { int tid = cID2ctID(off); return childs[tid] && childs[tid]->get_chunk_usage(future, off&R1Dbits); }

			void replace_me(tile_t &other);   // заменяет все связи (parent, childs, root) с this на связи с other, копирует *this в other
			bool will_need();                 // проверяет будет ли нужен еще тайл, если нет обнуляет все ссылки на этот тайл
			//------------------------------------------------------------------
			//  обход
			//------------------------------------------------------------------
			virtual T* cell(int cID) = 0;   // доступ к ячейке, если ПАМЯТЬ НЕ ВЫДЕЛЕНА возвращает nullptr 
			// неоптимизировано, trmode не поддерживается, только для НЕПРЕРЫВНОГО ПОЛЯ
			bool first(cell_t &C, int trmode, int start=0); // при необходимости рекурсивно спускается вниз по тайлу			
			bool next(cell_t &C, int trmode); // ходит вверх по тайлам, для спуска вызывает first				
			tile_t* find_nb_tile(Ind<D> tpos, bool force=false) const; // ищет соседний тайл, tpos - относительная позиция, если тайла нет возвращает ноль
			const T& get(uint64_t off0, int crank) const {
				uint64_t off = off0>>((crank-R)*D);	if(get_cell_usage(0, off)) return *cell(off);
				tile_t *t = childs[off0>>(--crank*D)]; WASSERT(t, "", off0, bmin, rank, crank, this);
				return t->get(off0&~(Dbits<<(D*crank)), crank);				
			}
			
			patch_t* patches[chunks_sz] = {nullptr};  // указатель на массив патчей, сейчас выделяется во всех тайлах но надо выделять только там где нужно

			virtual void out_info() const = 0;
			virtual void selfcheck() const = 0;
			void out2dat(IOstream &S) const { S("%\n%\n%\n%\n%\n\n\n", bmin|rank, (bmin+(step(0)*(1<<R)|0))|rank,
												(bmin+step*(1<<R))|rank, (bmin+(0|step(1)*(1<<R)))|rank, bmin|rank); }
			uint32_t get_tile_pos() const {	return parent? (parent->get_tile_pos()<<D)|parent->find_child_ID(this): 0; }

			T* split_cell(int off);       // разбивает ячейку, возвращает указатель на данные чанка
			cell_t join_chunk(int chID);  // объединяет чанк, возвращает родительскую ячейку
		}; // end of struct tile_t
		//----------------------------------------------------------------------
#define USING_TT_ATTRS using tile_t::root; using tile_t::bmin; using tile_t::step; \
		using tile_t::parent; using tile_t::childs; using tile_t::patches; using tile_t::get_chunk_usage; \
		using tile_t::commit_usages; using tile_t::ch_use; using tile_t::ch_alloc; using tile_t::will_need; using tile_t::replace_me; \
		using tile_t::ch_free; using tile_t::rank; using tile_t::usages; 
		//----------------------------------------------------------------------
		//  тяжелый тайл играющий роль страницы памяти
		//----------------------------------------------------------------------
		struct heavy_tile_t: public tile_t{
			USING_TT_ATTRS

			T data[tile_sz] = { T() }; // данные

			// метаинформация по каждому чанку занимает два бита:
			//   0 - свободен 
			//   1 - занят в данном тайле
			//   2 - занят в другом (легком) тайле
			//   3 - конфликт, локально чанк выделен в массиве патчей. Не используется? 
			uint32_t chunks[chunks_sz>>4?chunks_sz>>4:1] = {0}, first_free_chunk = 0, far_ch_sz = 0;  //  первый свободный чанк (оптимизация?) и число сторонних чанков
			int get_chunk_info(int off) const { return (chunks[off>>4]>>(2*(off&0xf)))&3; }
			void set_chunk_info(int off, int val){ chunks[off>>4] &= ~(3<<(2*(off&0xf))); chunks[off>>4] |= (val&3)<<(2*(off&0xf)); }
			void alloc_chunk(int chID) override; // виртуальная, гарантированно аллоцирует чанк, если чанк уже аллоцирован ничего не происходит, определена после root_t

			int alloc_chunks_sz() const override; 
			T* cell(int cID) override;  // виртуальная, доступ к ячейке, если ПАМЯТЬ НЕ ВЫДЕЛЕНА возвращает nullptr
			uint16_t alloc_far_chunk(bool in_commit=false); // возвращает ID+1 аллоцированного чанка либо 0 в случае неудачи
			void free_far_chunk(uint16_t chID);
			// актуализует значение first_free_chunk, обновляет usages и счетчики.
			// ПЕРЕД вызовом для конфликтных чанков должно быть освобождено место, ВСЕ патчи считаются примененными!
			bool commit();
			void out_info() const;
			void selfcheck() const override;
		}; // end of struct heavy_tile_t
		//----------------------------------------------------------------------
		//  легкий тайл
		//----------------------------------------------------------------------
		struct light_tile_t: public tile_t{
			USING_TT_ATTRS
			
			heavy_tile_t* page = nullptr;      // тяжелый тайл играющий роль страницы
			uint16_t chunks[chunks_sz] = {0};  // чанки, если чанк не выделен = 0

			T* cell(int cID) override;  //  доступ к ячейке, если ПАМЯТЬ НЕ ВЫДЕЛЕНА возвращает nullptr
			int alloc_chunks_sz() const override;
			void alloc_chunk(int chID) override; // гарантированно аллоцирует чанк, если чанк уже аллоцирован ничего не происходит, определена после root_t
			bool commit(); 
			void out_info() const;
			void selfcheck() const override;
		}; // end of struct light_tile_t
#undef USING_TT_ATTRS
		//----------------------------------------------------------------------
		//  корень дерева тайлов
		//----------------------------------------------------------------------
		struct root_t {
			AdaptiveMesh *msh;
			tile_t *root = nullptr;
			Ind<D> pos;
			
			std::list<patch_t> patches;
			std::list<heavy_tile_t> htiles;
			std::list<light_tile_t> ltiles;
			// std::vector<havy_tile_t*> ptiles;

			void operator = (const root_t &r);
			heavy_tile_t* search_page(int sz); // возвращает наиболее подходящую по размеру страницу. Это можно оптимизировать через бинарный поиск?
			void commit();
			int get_max_rank() const;

			void dump(IOstream& S) const;
			bool load(IOstream& S);

			void out_info() const;
			void tiles2dat(IOstream& hS, IOstream& lS) const;
			void selfcheck() const;
		}; // end of struct root_t
		// friend class root_t;
		Mesh<root_t, D> tiles; // базовая (самая крупная) сетка тайлов нулевого ранга
		int max_rank = -1;
		void set_max_rank_box_step(); // устанавливает max_rank, box и шаги
	public:
		//  инициализация сетки
		void init(Ind<D> tbox, const aiw::Vec<D> &bmin_, const aiw::Vec<D> &bmax_);
		void init(Ind<D> tbox){ init(tbox, vec(0.), tbox*(1<<R)); }
		AdaptiveMesh copy() const;
		//  сбор информации о сетке
		// inline Ind<D> bbox() const { return tiles.bbox()*(1<<R); } <<== box from base_mesh 
		int get_max_rank() const { return max_rank; }
		size_t size() const;   // число ячеек
		size_t memsz() const;  // размер памяти в байтах
		void out_info() const;
		void tiles2dat(IOstream&& hS, IOstream&& lS) const { for(Ind<D> pos; pos^=tiles.bbox(); ++pos) tiles[pos].tiles2dat(hS, lS); }
		void selfcheck() const { for(Ind<D> pos; pos^=tiles.bbox(); ++pos) tiles[pos].selfcheck(); }
		//----------------------------------------------------------------------
		//  основной интерфейс доступа к ячейкам
		//----------------------------------------------------------------------
		struct Cell: protected cell_t{
			using cell_t::ptr; using cell_t::tile; using cell_t::offset;
			
			friend class Tile;
			operator bool () const { return ptr; }  
			bool operator !() const { return !ptr; }

			Vec<D> bmin() const { return tile->bmin + (zoff2pos<D>(offset, R)&tile->step); }
			Vec<D> step() const { return tile->step; }
			int rank() const { return tile->rank; }  // уровень вложенности
			
			T& operator * ()       { return *ptr; } // доступ к данным ячейки
			const T& operator * () const { return *ptr; }
			T* operator -> ()       { return ptr; }
			const T* operator -> () const { return ptr; }

			const Cell operator [](const Ind<D> &dpos) const; // доступ к соседям
			template <typename ... Args>  const Cell operator() (Args ... dpos) { return (*this)[Ind<D>(dpos...)]; } // доступ к соседям

			T* split(){ return tile->split_cell(offset); } // разбивает ячейку, активирует все подъячейки и возвращает указатель на chunk

		protected:
			uint32_t bound_ = ~0;
		public:
			uint32_t bound(); // по два бита на каждую ось, слева/справа
		protected:
			template <typename F> void deep2face(F&& f, tile_t *t, uint32_t off, int mask, int res4cmp, int axe, int rank);
		public:
			// f(Cell&, const T&, double доля_площади_грани, double расстояние_от_грани_ДО_центра_СОСЕДНЕЙ_ячейки_по_оси_СО_знаком)
			// axe==0 --- обход по шаблону крест. axe==+/-a --- ось а, грань слева/справа
			template <typename F>  void face(F&& f, int axe);			// проверки является ли ячейка граничной?
			// inline typename       meta_t<M>::meta_data_type& meta(int i)       {...}
			// inline typename const meta_t<M>::meta_data_type& meta(int i) const {...}
		}; // end of class Cell
		//----------------------------------------------------------------------
		class Tile { // это интерфейс доступа к тайлу (верхнего?!) уровня
			root_t *root; int trmode;
			friend class AdaptiveMesh;
		public:
			class iterator: public Cell{
				using Cell::tile;
				int trmode; bool stop = false;
				friend class Tile;
			public:
				Cell& operator * () { return *this; }
				const Cell& operator * () const { return *this; }
				void operator ++(){ stop = !tile->next(*this, trmode); }
				// inline bool operator == (const iterator &) const { return stop; }  
				inline bool operator != (const iterator &) const { return !stop; }  
			};
			iterator begin(){ iterator I; I.trmode = trmode; I.stop = !root->root->first(I, trmode); return I; }
			iterator end(){ return iterator(); }

			// еще информация по тайлу - позиция, число ячеек, заполненность, размер памяти и пр?
		};

		int trmode = 0; // -1 --- нижний уровень, 0 и выше --- заданный ранг??? // 0 --- нижний уровень, n>0 --- ранг n-1, n<0 --- границы -n:1-n 
		Tile get_tile(Ind<D> pos){ Tile t0;  t0.root = ind(0)<=pos && pos<tiles.bbox() ? &(tiles[pos]) : nullptr;  t0.trmode = trmode;  return t0; }
		Tile get_tile(int tID){ return get_tile(tID%tiles.bbox()); } // позволяет делать параллельный обход

		// прямой доступ к ячейкам нулевого ранга?
		
		// общий обход
		struct iterator: public Tile {
			using Tile::root;
			
			Tile& operator * () { return *this; }
			const Tile& operator * () const { return *this; }
			inline void operator ++ (){	Ind<D> pos = root->pos;  ++pos^=root->msh->tiles.bbox(); 	(Tile&)*this = root->msh->get_tile(pos); }
			inline bool operator != (const iterator&) const { return root; }
		}; 
		iterator begin(){ iterator I; I.root = &(tiles[ind(0)]); I.trmode = trmode; return I; }
		iterator end(){ return iterator(); }
		// порождение итераторв для обходов на соотв рангах?

		void commit(){ for(root_t& r: tiles){ r.commit(); } set_max_rank_box_step(); }
		// void out2dat(IOstream&&); ???
		// минимальный/максимальный ранги, размер памяти, число тайлов (в т.ч. по рангам), заполненность тайлов и пр.
		// T& operator(const Vec<D> &r){} // доступ к произвольной ячейке по координате ???
		// template <typename SEE_UP_F, typename SEE_DOWN_F> void commit(SEE_UP_F see_up_f, SEE_DOWN_F see_down_f, const std::vector<Ind<D> > &stencil){}
		// void commit(...){} // реализует отмеченные через итераторы разбиения/слияния, примает ф-ии задания значений в разбитой ячейке и фии измельчения/укрупнения метаинформации?

		// f_check(const Cell&) ==> 1 (разбить), 0 (не менять), -1 (слияние), f_split/join(const Cell&, T *chunk_data) 
		template <typename F_CHECK, typename F_SPLIT, typename F_JOIN> void rebuild(F_CHECK &&f_check, F_SPLIT &&f_split, F_JOIN &&f_join);
		//----------------------------------------------------------------------
		//   сброс и чтение с диска
		//----------------------------------------------------------------------
		void dump(IOstream&& S) const;
		void dump(IOstream& S) const { dump(std::move(S)); }
		bool load(IOstream&& S, int use_mmap=0, bool raise_on_error=true); // mmap пока игнорируется
		bool load(IOstream& S, int use_mmap=0, bool raise_on_error=true){ return load(std::move(S), use_mmap, raise_on_error); }
		//----------------------------------------------------------------------
		//   произвольный доступ
		//----------------------------------------------------------------------
		T out_value;
	protected:
		const T& get(Ind<D> pos) const {
			return check_out_pos(pos)? out_value: tiles[pos/(1<<(R+max_rank))].root->get(pos2zoff(pos%(1<<(R+max_rank)), 1<<(R+max_rank)), R+max_rank);
		}
	public:
		const T& operator [](const Ind<D> &pos) const { return get(pos); }
		      T& operator [](const Ind<D> &pos)       { return (T&)get(pos); }
		const T& operator ()(const Vec<D> &coord) const { return get(coord2pos(coord)); }
		      T& operator ()(const Vec<D> &coord)       { return (T&)get(coord2pos(coord)); }		
	};  // конец класса AdaptiveMesh
	//-------------------------------------------------------------------------
};

#include "amr_/base"
#include "amr_/memory"
#include "amr_/access"
#include "amr_/commit"
#include "amr_/dump_load"

#endif //AIW_AMR_HPP
