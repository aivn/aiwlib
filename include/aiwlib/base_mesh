// -*- C++ -*-
#ifndef AIW_BASE_MESH_HPP
#define AIW_BASE_MESH_HPP

/**
 * Copyright (C) 2018, 2022 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

#include <string>
#include <algorithm>
#include "vec"
#include "binhead"

namespace aiw{
	//--------------------------------------------------------------------------
	template <int D, typename A=float> class BaseMesh{ 
	protected:
		size_t sz;  // общее число элементов
		Ind<D> box; // размеры сетки в ячейках
		friend struct BinaryFormat;
	public:
		static const int dim = D;
		std::string head, info, anames[D];

		const char* get_axe_name(int i) const { return anames[i].c_str(); }  // for python
		void set_axe_name(int i, const char* name){ anames[i] = name; }      // for python
		
		aiw::Vec<D, A> bmin, bmax, step, rstep;
		int logscale=0;          // битовая маска, задающая логарифмический масштаб по осям в виде  (0 --- нет, 1 --- да)
		int periodic=0;          // битовая маска, задающая периодику по различным осям (0 --- нет, 1 --- да)
		unsigned long interp=0;  // интерполяция по различным осям в формате 0x..., оси следуют в порядке 0x0123..., 4 бита на ось,
		                         //   0 - нет интерполяции, 1 - линейная, 2 - кубическая, 3 - B-сплайнами
		void set_interp(int axe, int itype){ interp &= ~(0xF<<(4*(D-axe-1))); interp |= (itype&0xF)<<(4*(D-axe-1)); }
		int  get_interp(int axe) const { return (interp>>4*(D-axe-1))&0xF; } // --> itype
		/*
#ifndef SWIG
		[[deprecated]] unsigned long bounds;
#endif //SWIG
		*/

	protected:
	    void check_out_pos(int& pos, int axe, int &mask) const { // правит маску промахов, по два бита на ось (слева/справа)
			if(periodic&(1<<axe)) pos = (pos+box[axe])%box[axe];
			else if(pos<0){ pos = 0; mask |= 1<<2*axe; }
			else if(pos>=box[axe]){ pos = box[axe]-1; mask |= 1<<(1+2*axe); }
		}
	    int check_out_pos(Ind<D>& pos) const { // возвращает маску промахов, по два бита на ось (слева/справа)
			int mask = 0;
			for(int i=0; i<D; i++) check_out_pos(pos[i], i, mask);
			return mask;
		}
		void flip_axe(int axe){
			std::swap(bmin[axe], bmax[axe]);
			if(logscale&1<<axe){ step[axe] = 1./step[axe]; rstep[axe] = 1./log(step[axe]); }
			else { step[axe] = -step[axe]; rstep[axe] = -rstep[axe]; }
		}
		void push(BinaryHead &bh) const {
			bh.dim = D;  bh.head = head;  bh.info = info;  bh.logscale = logscale;
			for(int i=0; i<D; i++){ bh.axis[i] = anames[i]; bh.bbox[i] = box[i]; bh.bmin[i] = bmin[i]; bh.bmax[i] = bmax[i]; }
		}
		void pull(const BinaryHead &bh){
			head = bh.head; info = bh.info;  logscale = bh.logscale;
			for(int i=0; i<D; i++){ anames[i] = bh.axis[i]; box[i] = bh.bbox[i]; bmin[i] = bh.bmin[i]; bmax[i] = bh.bmax[i]; }
		}
	public:		
		size_t size() const { return sz; }
		aiw::Ind<D> bbox() const { return box; }

		void set_step(int axe){
			// axes[axe] = axe; ???
			step[axe] = logscale&1<<axe? exp(log(bmax[axe]/bmin[axe])/box[axe]) : (bmax[axe]-bmin[axe])/box[axe];
			rstep[axe] = logscale&1<<axe? 1./log(step[axe]) : 1./step[axe];
		}
		void set_axis(const aiw::Vec<D, A> &bmin_, const aiw::Vec<D, A> &bmax_, int logscale_=0){
			bmin = bmin_; bmax = bmax_;	logscale = logscale_;
			for(int i=0; i<D; i++) set_step(i); 
		}

		int coord2pos(A coord, int axe) const { return floor(logscale&1<<axe ? log(coord/bmin[axe])*rstep[axe] : (coord-bmin[axe])*rstep[axe]); }
		aiw::Ind<D> coord2pos(const aiw::Vec<D, A> &r) const { Ind<D> p; for(int i=0; i<D; i++){ p[i] = coord2pos(r[i], i); } return p; }

		int coord2pos_bc(A coord, int axe) const { int pos = coord2pos(coord, axe), mask; check_out_pos(pos, axe, mask); return pos; }
		aiw::Ind<D> coord2pos_bc(const aiw::Vec<D, A> &r) const { Ind<D> p; for(int i=0; i<D; i++){ p[i] = coord2pos_bc(r[i], i); } return p; }

		A pos2coord(int pos, int axe) const { return logscale&1<<axe ? bmin[axe]*pow(step[axe], pos+.5) : bmin[axe]+step[axe]*(pos+.5); } 
		aiw::Vec<D, A> pos2coord(const aiw::Ind<D> &p) const { Vec<D, A> r; for(int i=0; i<D; i++){ r[i] = pos2coord(p[i], i); } return r; }

		A pos2coord_bc(int pos, int axe) const { int mask; check_out_pos(pos, axe, mask); return pos2coord(pos, axe); }
		aiw::Vec<D, A> pos2coord_bc(const aiw::Ind<D> &p) const { Vec<D, A> r; for(int i=0; i<D; i++){ r[i] = pos2coord_bc(p[i], i); } return r; }

		A cell_angle(int pos, int axe) const { return logscale&1<<axe ? bmin[axe]*pow(step[axe], pos) : bmin[axe]+step[axe]*pos; }
		aiw::Vec<D, A> cell_angle(const aiw::Ind<D> &p) const { Vec<D, A> r; for(int i=0; i<D; i++){ r[i] = cell_angle(p[i], i); } return r; }
		aiw::Vec<D, A> cell_angle_mask(const aiw::Ind<D> &p, int m) const { Vec<D, A> r; for(int i=0; i<D; i++){ r[i] = cell_angle(p[i]+((m>>i)&1), i); } return r; }

		// void set_bounds(int axe, int min_, int max_){ bounds &= ~(0xF<<(4*(D-axe-1))); bounds |= ((min_|(max_<<2))&0xF)<<(4*(D-axe-1)); }
	};
	//--------------------------------------------------------------------------
#define UsingBaseMeshAttributes											\
	protected:															\
	using BaseMesh<D, A>::sz;											\
	using BaseMesh<D, A>::box;											\
public:																	\
    using BaseMesh<D, A>::head;											\
	using BaseMesh<D, A>::anames;										\
	using BaseMesh<D, A>::bmin;											\
	using BaseMesh<D, A>::bmax;											\
	using BaseMesh<D, A>::step;											\
	using BaseMesh<D, A>::rstep;										\
	using BaseMesh<D, A>::logscale;										\
	using BaseMesh<D, A>::periodic;										\
	using BaseMesh<D, A>::interp;					
	// using BaseMesh<D>::bounds;
	//--------------------------------------------------------------------------
}
#endif //AIW_BASE_MESH_HPP
