// -*- C++ -*-
#ifndef AIW_MESH_HPP
#define AIW_MESH_HPP

/**
 * Copyright (C) 2016-17, 2020-22 Antov V. Ivanov  <aiv.racs@gmail.com>
 * Licensed under the Apache License, Version 2.0
 **/

// #ifndef SWIG
#include <type_traits>
#include <utility>
#include <typeinfo>

// #endif //SWIG
#include "op_traits"
#include "iostream"
#include "vec"
#include "binaryio"
#include "interpolations"
#include "base_mesh"
#include "binhead"

namespace aiw{
	//--------------------------------------------------------------------------
#ifndef SWIG
	struct BaseMeshOp{};
#endif //SWIG
	template <typename T, int D, typename A=float> class Mesh: public aiw::BaseMesh<D, A>
#ifndef SWIG
		, BaseMeshOp
#endif //SWIG
	{
#ifndef SWIG
	protected:
		std::shared_ptr<BaseAlloc> mem;
		void *ptr;           // указатель на элемент с позицией Ind(0,0...)
		Ind<D> axis;         // порядок следования осей ???
		Vec<D, int64_t> mul; // то на что умножается pos в адресной арифметике
		template <typename T2, int D2, typename A2> friend class Mesh;
		UsingBaseMeshAttributes

		// friend class MeshView;
#endif //SWIG
	public:		
		typedef T cell_type;
		// static const int dim = D;
		/*
#ifndef SWIG
		[[deprecated]] T out_value;
#endif //SWIG
		*/
		static const int sizeof_cell_type = sizeof(T);
		
		size_t mem_size() const { return mem->get_size(); }
		size_t mem_sizeof() const { return mem->get_sizeof(); }

	protected:
		size_t sz_init(const aiw::Ind<D> &box_); // box and mul init, not allocate memory 		  
		template <typename AA> void init_(const aiw::Ind<D> &box_, aiw::Vec<D, AA> bmin_, aiw::Vec<D, AA> bmax_, int logscale_, int align){
		 	ptr = init_mem_ptr<T>(mem, sz_init(box_), align); this->set_axis(bmin_, bmax_, logscale_);
		}
	public:
		void init(const aiw::Ind<D> &box_, aiw::Vec<D> bmin_,  aiw::Vec<D> bmax_,  int logscale_=0, int align=0){ init_(box_, bmin_, bmax_, logscale_, align); }
		void init(const aiw::Ind<D> &box_, aiw::Vecf<D> bmin_, aiw::Vecf<D> bmax_, int logscale_=0, int align=0){ init_(box_, bmin_, bmax_, logscale_, align); }
		/* 
		void init_c(const aiw::Ind<D> &box_, aiw::Vec<D> bmin_,  aiw::Vec<D> bmax_,  int logscale_=0, int align=0){
			Vec<D> d = (bmax_-bmin_)/box_; init_(box_, bmin_-d/2, bmax_+d/2, logscale_, align);
			} 
		void init_c(const aiw::Ind<D> &box_, aiw::Vecf<D> bmin_, aiw::Vecf<D> bmax_, int logscale_=0, int align=0){
			Vecf<D> d = (bmax_-bmin_)/box_; init_(box_, bmin_-d/2, bmax_+d/2, logscale_, align);
			} 
		void init(const aiw::Ind<D> &box_, aiw::Vec<D, A> bmin_, aiw::Vec<D, A> bmax_, int logscale_=0, int align=0){
			ptr = init_mem_ptr<T>(mem, sz_init(box_), align); this->set_axis(bmin_, bmax_, logscale_);
		}
		*/
		void init(const aiw::Ind<D> &box_, int align=0){ init(box_, Vec<D, A>(), box_, 0, align); }
		void init(const aiw::Mesh<T, D, A> &M){ init(M.bbox(), M.bmin, M.bmax, M.logscale); }
#ifndef SWIG
		template <typename T2, typename A2> void init(const Mesh<T2, D, A2> &M){ init_(M.box(), M.bmin(), M.bmax(), M.logscale); }
		//----------------------------------------------------------------------		
		void dump(aiw::IOstream &&S) const; //???оптимизировать для простых случаев???
		bool load(aiw::IOstream &&S, int use_mmap=0, bool raise_on_error=true, int align=0); // mmap = 0 - not use, 1 - readonly, 2 - rw
#endif //SWIG
		void dump(aiw::IOstream &S) const { dump(std::move(S)); }
		bool load(aiw::IOstream &S, int use_mmap=0, bool raise_on_error=true){ // mmap = 0 - not use, 1 - readonly, 2 - rw 
			return load(std::move(S), use_mmap, raise_on_error); 
		}
		//----------------------------------------------------------------------		
#ifndef SWIG		
		const T& at(const aiw::Ind<D> &pos) const { WASSERT(Ind<D>()<=pos && pos<box, "pos out of box", pos, box); return *((const T*)((const char*)ptr+mul*pos)); }
		      T& at(const aiw::Ind<D> &pos)       { WASSERT(Ind<D>()<=pos && pos<box, "pos out of box", pos, box); return       *((T*)((const char*)ptr+mul*pos)); }

		const T& operator [] (aiw::Ind<D> p) const { this->check_out_pos(p); return at(p); }
		      T& operator [] (aiw::Ind<D> p)       { this->check_out_pos(p); return at(p); }
		// const T& operator [] (const aiw::Vec<D, A> &r) const { return (*this)[this->coord2pos(r)]; }
		//      T& operator [] (const aiw::Vec<D, A> &r)       { return (*this)[this->coord2pos(r)]; }
		const T& operator [] (const aiw::Vec<D> &r) const { return (*this)[this->coord2pos(r)]; }
		      T& operator [] (const aiw::Vec<D> &r)       { return (*this)[this->coord2pos(r)]; }
		const T& operator [] (const aiw::Vecf<D> &r) const { return (*this)[this->coord2pos(r)]; }
		      T& operator [] (const aiw::Vecf<D> &r)       { return (*this)[this->coord2pos(r)]; }

		template <typename ... Args>       T& ind(Args ... pos)       { return (*this)[Ind<D>(pos...)]; }
		template <typename ... Args> const T& ind(Args ... pos) const { return (*this)[Ind<D>(pos...)]; }
		template <typename ... Args>       T& vec(Args ... coord)       { return (*this)[Vec<D, A>(coord...)]; }
		template <typename ... Args> const T& vec(Args ... coord) const { return (*this)[Vec<D, A>(coord...)]; }
#endif // SWIG
		const T& __getitem__(const aiw::Ind<D> &p) const { return (*this)[p]; }
		// const T& __getitem__(const aiw::Vec<D, A> &r) const { return (*this)[r]; }
		const T& __getitem__(const aiw::Vec<D> &r) const { return (*this)[r]; }
		const T& __getitem__(const aiw::Vecf<D> &r) const { return (*this)[r]; }
		void __setitem__(const aiw::Ind<D> &p, const T& v){ (*this)[p] = v; }
		// void __setitem__(const aiw::Vec<D, A> &r, const T& v){ (*this)[r] = v; }
		void __setitem__(const aiw::Vec<D> &r, const T& v){ (*this)[r] = v; }
		void __setitem__(const aiw::Vecf<D> &r, const T& v){ (*this)[r] = v; }
		//----------------------------------------------------------------------
#ifndef SWIG
	private:
		template <typename U = T, typename std::enable_if<has_T_mul_double<U>(nullptr), int>::type = 0> U interp_impl(const aiw::Vec<D, A> &r) const {
			Ind<D> pos; Vec<D, A> x;
			for(int i=0; i<D; ++i){
				A c = this->coord2cell(r[i], i);
				if(interp&(0xF<<(4*(D-i-1)))){ pos[i] = std::floor(c-.5); x[i] = c-pos[i]-.5; }
				else pos[i] = std::floor(c); // logscale&1<<i ? log(r[i]/bmin[i])*rstep[i] :(r[i]-bmin[i])*rstep[i];
			}
			return interpolate(*this, pos, x, interp);
		}
		template <typename U = T, typename std::enable_if<!has_T_mul_double<U>(nullptr), int>::type = 0> U interp_impl(const aiw::Vec<D, A> &r) const { return (*this)[r]; }
	public:
#endif //SWIG
		T operator ()(const aiw::Vec<D, A> &r) const { return interp_impl(r); }
		
		//----------------------------------------------------------------------
		aiw::Ind<D> first() const { return Ind<D>(); }
		bool next(aiw::Ind<D> &pos) const { ++pos; return pos^=box; }
		//----------------------------------------------------------------------
		Mesh copy(int align=0) const { Mesh M; M.init(box, align); for(Ind<D> pos; pos^=box; ++pos){ M[pos] = (*this)[pos]; } return M; }		
		Mesh flip(int a, bool axe=true) const {
			Mesh M(*this); Ind<D> I; I[a] = box[a]-1; M.ptr = (void*)&((*this)[I]); M.mul[a] = -mul[a];
			if(axe) M.flip_axe(a);
			return M;
		}
	private:
		template <typename T2, int D2, typename A2> void set_axe(int a, const Mesh<T2, D2, A2> &M, int m);
	public:
		Mesh transpose(int a, int b) const { Mesh M(*this); M.set_axe(b, *this, a); M.set_axe(a, *this, b); return M; }
		//----------------------------------------------------------------------
		Mesh crop(aiw::Ind<D> a, aiw::Ind<D> b, aiw::Ind<D> d=Ind<D>(1)) const;
		//----------------------------------------------------------------------
		//  Mesh scale(aiw::Ind<D> new_sz, bool antialiasing=false) const {}
		//----------------------------------------------------------------------
		template <class T2, int D2> Mesh<T2, D2, A> slice(aiw::Ind<D> pos, size_t offset_in_cell) const;
		template <int D2> Mesh<T, D2, A> slice(aiw::Ind<D> pos) const { return slice<T, D2>(pos, 0); }
		//----------------------------------------------------------------------
#ifndef SWIG
		template <int DV> Mesh<Vec<DV, T>, D-1, A> vectorize(int axe=0) const;
		// unvectorize ???
		//----------------------------------------------------------------------
		// coords содержит режимы вывода для каждой из координатных осей: 
		//    0 --- выводить значения из сетки вдоль оси в одну строку через пробел
		//    1 --- выводить номер ячейки
		//    2 --- выводить координату центра ячейки
		//    3 --- не выводить ни номер ячейки ни координату центра ячейки
		//   +4 --- не выводить пустую строку при изменении номера ячейки, не влияет на режим 0
	private:
		template <typename S> void out2dat_impl(S &&str, aiw::Ind<D> coords, const char* prefix) const; // , aiw::Ind<D> order=Ind<D>() ???
	public:
		template <typename U = T, typename std::enable_if<has_std_ostream_lshift_T<U>(nullptr), int>::type = 0>
		void out2dat(std::ostream &&str, aiw::Ind<D> coords=aiw::Ind<D>(2), const char* prefix=nullptr) const { out2dat_impl(str, coords, prefix); }
		template <typename U = T, typename std::enable_if<has_aiw_IOstream_lshift_T<U>(nullptr), int>::type = 0>
		void out2dat(aiw::IOstream &&str, aiw::Ind<D> coords=aiw::Ind<D>(2), const char* prefix=nullptr) const { out2dat_impl(str, coords, prefix); }
		template <typename U = T, typename std::enable_if<!has_std_ostream_lshift_T<U>(nullptr), int>::type = 0>
		void out2dat(std::ostream &&str, aiw::Ind<D> coords=aiw::Ind<D>(2), const char* prefix=nullptr) const {
			std::cerr<<"[\033[31;1;5mFor call method Mesh<T="<<typeid(T{}).name()<<", D="<<D<<">::out2dat(...) you need operator << (std::ostream&, T)'\033[0m]\n";
		}
		template <typename U = T, typename std::enable_if<!has_aiw_IOstream_lshift_T<U>(nullptr), int>::type = 0>
		void out2dat(aiw::IOstream &&str, aiw::Ind<D> coords=aiw::Ind<D>(2), const char* prefix=nullptr) const {
			std::cerr<<"[\033[31;1;5mFor call method Mesh<T="<<typeid(T{}).name()<<", D="<<D<<">::out2dat(...) you need operator << (aiw::IOstream&, T)'\033[0m]\n";
		}
#endif //SWIG
		void out2dat(std::ostream &str=std::cout, aiw::Ind<D> coords=aiw::Ind<D>(2), const char* prefix=nullptr) const { out2dat(std::move(str), coords, prefix); }
		void out2dat(aiw::IOstream &str, aiw::Ind<D> coords=aiw::Ind<D>(2), const char* prefix=nullptr) const { out2dat(std::move(str), coords, prefix); }
		//----------------------------------------------------------------------
#ifndef SWIG
	private:
		template <typename U = T, typename std::enable_if<(has_T_less_T<U>(nullptr) && has_T_more_T<U>(nullptr)), int>::type = 0> 
		bool min_max_impl(T &a, T &b, aiw::Ind<D> &pos_a, aiw::Ind<D> &pos_b) const {
			Ind<D> pos = first(); bool is_ok = false;
			do {
				const T& x = (*this)[pos]; if(is_bad_value(x)) continue;
				if(!is_ok || a>x){ a = x; pos_a = pos; }
				if(!is_ok || b<x){ b = x; pos_b = pos; }
				is_ok = true; 
			} while(next(pos));
			return is_ok;
		}
		template <typename U = T, typename std::enable_if<!(has_T_less_T<U>(nullptr) && has_T_more_T<U>(nullptr)), int>::type = 0> 
		bool min_max_impl(T &a, T &b, aiw::Ind<D> &pos_a, aiw::Ind<D> &pos_b) const { return false; }
	public:
		bool min_max(T &a, T &b, aiw::Ind<D> &pos_a, aiw::Ind<D> &pos_b) const { return min_max_impl(a, b, pos_a, pos_b); }
#endif //SWIG
		aiw::Vec<2, T> min_max() const { aiw::Vec<2, T> res; aiw::Ind<D> pos_a, pos_b; this->min_max(res[0], res[1], pos_a, pos_b); return res; }
		//----------------------------------------------------------------------
		void fill(const T &x){ Ind<D> pos = first(); do (*this)[pos] = x; while(next(pos)); }
		template <typename T2> void fill(const Mesh<T2, D> &M){	Ind<D> up = box<<M.box; for(Ind<D> pos; pos^=up; ++pos) (*this)[pos] = M[pos];	}
		void fill(const Mesh &M){ Ind<D> up = box<<M.box; for(Ind<D> pos; pos^=up; ++pos) (*this)[pos] = M[pos]; }
		//----------------------------------------------------------------------
		// operators +, -, *, /, % etc?

		std::string __getstate__() const;
		void __C_setstate__(const std::string &state);
		static const bool _racs_pull_lock = true;
		size_t __sizeof__() const { return sizeof(Mesh) + head.size() + (mem?mem->get_size()*mem->get_sizeof():0); }
		//----------------------------------------------------------------------
		Mesh(){}
		Mesh(aiw::Ind<D> bbox_, int align=0){ init(bbox_, align); }
		Mesh(aiw::Ind<D> bbox_, T f, int align=0){ init(bbox_, align); fill(f); }
		Mesh(aiw::Ind<D> bbox_, aiw::Vec<D> bmin_, aiw::Vec<D> bmax_, int logscale_=0, int align=0){
			init(bbox_, bmin_, bmax_, logscale_, align);
		}
		Mesh(aiw::Ind<D> bbox_, T f, aiw::Vec<D> bmin_, aiw::Vec<D> bmax_, int logscale_=0, int align=0){
			init(bbox_, bmin_, bmax_, logscale_, align); fill(f);
		}		
		Mesh(aiw::Ind<D> bbox_, aiw::Vecf<D> bmin_, aiw::Vecf<D> bmax_, int logscale_=0, int align=0){
			init(bbox_, bmin_, bmax_, logscale_, align);
		}
		Mesh(aiw::Ind<D> bbox_, T f, aiw::Vecf<D> bmin_, aiw::Vecf<D> bmax_, int logscale_=0, int align=0){
			init(bbox_, bmin_, bmax_, logscale_, align); fill(f);
		}		
		//----------------------------------------------------------------------
#ifndef SWIG		
		struct iterator{
			Mesh<T, D> *data = nullptr;
			Ind<D> pos;

			T& operator * (){ return (*data)[pos]; }
			const T& operator * () const { return (*data)[pos]; }
			iterator & operator ++ (){ ++pos^=data->bbox(); return *this; } // data->next() ???

			T& operator ()(const Ind<D> &offset){ return (*data)[pos+offset]; }
			const T& operator ()(const Ind<D> &offset) const { return (*data)[pos+offset]; }
			template <typename ... Args> T& at(Args ... offset){ return (*data)[pos+Ind<D>(offset...)]; }
			template <typename ... Args> const T& at(Args ... offset) const { return (*data)[pos+Ind<D>(offset...)]; }

			bool operator == (const iterator &other) const { return data==other.data && pos==other.pos; }
			bool operator != (const iterator &other) const { return data!=other.data || pos!=other.pos; }
		};
		iterator begin(){ iterator I; I.data = this; return I; }
		iterator end(){ iterator I; I.data = this; I.pos[D-1] = box[D-1]; return I; }
		const iterator begin() const {  iterator I; I.data = (Mesh*)this; return I; }
		const iterator end() const {  iterator I; I.data = (Mesh*)this; I.pos[D-1] = box[D-1]; return I; }
		T* data(){ return (T*)ptr; } // ???
#endif //SWIG

		void swap(Mesh &B){ Mesh C = *this; *this = B; B = C; }
	};
	//--------------------------------------------------------------------------
	// template <typename T, int D> aiw::IOstream& operator < (aiw::IOstream &S, const aiw::Mesh<T, D> &M){ M.dump(S); return S; }
	// template <typename T, int D> aiw::IOstream& operator > (aiw::IOstream &S,       Mesh<T, D> &M){ M.load(S); return S; }
	//--------------------------------------------------------------------------
	/*
	template <typename T, int D> void dump_mesh(aiw::IOstream &S, aiw::Ind<D> box, const T* data, std::string head="",
												aiw::Vec<D> bmin=Vec<D>(), aiw::Vec<D> bmax=Vec<D>(), int logscale=0){
		if(bmin==bmax){ bmin = Vec<D>(); bmax = box; }
		int h_sz = head.size()+5+D*16+sizeof(T); if((12+4*D+h_sz)%64) h_sz += 64-(12+4*D+h_sz)%64;			
		char h[h_sz] = {0}; memcpy(h, head.c_str(), head.size()); memcpy(h+h_sz-4-D*16-sizeof(T), &out_value, sizeof(T));
			memcpy(h+h_sz-4-D*16, &bmin, D*8); memcpy(h+h_sz-4-D*8, &bmax, D*8); memcpy(h+h_sz-4, &logscale, 4);
			S<h_sz; S.write(h, h_sz); S<D<int(sizeof(T))<box;
			for(Ind<D> pos; pos^=box; ++pos) S<(*this)[pos]; // S.write(&(*this)[pos], sizeof(T));  
			}*/
	//--------------------------------------------------------------------------
#include "mesh_impl"
}
#endif //AIW_MESH_HPP
