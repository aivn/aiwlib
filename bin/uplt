#!/usr/bin/python
# -*- mode: Python; coding: utf-8 -*-
'''usage: uplt files...

Copyright (C) 2017-20  Antov V. Ivanov  <aiv.racs@gmail.com>
Licensed under the Apache License, Version 2.0'''

import os, sys, math, PIL.Image, PIL.ImageTk, tkSimpleDialog, cPickle, time
from aiwlib.tkPlot2D import *
from aiwlib.tkConfView import *
from aiwlib.iostream import *
from aiwlib.vec import *

#-------------------------------------------------------------------------------
class NameSpace:
    def __init__(self, **kw_args):
        try: self.__dict__.update(cPickle.load(open(os.path.dirname(kw_args['fname'])+'/.RACS')))
        except: pass
        self.__dict__.update(kw_args)
    def __getitem__(self, key): return eval(key, math.__dict__, self.__dict__)
#-------------------------------------------------------------------------------
eps2val = lambda V, v, logscale: (V[0]**(1+(log(V[1])/log(V[0])-1)*v) if logscale else V[0]+(V[1]-V[0])*v) # это дублирование кода, надо ее куда то убратьп60
def hide_on_pal_move(self): self.delete('pal_move')
def hide_on_msh_move(self): self.delete('msh_move')
def show_on_pal_move(self, xy, xy0, xy1):
    self.delete('pal_move')
    tfont = content.settings.get_font()
    v, V = float(xy1[1]-xy[1])/(xy1[1]-xy0[1]), content.color.get_limits()
    text = '%g'%(V[0]**(1+(log(V[1])/log(V[0])-1)*v) if content.color.logscale.get() else V[0]+(V[1]-V[0])*v)
    #text = '%g'%eps2val(V, v, f_logscale.get())
    self.create_text(xy0[0], xy[1], text=text, anchor='e', font=tfont, tag='pal_move', fill='gray')
    self.create_line(xy0[0], xy[1], xy1[0], xy[1], fill='gray', tag='pal_move')
            
def move_select(self, x, y): self.delete('select'); self.create_rectangle(self._left_press, (x,y), outline='gray', tag='select')
def final_select_image(self, x, y):
    self.delete('select')
    if [x,y]==self._left_press: content.conf.uncrop(); content.replot(); return    # double click
    sel0, sel1 = self.sel_xy2coord(*self._left_press), self.sel_xy2coord(x, y) 
    if sel0[0]>sel1[0]: sel0[0], sel1[0] = sel1[0], sel0[0]
    if sel0[1]>sel1[1]: sel0[1], sel1[1] = sel1[1], sel0[1]
    content.conf.crop(vec(*sel0), vec(*sel1))
    content.replot()
def final_select_preview(self, x, y):
    self.delete('select')
    if [x,y]==self._left_press: content.conf.uncrop(); content.replot(); return # double click    
    sel0, sel1 = self.sel_xy2coord(*self._left_press), self.sel_xy2coord(x, y) 
    if sel0[0]>sel1[0]: sel0[0], sel1[0] = sel1[0], sel0[0]
    if sel0[1]>sel1[1]: sel0[1], sel1[1] = sel1[1], sel0[1]
    content.conf.uncrop(); content.conf.crop(vec(*sel0), vec(*sel1))
    content.replot()

#def preview_left(self, x, y): crop_axes.set(0); replot()

def final_select_pal(self, x, y):
    self.delete('select')
    A, B = [self.picts['pal'][i][1] for i in (0,1)]
    a, b, V = self._left_press[1], y, content.color.get_limits()
    if a==b: content.color.autoscale.set(1); content.color.replot(); return # double click
    a, b = [eps2val(V, (B-x)/(B-A), content.color.logscale.get()) for x in a, b]
    if a>b: a, b = b, a
    content.color.set_limits(a, b)
#def pal_left(self, x, y): f_autoscale.set(1); replot(); print 'pal left'
#-------------------------------------------------------------------------------
mouse_right_cmd = ''
def mouse_right_sph(self, xy, xy0, xy1): # плагин для расширения показа сферы
    if mollweide.get() or not mouse_right_cmd: return
    eps = float(xy[0]-xy0[0])/(xy1[0]-xy0[0]), float(xy1[1]-xy[1])/(xy1[1]-xy0[1])
    sph = data[file_num.get()][1][fr_num.get()]
    phi, th = [eps2val(([-pi, pi][i], [pi, 0][i]), eps[i], False) for i in (0,1)]
    r = vec(cos(phi)*sin(th), sin(phi)*sin(th), cos(th))
    D = {'r':r, 'v':sph[r], 'cID':sph.find(r), 'cr':sph.center(sph.find(r)), 'phi':phi, 'theta':th, 'fname':data[file_num.get()][0],
         'name':os.path.basename(data[file_num.get()][0]), 'frame':fr_num.get(), 'rank':sph.rank(), 'head':sph.head, 'path':os.path.dirname(data[file_num.get()][0])}
    if mouse_right_cmd[0]=='$': os.system(mouse_right_cmd[1:]%D)
    else: exec(mouse_right_cmd, globals(), D)
#-------------------------------------------------------------------------------
class Content:
    def __init__(self, flist):
        self.data, self.ifile, self.iframe, self.max_dim = [], 0, 0, 0
        for fname in flist:
            if os.path.exists(fname): self.data.append([fname])
            else: continue
            fin, t0 = File(fname, 'r'), time.time()
            while 1:
                msh, sph, amr = MeshView(), SphereView(), AdaptiveMeshView() # ...
                if   msh.load(fin): self.data[-1].append(msh)
                elif sph.load(fin): self.data[-1].append(sph)
                elif amr.load(fin): self.data[-1].append(amr)
                else: break
                self.max_dim = max(self.max_dim, self.data[-1][-1].dim()) 
            if len(self.data[-1])==1: del self.data[-1]; print fname, 'skipped'
            else: print fname, 'load', len(self.data[-1])-1, 'frames, %g sec'%(time.time()-t0)
        if not self.data: print 'not input files\n', __doc__; sys.exit()
        self.conf = ConfView(); self.data[0][1].get_conf(self.conf, True)
        if self.conf.cfa_list: self.conf.cfa = self.conf.cfa_list[0]
        else: self.conf.cfa.typeID, self.conf.cfa.offset = 0, 0
    def f_min_max(self): return tuple(self.data[self.ifile][self.iframe+1].f_min_max(self.conf))
    def replot(self, *args):
        if self.color.autoscale.get(): self.color.calc_min_max()
        self.animate.config_scrolls()
        if self.animate.on_replot(): wroot.after_idle(self.frame_replot if self.animate.atype.get()=='frame'
                                                      else self.file_replot if self.animate.atype.get()=='file'
                                                      else self.main.slice_replot)
        self.plot_preview(); self.plot_canvas()
    def plot_preview(self): #<<< считаем что все уже настроено, просто перерисовываем
        self.preview.delete('all')
        self.preview.mouse_clear()
        if self.conf.features&self.conf.opt_mollweide: return
        self.preview.add_pict('test', (0,0), (panel_sz, panel_sz), (lambda im: self.data[self.ifile][self.iframe+1].preview(self.conf, im, self.color.get())))
        self.preview.create_text(3,3, text=self.conf.name_y(), fill='grey', anchor=NW)
        self.preview.create_text(panel_sz-3, panel_sz-3, text=self.conf.name_x(), fill='grey', anchor=SE)
        self.preview.create_text(3, panel_sz-3, text='(%g,%g)'%tuple(self.conf.min_xy0()), fill='grey', anchor=SW)
        self.preview.create_text(panel_sz-3,3, text='(%g,%g)'%tuple(self.conf.max_xy0()), fill='grey', anchor=NE)
        # это     if self.conf.logscale_x(): self.preview.create_text(panel_sz/2,panel_sz-3, text='logscale', fill='grey', anchor=S)
        # лишнее? if self.conf.logscale_y(): self.preview.create_text(3,panel_sz/2, text='logscale', fill='grey', anchor=W)        
        box = (self.conf.max_xy0()-self.conf.min_xy0())/panel_sz
        rect = (self.conf.min_xy()-self.conf.min_xy0())/box, (self.conf.max_xy()-self.conf.min_xy0())/box
        self.preview.create_rectangle(rect[0][0], panel_sz-rect[0][1], rect[1][0], panel_sz-rect[1][1],  outline='gray', tag='select')

        if not self.conf.features&self.conf.opt_mollweide: self.preview.mouse_select((0,0), (panel_sz,panel_sz), move_select, final_select_preview)
    def plot_canvas(self, csz=None): #<<< считаем что все уже настроено, просто перерисовываем
        t0 = time.time()
        tfont = self.settings.get_font()
        sz, pw, th, xh = csz if csz else self.canvas.wsize(), self.settings.pal_xsz.get(), 2*tfont[1], 2*tfont[1]+5
        self.canvas.delete('all')
        #if color.magn: msh0.interp = msh.interp = 0; pw = 0

        if sz==(1,1): sz = (900,900)
        pw = int(self.canvas.plot_pal(tag='pal', paletter=self.color.get_pal(), orient=1, xyN=(sz[0], th, sz[1]-th-xh), side=1, pal_sz=pw,
                                      limits=self.color.get_limits(), logscale=self.color.logscale.get(),
                                      **self.settings.get())*1.1) if pw else 10
        pw = max(pw, len(self.settings.x_label.get())*tfont[1])
        yw = self.canvas.add_tics(tag='Y', orient=1, xyN=(0,th, sz[1]-th-xh), side=0, limits=self.conf.lim(1),
                                  logscale=self.conf.get_logscale(1), **self.settings.get())
        
        self.canvas.add_tics(tag='X', orient=0, xyN=(yw, sz[1]-xh, sz[0]-yw-pw), side=0, limits=self.conf.lim(0),
                             logscale=self.conf.get_logscale(0), **self.settings.get())
        self.canvas.add_pict('img', (yw,th),  (sz[0]-pw,sz[1]-xh),
                             (lambda im: self.data[self.ifile][self.iframe+1].plot(self.conf, im, self.color.get())),
                             border=self.settings.border.get())
        self.canvas._XY0, self.canvas._XY1 = (yw,th), (sz[0]-pw,sz[1]-xh)

        ns = NameSpace(conf=self.conf, X=self.conf.name_x(), Y=self.conf.name_y(), fname=self.data[self.ifile][0], frame=self.iframe,
                       head=self.data[self.ifile][self.iframe+1].head)
        self.canvas.create_text((yw+sz[0]-pw)/2, th, text=self.settings.title.get()%ns, anchor='s', font=tfont)
        self.canvas.create_text(sz[0], sz[1], text=self.settings.x_label.get()%ns, anchor='se', font=tfont)
        self.canvas.create_text(0, th, text=self.settings.y_label.get()%ns, anchor='sw', font=tfont)
        self.canvas.create_text(sz[0], th, text=self.settings.z_label.get()%ns, anchor='se', font=tfont)

        self.canvas.mouse_clear()
        if not self.conf.features&self.conf.opt_mollweide:  self.canvas.mouse_select((yw,th),  (sz[0]-pw,sz[1]-xh), move_select, final_select_image)
        else: self.canvas.mouse_right((yw,th),  (sz[0]-pw,sz[1]-xh), mouse_right_sph) # это плагин для сферы, надо его сделать общим
        self.canvas.mouse_select((sz[0]-self.settings.pal_xsz.get(),th), (sz[0],sz[1]-xh), move_select, final_select_pal, 'x')
        self.canvas.mouse_move((sz[0]-self.settings.pal_xsz.get(),th), (sz[0],sz[1]-xh), (show_on_pal_move, hide_on_pal_move))
        self.canvas.mouse_move((yw,th), (sz[0]-pw,sz[1]-xh), (self.show_on_msh_move, hide_on_msh_move))
        #print 'plot_canvas %g sec'%(time.time()-t0)
    def frame_replot(self, *args):
        self.iframe = self.main.frame_num.get()
        wroot.title('uplt: %r[%i]'%(self.data[self.ifile][0], self.iframe))
        self.data[self.ifile][self.iframe+1].get_conf(self.conf)
        self.main.update(self.conf)
        self.replot()
    def file_replot(self, *args):
        self.ifile = self.main.file_num.get()
        if self.iframe>len(self.data[self.ifile])-2: self.iframe = len(self.data[self.ifile])-2
        wroot.title('uplt: %r[%i]'%(self.data[self.ifile][0], self.iframe))
        self.data[self.ifile][self.iframe+1].get_conf(self.conf)
        self.main.update(self.conf)
        self.replot()
    #---------------------------------------------------------------------------
    def show_on_msh_move(self, C, xy, xy0, xy1): #канвас, координаты и координаты углов?
        C.delete('msh_move')
        if self.conf.mollweide: return
        C.create_line(xy0[0], xy[1], xy1[0], xy[1], fill='gray', tag='msh_move') # горизонтальная линия
        C.create_line(xy[0], xy0[1], xy[0], xy1[1], fill='gray', tag='msh_move') # вертикальная линия, для моллвейде это не так?
        r = self.conf.xy2r(vec(float(xy[0]-xy0[0])/(xy1[0]-xy0[0]), float(xy1[1]-xy[1])/(xy1[1]-xy0[1]))) # относительные координаты в окне и координаты на сетке

        tfont = self.settings.get_font()
        C.create_text(xy[0], xy1[1]+3, text='%g'%r[0], anchor='n', font=tfont, tag='msh_move', fill='red')
        C.create_text(0, xy[1], text='%g'%r[1], anchor='w', font=tfont, tag='msh_move', fill='red')        
        #if self.sph:
        #    r *= pi/180; r3 = vec(cos(r[0])*sin(r[1]), sin(r[0])*sin(r[1]), cos(r[1]))
        #    v, cid = self.msh[r3], self.msh.find(r3)            
        #v, cid = self.data[self.ifile][self.iframe+1].get(self.conf, r), self.data[self.ifile][self.iframe+1].coord2pos(self.conf, r)
        #C.create_text(xy[0], xy[1], text='%g\n[%s]'%(v, cid), anchor='e', font=tfont, tag='msh_move', fill='gray')
        v = '%g'%self.data[self.ifile][self.iframe+1].get(self.conf, r)
        #C.create_text(xy[0], xy[1], text='%g'%v, anchor='e', font=tfont, tag='msh_move', fill='gray')
        C.create_rectangle(xy[0]-int(len(v)*tfont[1]*.8), xy[1], xy[0], xy[1]+int(tfont[1]*1.3),  tag='msh_move', fill='white') #, alpha=.5)
        C.create_text(xy[0], xy[1], text=v, anchor='ne', font=tfont, tag='msh_move')
#-------------------------------------------------------------------------------
#  main widgets
#-------------------------------------------------------------------------------
content = Content(sys.argv[1:])
panel_sz = 211
wroot = Tk(); panel0 = Frame(wroot, width=panel_sz)
content.canvas = Plot2D(wroot, width=900, height=900, background='white')
content.preview = Plot2D(panel0, width=panel_sz, height=panel_sz, background='white'); content.preview.pack(side=BOTTOM) # on panel
panel0.grid(row=0, column=0, sticky=NSEW)
content.canvas.grid(row=0, column=1, sticky=NSEW)
wroot.columnconfigure(1, weight=1)
wroot.rowconfigure(0, weight=1)

panel = Frame(panel0, width=panel_sz); panel.pack(side=TOP)
content.animate = SaveAnimate(panel, content)
content.color = ColorConf(panel, content)
content.main = MainConf(panel, panel_sz, content)
content.settings = PlotConf(panel, content)
#-------------------------------------------------------------------------------
wroot.title('uplt')
wroot.bind('<plus>', lambda e: content.color.scale_limits(2.5))
wroot.bind('<minus>', lambda e: content.color.scale_limits(.5))
wroot.bind('<equal>', lambda e: content.color.scale_limits(2.5))
wroot.bind('[', lambda e: content.color.scale_limits(-1))
wroot.bind(']', lambda e: content.color.scale_limits(1))
wroot.bind('\\', lambda e: content.color.scale_limits(0))
wroot.bind('a', lambda e: (content.color.autoscale.set(not content.color.autoscale.get()), content.color.replot()))
wroot.bind('l', lambda e: (content.color.logscale.set(not content.color.logscale.get()), content.color.replot()))
#wroot.bind('i', lambda e: (content.color.invert.set(not content.color.invert.get()), content.color.replot()))
wroot.bind('s', content.animate.save_image)
wroot.bind('r', lambda e: (content.animate.run.set(not content.animate.run.get()), content.animate.run_animate()))
wroot.bind('<Up>', content.animate.prev_scroll) 
wroot.bind('<Down>', content.animate.next_scroll) 
wroot.bind('<Left>', lambda e: content.animate.move_scroll(-1)) 
wroot.bind('<Right>', lambda e: content.animate.move_scroll(1)) 
wroot.bind('<Prior>', lambda e: content.animate.move_scroll(-10)) #PgUp
wroot.bind('<Next>', lambda e: content.animate.move_scroll(10))   #PgDown
wroot.bind('x', lambda e: content.main.next_axe(0)) 
wroot.bind('<Alt-x>', lambda e: content.main.prev_axe(0)) 
wroot.bind('c', lambda e: content.main.next_axe(1)) 
wroot.bind('<Alt-c>', lambda e: content.main.prev_axe(1)) 
wroot.bind('q', lambda e: content.main.next_interp(0)) 
wroot.bind('<Alt-q>', lambda e: content.main.prev_interp(0)) 
wroot.bind('w', lambda e: content.main.next_interp(1)) 
wroot.bind('<Alt-w>', lambda e: content.main.prev_interp(1)) 
wroot.bind('f', lambda e: (content.main.flip[0].set(not content.main.flip[0].get()), content.main.flip_replot())) 
wroot.bind('<Alt-f>', lambda e: (content.main.flip[1].set(not content.main.flip[1].get()), content.main.flip_replot())) 
wroot.bind('b', lambda e: (content.main.cell_bound.set(not content.main.cell_bound.get()), content.main.cell_bound_replot())) 
wroot.bind('i', lambda e: (content.main.sph_interp.set(not content.main.sph_interp.get()), content.main.sph_replot())) 
wroot.bind('m', lambda e: (content.main.mollweide.set(not content.main.mollweide.get()), content.main.sph_replot())) 
#wroot.bind('<space>', lambda e: content.main.axes_menu[0].focus_set()) 
content.canvas.bind('<Configure>', lambda e: content.plot_canvas((e.width, e.height)))


#def on_left(e): print e.__dict__, repr(wroot.focus_displayof())
#wroot.bind('<Left>', on_left)
content.animate.tmpdir = '/tmp/uplt-%s/'%os.getpid(); os.mkdir(content.animate.tmpdir); print 'temporary path', content.animate.tmpdir
childs = '/tmp/uplt-%s.childs'%os.getpid()
#-------------------------------------------------------------------------------
if os.path.exists('.uplt'): print 'load configfile ./.uplt ...'; execfile('.uplt')
elif os.path.exists(os.path.expanduser('~/.uplt')): print 'load configfile ~/.uplt ...'; execfile(os.path.expanduser('~/.uplt'))

print '''
горячие клавиши:
   <+>,<=>/<-> --- расширить/сжать пределы по значению
       <[>/<]> --- установить верхний/нижний предел нулем 
           <\\> --- симметризовать пределы относительно нуля
           <a> --- включить/выключить автошкалирование по значению
           <l> --- включить/выключить логарифмический масштаб
           <s> --- сохранить изображение
           <r> --- запустить/остановить анимацию
   <Up>/<Down> --- выбрать ползунок для анимации
<Left>/<Right> --- подвинуть выбранный ползунок на +/-1 пункт
<PgUp>/<PgDwn> --- подвинуть выбранный ползунок на +/-10 пунктов
   <x>/<Alt-x> --- выбор оси X для отображения
   <c>/<Alt-c> --- выбор оси Y для отображения
   <q>/<Alt-q> --- выбор интерполяции по оси X
   <w>/<Alt-w> --- выбор интерполяции по оси Y
   <f>/<Alt-f> --- разворот изображения по осям X/Y
           <b> --- показать/скрыть границы ячеек
           <i> --- включить/выключить интерполяцию для сферы
           <m> --- включить/выключить проекцию Моллвейде для сферы

можно выбрать мышью область для отображения/пределы на изображении/палитре
двойной щелчек сбрасывает выбор области/возвращает автошкалирование по значению
'''

try: content.file_replot(); wroot.mainloop()
finally:
    if os.path.exists(childs): os.system('kill $(cat %s)'%childs)
    os.system('rm -rf '+content.animate.tmpdir+' '+childs); os.system('pkill -P %i'%os.getpid())
#-------------------------------------------------------------------------------
