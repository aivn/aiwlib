#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import sys
from aiwlib.iostream import *
from aiwlib.Volume import *
import os.path
path_to_AV = "../AbstractViewer"
try: launcher_dir = os.path.dirname(os.readlink(sys.argv[0]))
except: launcher_dir = os.path.dirname(sys.argv[0])
sys.path.append( os.path.join(launcher_dir,path_to_AV) )
from async_input import rl_async_reader, async_process
from ViewerGLUT import *
from OpenGL import GL
rl_reader = rl_async_reader(os.path.expanduser("~/.{}_history".format(os.path.basename(sys.argv[0]))))

fragment_shader = '''
#version 330 core
in float gl_ClipDistance[6];
in vec3 pos;
out vec4 FragColor;
uniform mat4 MVP, Model;
uniform vec3 cubemin, cubemax, rstep, minmaxmul;
uniform vec3 origin;
uniform vec2 viewport;
uniform float scale,raystep,density,brightness, opacity;
uniform ivec3 size;
uniform sampler1D pal;
uniform sampler3D data;
//const float lighting=0.75;
float get(vec3 coord){
    vec3 texcoord = ((coord-origin)*rstep+vec3(0.5))/textureSize(data, 0);
    if ( all( greaterThan(texcoord, vec3(0.)) ) &&
         all( lessThanEqual(texcoord, vec3(1.)) ) )
        return (texture(data, texcoord).r - minmaxmul.x)*minmaxmul.z;
    else return -1.;
}
bool notcliped(vec3 coord){
    return coord[0]>=cubemin[0] && coord[0]<=cubemax[0] &&
         coord[1]>=cubemin[1] && coord[1]<=cubemax[1]&&
         coord[2]>=cubemin[2] && coord[2]<=cubemax[2];
}
void main() {
    //for(int i=0; i<6; i++){
    //    if (gl_ClipDistance[i]<=0) discard;
    //}
    //const float camera_light = 0.95;
    //const float vertical_light = 1.0;
    int tex_length = textureSize(pal,0);
    //vec3 eyeRay = (vec4(0,0,-1,0.0)*itMVP).xyz;
    vec3 eyeRay = -(vec4(0,0,1,0.0)*Model).xyz;
    vec4 sum = vec4(0);
    if(!notcliped(pos+ eyeRay*raystep)) discard;
    for(vec3 raypos=pos; notcliped(raypos); raypos+= eyeRay*raystep){
        float f = (get(raypos)*(tex_length - 1.0)+0.5)/tex_length;
        vec4 col = texture(pal, (f*(tex_length - 1.0)+0.5)/tex_length);
        col.w = (f>1.||f<0.)? 0:1.0;
        float w = col.w*density*(1.0 - sum.w);
        col.w = 1;
        sum += col*w;
        if (sum.w >= opacity){
            sum -= col*(sum.w-opacity);
            break;
        }
    }
    if( sum.w == 0){
        sum = vec4(1.,1.,1.,1.);
    }
    gl_FragColor = vec4(sum.xyz*brightness,sum.w);
    gl_FragDepth =gl_FragCoord.z;
}
'''
vertex_shader = '''
#version 330 core
in vec3 coord;
out float gl_ClipDistance[6];
out vec3 pos;
uniform mat4 MVP;
uniform vec3 vmin, vmax, step, minmaxmul;
uniform vec2 viewport;
uniform float raystep, scale;
uniform ivec3 size;
void main() {
    pos = coord;
    float l = min(viewport.x, viewport.y);
    vec4 res = MVP*(vec4(coord,1.0));
    for(int i =0; i<3; i++){
        gl_ClipDistance[i]=coord[i]- vmin[i];
        gl_ClipDistance[i+3]=vmax[i] -coord[i];
    }
    //nrml = (MVP*vec4(normal,0.)).xyz*scale;
    //Viewport tansformation
    //nrml *= vec3(viewport/l,1.);

    vec3 center = (vmin +vmax)*0.5;
    res.z = ((MVP*vec4(center ,1.)).z-res.z)*scale/distance(vmax,vmin)*2;// in [-1:1]
    gl_Position = res;
}
'''

forward_methods = ["next", "jump",
        "get_frame", "get_cbrange", "autoscalecb", 
        "set_cbrange","set_frame","rangemove","extendrange",
        "get_cb_auto", "set_cb_auto", "set_cbrange__",
        "get_density","set_density","get_raystep","set_raystep",
        "get_brightness", "set_brightness","get_opacity", "set_opacity"]
params_dump_dict = { "ax":"ax", "get_pal":"set_pal", "get_brightness":"set_brightness",
        "get_pos":"set_pos", "get_view":"set_view","get_density":"set_density",
        "get_scale":"set_scale", "get_cbrange":"set_cbrange__","get_raystep":"set_raystep",
        "get_xrange":"set_xrange__", "get_yrange":"set_yrange__",
        "get_zrange":"set_zrange__", "title_template":"title_template",
        "get_wire":"set_wire","bb_auto":"bb_auto", "get_cb_auto":"set_cb_auto",
        "get_opacity":"set_opacity"}
colorkeys = [ ("autoscalecb()","a"), ("autoscalecb()","a",["Shift"])]
class VolumeViewer(ViewerGLUT):
    def __init__(self, reader, argv):
        ViewerGLUT.__init__(self,reader,argv)
        #UniversalViewer.__init__(self,argv)
        self.title_template = "VolumeViewer scale={scale} cb={cbrange[0]}:{cbrange[1]} frame={frame}"
        self.image_name_template = "FR{frame}-SC{scale}.png"
        for method in forward_methods:
            setattr(self.__class__, method, ext_generator(method, Volume, *get_arglist(getattr(Volume,method), True)))
    def InitGL(self):
        checkOpenGLerror()
        self._sprs = [self.spr,Shader()]
        self._cur_spr = 0
        self.shader_load(vertex_shader, fragment_shader)
        self.switch_spr(1)
        self.shader_extern_load(*map(lambda x: os.path.join(launcher_dir, x), map(lambda x: os.path.join(path_to_AV,x), ["v.shader","f.shader"])) )
        self.switch_spr(0)
        self.V.MakeCurrent()
        flushOpenGLerror()
        self.LoadGL()
        self.autoscale()
        self.autoscalecb()
        checkOpenGLerror()
    def switch_spr(self, i):
        "Переключает шейдерную программу, служебная функция"
        self.spr = self._sprs[i]
        self._cur_spr = i
        if i ==1: self.ax = False
        else: self.ax = True
    def execute(self, string, **kwargs):
        """выполняет функции в переменных вьюера, служебная функциия"""
        #kwargs["__builtins__"]=__builtins__
        kwargs.update(globals())
        if isinstance(string, str): exec(string,kwargs,self)
        else: exec(func2string(string), kwargs, self)
        self.V.update()
    def evaluate(self, string, **kwargs):
        "вычисляет выражение в переменных вьюера, служебная функциия"
        #kwargs["__builtins__"]=__builtins__
        kwargs.update(globals())
        if isinstance(string, str): return eval(string,kwargs,self)
        else: return eval(func2string(string), kwargs, self)
    def set_xrange(self, lower, upper):
        "Устанавливает диапазон значений по x, не меняет bb_auto"
        self.V.set_bounding_box(0, lower, False), self.V.set_bounding_box(0, upper, True)
        self.Surf.adjust_cube(self.V)
    def set_yrange(self, lower, upper):
        "Устанавливает диапазон значений по y, не меняет bb_auto"
        self.V.set_bounding_box(1, lower, False), self.V.set_bounding_box(1, upper, True)
        self.Surf.adjust_cube(self.V.V)
    def set_zrange(self, lower, upper):
        "Устанавливает диапазон значений по z, не меняет bb_auto"
        self.V.set_bounding_box(2, lower, False), self.V.set_bounding_box(2, upper, True)
        self.Surf.adjust_cube(self.V.V)
    def clip_plane_move(self, val, pl):
        '''Перемещает плоскости отсечения, эквивалентно перемещению соответствующих границ диапазонов значений
        на величину val внутрь диапазона. pl 0,1 и 2 нижние границы по x,y и z соответственно, 4,5,6 — верхние'''
        self.bb_auto = False
        self.V.clip_plane_move(val,pl)
        self.Surf.adjust_cube(self.V.V)
    def autoscale(self):
        "Установить пределы по x,y,z чтобы отображаемые данные полностью помещались в окно, устанавливает bb_auto."
        bb_min, bb_max = self.Surf.autobox()
        self.set_xrange__(bb_min[0], bb_max[0])
        self.set_yrange__(bb_min[1], bb_max[1])
        self.set_zrange__(bb_min[2], bb_max[2])
        self.Surf.adjust_cube(self.V.V)
        self.bb_auto = True
        self.V.automove()
    def switch_buffer(self,name, save = True,SD = params_dump_dict):
        '''Переключает текущее отображение на созраненное с именем name, если save — True созраняет текущие параметры отображения
        под текущим именем, SaveDict — словарь созраняемых параметров'''
        UniversalViewer.switch_buffer(self,name,save, SD)
        self.V.update()
    def _display(self):
        "Заготовка для glut display, служебная функция"
        if self.bb_auto:
            self.autoscale()
        self.V.display()
        self.Surf.display(self.V, self.spr, self.tex)
        if self.ax:
            self.switch_spr(1)
            self.V.axis_switch()
            GL.glDepthFunc(GL.GL_GREATER)
            #self.spr.render(self.Axis, self.V, self.palettes["rgb"])
            self.spr.start()
            self.palettes["rgb"].use_texture(self.spr,"pal")
            self.V.plot(self.spr)
            self.Axis.plot(self.spr)
            self.spr.stop()
            GL.glDepthFunc(GL.GL_LEQUAL)
            self.spr.start()
            self.palettes["rgb"].use_texture(self.spr,"pal")
            self.V.plot(self.spr)
            self.Axis.plot(self.spr)
            self.spr.stop()
            #self.spr.render(self.Axis, self.V, self.palettes["rgb"])
            self.V.axis_switch()
            self.switch_spr(0)

#setattr(UniversalViewer,"set_item", set_item)
#setattr(UniversalViewer,"set_orts", set_orts)
#setattr(UniversalViewer,"using", using)
#setattr(UniversalViewer,"execute", execute)
@async_process
def start_gui(reader):
    uv = VolumeViewer(reader, sys.argv)
    inp = File(sys.argv[1],"r")
    surf = Volume(inp)
    uv.set_object(surf)
    uv.namespace = dict()
    uv.namespace.update(uv.__dict__)
    uv.namespace.update(UniversalViewer.__dict__)
    uv.namespace.update(VolumeViewer.__dict__)
    trans_vars = {}
    for k in uv.namespace:
        if k.startswith("get_"):
            trans_vars[k[4:]] = None
    uv.namespace.update(trans_vars)
    namespace = dict(uv.namespace)
    uv.update_completion(namespace)
    for km in DefaultKeyMapping + SurfTemplateKeys + colorkeys:
        uv.set_key(*km)
#uv.set_key("print get_instance(x,y)","g")
    uv.set_key("next()", " ")
    uv.set_key("jump(-1)"," ", ["Shift"]),
    uv()
rl_reader(start_gui)

