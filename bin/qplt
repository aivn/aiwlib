#!/usr/bin/python3
# Copyright (C) 2021 Antov V. Ivanov  <aiv.racs@gmail.com> with support Kintech Lab
# Licensed under the Apache License, Version 2.0

#export QT_SCREEN_SCALE_FACTORS=2

#--- import modules ------------------------------------------------------------
import os, sys

try:
    conf = dict([l.strip().split(' ', 1) for l in open(os.path.expanduser('~/.qplt')) if l[0]!='#' and len(l.split())>=2])
    if 'qtscale' in conf: os.environ['QT_SCREEN_SCALE_FACTORS'] = conf['qtscale'].strip()
    if 'aiwlib' in conf: sys.path.append(conf['aiwlib'].strip())
    del conf
except: pass

from PyQt5 import QtWidgets, QtGui, QtCore, uic
sys.path.append('/home/aiv/aiwlib/python3/')

import aiwlib.qplt as qplt
#--- create main objects -------------------------------------------------------
app = QtWidgets.QApplication(sys.argv)
win = uic.loadUi(os.path.dirname(qplt.__file__)+"/qplt.ui")
# win.setWindowIcon(QtGui.QIcon('web.png')) 
canvas = qplt.Canvas(win)

#--- parse arguments and load files --------------------------------------------
qplt.load_files(*sys.argv[1:])
if not qplt.table_size(): print('Not input files.'); sys.exit()
elif qplt.table_size()==1: win.fr_filenum.hide()
else: win.filenum.setMaximum(qplt.table_size()-1)

#--- configurate window --------------------------------------------------------
win.D3.addItems(['2D', '3D', 'XD'])
win.D3.setCurrentIndex(2) #(1)

win.celldim.addItems(['1', '2', '3'])
win.celltype.addItems(['float', 'double', 'bool', 'uint8_t', 'int8_t', 'uint16_t', 'int16_t', 'uint32_t', 'int32_t', 'uint64_t', 'int64_t'])
win.diff.addItems(['---', 'div', 'grad 2D', 'grad 3D', 'rot', 'laplas 2D', 'laplas 3D'])
win.vconv.addItems(['X component', 'Y component', 'Z component', 'module', 'phase 2D', 'not conv']); win.vconv.setCurrentIndex(5)
win.xinterp.addItems(['const', 'linear', 'cubic', 'spline'])
win.yinterp.addItems(['const', 'linear', 'cubic', 'spline'])
win.zinterp.addItems(['const', 'linear', 'cubic', 'spline'])
win.x_axe.addItems(['X', 'Y', 'Z'])
win.y_axe.addItems(['X', 'Y', 'Z'])
win.z_axe.addItems(['X', 'Y', 'Z'])
win.y_axe.setCurrentIndex(1)
win.z_axe.setCurrentIndex(2)
win.xtics3D.addItems(['both', 'auto', 'down', 'up', 'off'])
win.ytics3D.addItems(['both', 'auto', 'down', 'up', 'off'])
win.ztics3D.addItems(['both', 'auto', 'left', 'right', 'off'])

win.D3scale_mode.addItems(['fixed', 'equal', 'full'])

win.save.clicked.connect(canvas.save)

#def resize(*args): canvas.plt_type |= 2; canvas.update()
#def resize(event): canvas.plt_type |= 3; canvas.update()
win.resizeEvent = canvas.full_replot #???

#def release(*args): print('RELEASE', args)
#win.mouseReleaseEvent = release

for l in 'f_min f_max arr_spacing D3cell_x D3cell_y D3cell_z pal_height'.split(): getattr(win, l).setValidator(QtGui.QDoubleValidator())
for l in 'pal_space pal_width tics_width tics_length border_width arr_length arr_width'.split(): getattr(win, l).setValidator(QtGui.QIntValidator())
#win.cellmask.setValidator(QtGui.QIntValidator())
#--- config paletter -----------------------------------------------------------
pico = (48,16)
win.paletter.setIconSize(QtCore.QSize(*pico))
win.paletter.addItems(canvas.paletters.keys()) # setCurrentIcon для каждой палитры
for i, p in enumerate(canvas.paletters.keys()): win.paletter.setItemIcon(i, canvas.get_ico(p, pico))
win.paletter.setCurrentText('rainbow')
#-------------------------------------------------------------------------------    
def axe_click(axe, ID):
    canvas.axisID[axe], oldID, axe2, axe3 = ID, canvas.axisID[axe], (axe+1)%3, (axe+2)%3
    if   getattr(win, '%s_axe'%'xyz'[axe2]).currentIndex()==ID: getattr(win, 'xyz'[axe2]+'_axe').setCurrentIndex(oldID); canvas.axisID[axe2] = oldID
    elif getattr(win, '%s_axe'%'xyz'[axe3]).currentIndex()==ID: getattr(win, 'xyz'[axe3]+'_axe').setCurrentIndex(oldID); canvas.axisID[axe3] = oldID
    # раскрашивать оси в таблице???
    canvas.replot()
win.x_axe.activated.connect(lambda ID: axe_click(0, ID))
win.y_axe.activated.connect(lambda ID: axe_click(1, ID))
win.z_axe.activated.connect(lambda ID: axe_click(2, ID))
#-------------------------------------------------------------------------------
for i in range(1,7): getattr(win, 'fr_axe%i'%i).hide()
win.show_axis_info.stateChanged.connect(canvas.show_axis_info)
for i in range(4): getattr(win, 'slicenum%i'%(i+1)).valueChanged.connect(lambda event, i=i: canvas.slice_replot(event, i))
#-------------------------------------------------------------------------------
win.show_settings.stateChanged.connect(lambda *args: win.settings_frame.show() if win.show_settings.isChecked() else win.settings_frame.hide())

for l in 'autoscale_tot logscale modulus invert xflip yflip zflip show_pal'.split(): getattr(win, l).stateChanged.connect(canvas.replot)

def autoscale(*args):
    for l in (win.f_min, win.f_max): l.setReadOnly(win.autoscale.isChecked())    
    if win.autoscale.isChecked(): canvas.replot()
win.autoscale.stateChanged.connect(autoscale)

for l in 'f_min f_max cellmask offset0 offset1 offset2 nan_color title_text x_text y_text z_text pal_space pal_width tics_width tics_length border_width arr_length arr_width arr_spacing D3cell_x D3cell_y D3cell_z pal_height'.split():
    getattr(win, l).editingFinished.connect(canvas.replot)
for l in 'paletter celldim celltype diff vconv xinterp yinterp zinterp D3 D3scale_mode xtics3D ytics3D ztics3D'.split(): getattr(win, l).activated.connect(canvas.replot)
for l in ['filenum', 'framenum']: getattr(win, l).valueChanged.connect(canvas.full_replot)
win.font.currentFontChanged.connect(canvas.replot); win.font_sz.valueChanged.connect(canvas.replot)
#--- run mainloop --------------------------------------------------------------
win.show()
sys.exit(app.exec_())
#-------------------------------------------------------------------------------
