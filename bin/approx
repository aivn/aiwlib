#!/usr/bin/python2
# -*- coding: utf-8 -*-
'''usage: approx source.dat|- X-expression Y-expression function [+XN=expr] [/Yerr-expressions] [-cond condition] [-rx min:max] 
                 [-P0 init] [-gplt params] [-noracs] [-prefix preifx] [:var1,var2,...] [key1=var1 [key2=var2]...]
    X,Y-expression --- выражения из переменных, объявленных в загловке source.dat, 
                       перечисленных в виде key=val в аргументах или прочитанных из .RACS
    XN --- имя доп. столбца, EXPR - значение столбца
    function ---  функция для аппроксимации, записывается в виде arg1,arg2,...:expressiion 
                  относительно переменной X (результатов вычисления X-expression), аргументы arg1,...
                  подбираются при помощи метода scipy.optmize.curve_fit
    -gplt params --- построить график с результатами аппроксмиации для сравнения
    -noracs --- НЕ пытаться читать файл .RACS из директории, в которой находится файл source.dat
    :var1,var2,... --- формат вывода (только числа) в несколько колонок разделенных проблелом. По умолчанию вывод имеет вид 
                       arg1=...; ... arg1_err=...; ... prefixL2=...; prefixL1max=...; prefixL1=...;
    ::Xname --- выводит аппроксимирующую функцию с подставленными коэффициентами, заменяя X на Xname
    -prefix prefix ---- устанавливает префикс названия значений с ошибками (по умолчанию err)
    -P0 init --- начальные значения подбираемых параметров через запятую
    key=val --- добавляет значение val с именем key для использования во всех выражениях    

    для многомерной интерполяции в качестве X-выражения используется X1,X2,... и затем X[:,0] X[:,1] при задании функции

    -h|-help|--help --- показать эту справку и выйти 
'''

import os, sys, cPickle, math
if len(sys.argv)<5 or '-h' in sys.argv or '-help' in sys.argv or '--help' in sys.argv: print>>sys.stderr, __doc__; sys.exit()

import numpy as np
from scipy.optimize import curve_fit

RX = map(float, '-inf inf'.split())
if '-rx' in sys.argv:
    RX = sys.argv[sys.argv.index('-rx')+1].split(':')
    RX[0] = float(RX[0] if RX[0] else '-inf')
    RX[1] = float(RX[1] if RX[1] else 'inf')
    del sys.argv[sys.argv.index('-rx'):sys.argv.index('-rx')+2]

cond = None
if '-cond' in sys.argv:
    cond = sys.argv[sys.argv.index('-cond')+1]
    cond = compile(cond, cond, 'eval')
    del sys.argv[sys.argv.index('-cond'):sys.argv.index('-cond')+2]
    
H = {}
for i, k in list(enumerate('xyz'))+list(enumerate('C%i'%i for i in range(1, 256))): H.setdefault(i, []).append(k)
G, L = dict(math.__dict__), (sys.stdin if sys.argv[1]=='-' else open(sys.argv[1])).readlines()
if not '-noracs' in sys.argv:
    class Racs: pass
    racs = Racs()
    try: racs.__dict__.update(cPickle.load(open(os.path.dirname(sys.argv[1])+'/.RACS'))); G['racs'] = racs
    except: pass
else: del sys.argv[sys.argv.index('-racs')]

P0 = None
if '-P0' in sys.argv:
    P0 = eval(sys.argv[sys.argv.index('-P0')+1], G)
    del sys.argv[sys.argv.index('-P0'):sys.argv.index('-P0')+2]

while L and L[0][0]=='#':
    if L[0].startswith('#:'):
        if '=' in L[0]: pass #exec(L[0][2:], G)
        else:
            for i, k in enumerate(L[0][2:].split()): H.setdefault(i, []).append(k)
    del L[0]

ai, gplt, prefix, outf, YEex, Xname, addX = 5, None, 'err', None, None, None, []
while ai<len(sys.argv):
    if sys.argv[ai]=='-gplt': ai += 1; gplt = sys.argv[ai] if ai<len(sys.argv) else ''
    elif sys.argv[ai]=='-prefix': ai += 1; prefix = sys.argv[ai]
    elif sys.argv[ai].startswith('::'): Xname = sys.argv[ai][2:]
    elif sys.argv[ai].startswith(':'): outf = sys.argv[ai][1:].split(',')
    elif sys.argv[ai].startswith('/'): YEex = compile(sys.argv[ai][1:], sys.argv[ai][1:], 'eval')
    elif sys.argv[ai].startswith('+'):
        K = sys.argv[ai][1:].split('=', 1)[0]
        E = sys.argv[ai].split('=', 1)[1] if '=' in sys.argv[ai] else K
        addX.append((K, compile(E, K, 'eval'))); G[K] = []
    else: exec(sys.argv[ai], G)
    ai += 1
G['np'] = np

#fargs, func = sys.argv[4].split(':')[0].split(','), eval('lambda X,'+sys.argv[4], globals(), G)     
fargs, fsrc = sys.argv[4].split(':')[0].split(','), sys.argv[4].split(':', 1)[1]
fcode = compile(fsrc, sys.argv[4], 'eval')
func = eval('lambda X,'+','.join(fargs)+':eval(fcode, G, locals())')

X, Y, YE, Xex, Yex, block_len = [], [], [], compile(sys.argv[2], sys.argv[2], 'eval'), compile(sys.argv[3], sys.argv[3], 'eval'), 0
for l in L:
    if not l.strip() or l[0]=='#':
        if block_len<0: block_len = -block_len
        continue
    try: l = map(float, l.split())
    except: continue
    
    D = {}
    for k, v in enumerate(l):
        for n in H.get(k, []):
            if not n in D: D[n] = v
    if cond and not eval(cond, G, D): continue
    try: xval = eval(Xex, G, D)
    except: continue
    if not type(xval) in (tuple,list) and (xval<RX[0] or RX[1]<xval): continue
    try: yval = eval(Yex, G, D)
    except: continue
    if str(xval)=='nan' or str(yval)=='nan': continue
    X.append(xval)
    Y.append(yval)
    if YEex: YE.append(eval(YEex, G, D))
    for K, E in addX: G[K].append(eval(E, G, D))
    if block_len<=0: block_len -= 1    

XY = sorted(zip(X,Y))
X, Y = np.array([xy[0] for xy in XY]), np.array([xy[1] for xy in XY])

for K, E in addX: G[K] = np.array(G[K])

popt, pcov = curve_fit(func, X, Y, sigma=np.array(YE), absolute_sigma=True, p0=P0) if YE else curve_fit(func, X, Y, p0=P0) 
F = func(X, *popt)
E = np.fabs((Y-F)/(Y+F))

R = dict(zip(fargs, popt)+[(k+'_err', math.sqrt(v)) for k, v in zip(fargs, pcov.diagonal())]+
         [(prefix+'L2', math.sqrt(sum((Y-F)**2))/len(X)),
          (prefix+'L1max', max(E)),
          (prefix+'L1', sum(E)/len(E))])

if outf: print ' '.join(str(R[k]) for k in outf)
else: print ' '.join('%s=%g; '%(k, R[k]) for k in fargs+[i+'_err' for i in fargs]+[prefix+i for i in ('L2', 'L1', 'L1max')])

if Xname:
    print ''
    for k, v in zip(fargs, popt)+[('X', Xname)]*(Xname!='X'):
        j, l = 0, len(k)
        while k in fsrc[j:]:
            i = fsrc.index(k)
            if (i==0 or (fsrc[i-1]!='_' and not fsrc[i-1].isalpha())) and (i+l==len(fsrc) or (fsrc[i+l]!='_' and not fsrc[i+l].isalnum())):
                fsrc = fsrc[:i]+str(v)+fsrc[i+l:]
            else: j += l
    print fsrc
    print ''

if not gplt is None:
    if not type(X[0]) in (float, int, np.float64):
        X2, D3, L = [' '.join(map(str, x)) for x in X], True, None
        if X[0][0]==X[1][0]:
            for L in range(len(X)):
                if X[L][0]!=X[L+1][0]: break 
        elif X[0][1]==X[1][1]:
            for L in range(len(X)):
                if X[L][1]!=X[L+1][1]: break 
        if L:
            i, Y, F = L+1, list(Y), list(F)
            while i<len(X2):
                X2.insert(i, ''); Y.insert(i, ''); F.insert(i, '')
                i += L+2
        X = X2
    else: D3 = False
    tmpn = '/tmp/approx-%i.dat'%os.getpid()
    print tmpn
    if addX:
        fout, Fmax = open(tmpn, 'w'), max(map(abs, F))
        for i in range(len(X)):
            print>>fout, X[i], G[addX[0][0]][i], (Y[i]-F[i])/Fmax
            if i and not i%block_len: print>>fout, ''
        fout.close()
        os.system('gplt -3d -cbp rainbow -pm3d map -cbl error '+tmpn+' '+gplt)
        os.remove(fout.name)        
    else:    
        if YE: 
            fout1, fout2 = open(tmpn+'1', 'w'), open(tmpn+'2', 'w')
            for l in zip(X, Y, YE): print>>fout1, ' '.join(map(str, l))
            for l in zip(X, F): print>>fout2, ' '.join(map(str, l))
            fout1.close(); fout2.close()
            os.system('gplt %s1@errorbars,=data %s2@=approx '%(tmpn, tmpn)+gplt)
            os.remove(fout1.name); os.remove(fout2.name)
        else:
            fout = open(tmpn, 'w')
            for l in zip(X, Y, F): print>>fout, ' '.join(map(str, l))
            fout.close()
            if D3: os.system('gplt -h3d -U "fabs(z-C4)" -ln z %s'%tmpn+gplt)
            else: os.system('gplt -U "y@p,=data z@=approx fabs(y-z)@x1y2,=error" -ln y2 %s'%tmpn+gplt)
            os.remove(fout.name)
