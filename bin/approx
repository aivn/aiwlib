#!/usr/bin/python
# -*- coding: utf-8 -*-
'''usage: approx source.dat X-expression Y-expression function [/Yerr-expressions] [-gplt params] [-noracs] [-prefix preifx] [:var1,var2,...] [key1=var1 [key2=var2]...]
    X,Y-expression --- выражения из переменных, объявленных в загловке source.dat, 
                       перечисленных в виде key=val в аргументах или прочитанных из .RACS
    function ---  функция для аппроксимации, записывается в виде arg1,arg2,...:expressiion 
                  относительно переменной X (результатов вычисления X-expression), аргументы arg1,...
                  подбираются при помощи метода scipy.optmize.curve_fit
    -gplt params --- построить график с результатами аппроксмиации для сравнения
    -noracs --- НЕ пытаться читать файл .RACS из директории, в которой находится файл source.dat
    :var1,var2,... --- формат вывода (только числа) в несколько колонок разделенных проблелом. По умолчанию вывод имеет вид 
                       arg1=...; ... arg1_err=...; ... prefixL2=...; prefixL1max=...; prefixL1=...;
    -prefix prefix ---- устанавливает префикс названия значений с ошибками (по умолчанию err)
    key=val --- добавляет значение val с именем key для использования во всех выражениях
    -h|-help|--help --- показать эту справку и выйти 
'''

import os, sys, cPickle, math
if len(sys.argv)<5 or '-h' in sys.argv or '-help' in sys.argv or '--help' in sys.argv: print>>sys.stderr, __doc__; sys.exit()

import numpy as np
from scipy.optimize import curve_fit

H, G, L = dict(enumerate('xyz')), dict(math.__dict__), open(sys.argv[1]).readlines()
if not '-noracs' in sys.argv:
    try: G.update(cPickle.load(open(os.path.dirname(sys.argv[1])+'/.RACS')))
    except: pass
else: del sys.argv[sys.argv.index('-racs')]
    
while L and L[0][0]=='#':
    if L[0].startswith('#:'):
        if '=' in L[0]: exec(L[0][2:], G)
        else: H.update(enumerate(L[0][2:].split()))
    del L[0]
    
ai, gplt, prefix, outf, YEex = 5, None, 'err', None, None
while ai<len(sys.argv):
    if sys.argv[ai]=='-gplt': ai += 1; gplt = sys.argv[ai] if ai<len(sys.argv) else ''
    elif sys.argv[ai]=='-prefix': ai += 1; prefix = sys.argv[ai]
    elif sys.argv[ai].startswith(':'): outf = sys.argv[ai][1:].split(',')
    elif sys.argv[ai].startswith('/'): YEex = compile(sys.argv[ai][1:], sys.argv[ai][1:], 'eval')
    else: exec(sys.argv[ai], G)
    ai += 1
G['np'] = np

#fargs, func = sys.argv[4].split(':')[0].split(','), eval('lambda X,'+sys.argv[4], globals(), G)     
fargs, fcode = sys.argv[4].split(':')[0].split(','), compile(sys.argv[4].split(':', 1)[1], sys.argv[4], 'eval')
func = eval('lambda X,'+','.join(fargs)+':eval(fcode, G, locals())')

X, Y, YE, Xex, Yex = [], [], [], compile(sys.argv[2], sys.argv[2], 'eval'), compile(sys.argv[3], sys.argv[3], 'eval')
for l in L:
    try: l = map(float, l.split())
    except: continue
    D = dict((H[k], v) for k, v in enumerate(l))
    X.append(eval(Xex, G, D))
    Y.append(eval(Yex, G, D))
    if YEex: YE.append(eval(YEex, G, D))
X, Y = np.array(X), np.array(Y) 
    
popt, pcov = curve_fit(func, X, Y, sigma=np.array(YE), absolute_sigma=True) if YE else curve_fit(func, X, Y) 
F = func(X, *popt)
E = np.fabs((Y-F)/(Y+F))

R = dict(zip(fargs, popt)+[(k+'_err', math.sqrt(v)) for k, v in zip(fargs, pcov.diagonal())]+
         [(prefix+'L2', math.sqrt(sum((Y-F)**2))/len(X)),
          (prefix+'L1max', max(E)),
          (prefix+'L1', sum(E)/len(E))])

if outf: print ' '.join(str(R[k]) for k in outf)
else: print ' '.join('%s=%g; '%(k, R[k]) for k in fargs+[i+'_err' for i in fargs]+[prefix+i for i in ('L2', 'L1', 'L1max')])

if not gplt is None:
    tmpn = '/tmp/approx-%i.dat'%os.getpid()
    if YE: 
        fout1, fout2 = open(tmpn+'1', 'w'), open(tmpn+'2', 'w')
        for l in zip(X, Y, YE): print>>fout1, ' '.join(map(str, l))
        for l in zip(X, F): print>>fout2, ' '.join(map(str, l))
        fout1.close(); fout2.close()
        os.system('gplt %s1@errorbars,=data %s2@=approx '%(tmpn, tmpn)+gplt)
        os.remove(fout1.name); os.remove(fout2.name)
    else:
        fout = open(tmpn, 'w')
        for l in zip(X, Y, F): print>>fout, ' '.join(map(str, l))
        fout.close()
        os.system('gplt -U "y@p,=data z@=approx" %s '%tmpn+gplt)
        os.remove(fout.name)
