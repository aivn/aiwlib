try: import sys; sys.setdlopenflags(0x00100|sys.getdlopenflags())
except: pass
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_qplt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_qplt')
    _qplt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_qplt', [dirname(__file__)])
        except ImportError:
            import _qplt
            return _qplt
        try:
            _mod = imp.load_module('_qplt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _qplt = swig_import_helper()
    del swig_import_helper
else:
    import _qplt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _qplt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _qplt.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _qplt.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _qplt.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _qplt.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _qplt.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _qplt.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _qplt.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _qplt.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _qplt.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _qplt.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _qplt.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _qplt.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _qplt.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _qplt.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _qplt.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _qplt.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _qplt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class std_vectori(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(std_vectori self) -> SwigPyIterator"""
        return _qplt.std_vectori_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(std_vectori self) -> bool"""
        return _qplt.std_vectori___nonzero__(self)


    def __bool__(self):
        """__bool__(std_vectori self) -> bool"""
        return _qplt.std_vectori___bool__(self)


    def __len__(self):
        """__len__(std_vectori self) -> std::vector< int >::size_type"""
        return _qplt.std_vectori___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(std_vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> std_vectori"""
        return _qplt.std_vectori___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(std_vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, std_vectori v)
        """
        return _qplt.std_vectori___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(std_vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _qplt.std_vectori___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vectori self, std::vector< int >::difference_type i)
        __delitem__(std_vectori self, PySliceObject * slice)
        """
        return _qplt.std_vectori___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vectori self, PySliceObject * slice) -> std_vectori
        __getitem__(std_vectori self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _qplt.std_vectori___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vectori self, PySliceObject * slice, std_vectori v)
        __setitem__(std_vectori self, PySliceObject * slice)
        __setitem__(std_vectori self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _qplt.std_vectori___setitem__(self, *args)


    def pop(self):
        """pop(std_vectori self) -> std::vector< int >::value_type"""
        return _qplt.std_vectori_pop(self)


    def append(self, x):
        """append(std_vectori self, std::vector< int >::value_type const & x)"""
        return _qplt.std_vectori_append(self, x)


    def empty(self):
        """empty(std_vectori self) -> bool"""
        return _qplt.std_vectori_empty(self)


    def size(self):
        """size(std_vectori self) -> std::vector< int >::size_type"""
        return _qplt.std_vectori_size(self)


    def swap(self, v):
        """swap(std_vectori self, std_vectori v)"""
        return _qplt.std_vectori_swap(self, v)


    def begin(self):
        """begin(std_vectori self) -> std::vector< int >::iterator"""
        return _qplt.std_vectori_begin(self)


    def end(self):
        """end(std_vectori self) -> std::vector< int >::iterator"""
        return _qplt.std_vectori_end(self)


    def rbegin(self):
        """rbegin(std_vectori self) -> std::vector< int >::reverse_iterator"""
        return _qplt.std_vectori_rbegin(self)


    def rend(self):
        """rend(std_vectori self) -> std::vector< int >::reverse_iterator"""
        return _qplt.std_vectori_rend(self)


    def clear(self):
        """clear(std_vectori self)"""
        return _qplt.std_vectori_clear(self)


    def get_allocator(self):
        """get_allocator(std_vectori self) -> std::vector< int >::allocator_type"""
        return _qplt.std_vectori_get_allocator(self)


    def pop_back(self):
        """pop_back(std_vectori self)"""
        return _qplt.std_vectori_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vectori self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(std_vectori self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _qplt.std_vectori_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> std_vectori
        __init__(std::vector<(int)> self, std_vectori arg2) -> std_vectori
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> std_vectori
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> std_vectori
        """
        this = _qplt.new_std_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(std_vectori self, std::vector< int >::value_type const & x)"""
        return _qplt.std_vectori_push_back(self, x)


    def front(self):
        """front(std_vectori self) -> std::vector< int >::value_type const &"""
        return _qplt.std_vectori_front(self)


    def back(self):
        """back(std_vectori self) -> std::vector< int >::value_type const &"""
        return _qplt.std_vectori_back(self)


    def assign(self, n, x):
        """assign(std_vectori self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _qplt.std_vectori_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vectori self, std::vector< int >::size_type new_size)
        resize(std_vectori self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _qplt.std_vectori_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vectori self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(std_vectori self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _qplt.std_vectori_insert(self, *args)


    def reserve(self, n):
        """reserve(std_vectori self, std::vector< int >::size_type n)"""
        return _qplt.std_vectori_reserve(self, n)


    def capacity(self):
        """capacity(std_vectori self) -> std::vector< int >::size_type"""
        return _qplt.std_vectori_capacity(self)

    __swig_destroy__ = _qplt.delete_std_vectori
    __del__ = lambda self: None
std_vectori_swigregister = _qplt.std_vectori_swigregister
std_vectori_swigregister(std_vectori)

class std_vectorf(_object):
    """Proxy of C++ std::vector<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vectorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vectorf, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(std_vectorf self) -> SwigPyIterator"""
        return _qplt.std_vectorf_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(std_vectorf self) -> bool"""
        return _qplt.std_vectorf___nonzero__(self)


    def __bool__(self):
        """__bool__(std_vectorf self) -> bool"""
        return _qplt.std_vectorf___bool__(self)


    def __len__(self):
        """__len__(std_vectorf self) -> std::vector< float >::size_type"""
        return _qplt.std_vectorf___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(std_vectorf self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> std_vectorf"""
        return _qplt.std_vectorf___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vectorf self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        __setslice__(std_vectorf self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, std_vectorf v)
        """
        return _qplt.std_vectorf___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(std_vectorf self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _qplt.std_vectorf___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vectorf self, std::vector< float >::difference_type i)
        __delitem__(std_vectorf self, PySliceObject * slice)
        """
        return _qplt.std_vectorf___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vectorf self, PySliceObject * slice) -> std_vectorf
        __getitem__(std_vectorf self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _qplt.std_vectorf___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vectorf self, PySliceObject * slice, std_vectorf v)
        __setitem__(std_vectorf self, PySliceObject * slice)
        __setitem__(std_vectorf self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _qplt.std_vectorf___setitem__(self, *args)


    def pop(self):
        """pop(std_vectorf self) -> std::vector< float >::value_type"""
        return _qplt.std_vectorf_pop(self)


    def append(self, x):
        """append(std_vectorf self, std::vector< float >::value_type const & x)"""
        return _qplt.std_vectorf_append(self, x)


    def empty(self):
        """empty(std_vectorf self) -> bool"""
        return _qplt.std_vectorf_empty(self)


    def size(self):
        """size(std_vectorf self) -> std::vector< float >::size_type"""
        return _qplt.std_vectorf_size(self)


    def swap(self, v):
        """swap(std_vectorf self, std_vectorf v)"""
        return _qplt.std_vectorf_swap(self, v)


    def begin(self):
        """begin(std_vectorf self) -> std::vector< float >::iterator"""
        return _qplt.std_vectorf_begin(self)


    def end(self):
        """end(std_vectorf self) -> std::vector< float >::iterator"""
        return _qplt.std_vectorf_end(self)


    def rbegin(self):
        """rbegin(std_vectorf self) -> std::vector< float >::reverse_iterator"""
        return _qplt.std_vectorf_rbegin(self)


    def rend(self):
        """rend(std_vectorf self) -> std::vector< float >::reverse_iterator"""
        return _qplt.std_vectorf_rend(self)


    def clear(self):
        """clear(std_vectorf self)"""
        return _qplt.std_vectorf_clear(self)


    def get_allocator(self):
        """get_allocator(std_vectorf self) -> std::vector< float >::allocator_type"""
        return _qplt.std_vectorf_get_allocator(self)


    def pop_back(self):
        """pop_back(std_vectorf self)"""
        return _qplt.std_vectorf_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vectorf self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(std_vectorf self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _qplt.std_vectorf_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(float)> self) -> std_vectorf
        __init__(std::vector<(float)> self, std_vectorf arg2) -> std_vectorf
        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> std_vectorf
        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> std_vectorf
        """
        this = _qplt.new_std_vectorf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(std_vectorf self, std::vector< float >::value_type const & x)"""
        return _qplt.std_vectorf_push_back(self, x)


    def front(self):
        """front(std_vectorf self) -> std::vector< float >::value_type const &"""
        return _qplt.std_vectorf_front(self)


    def back(self):
        """back(std_vectorf self) -> std::vector< float >::value_type const &"""
        return _qplt.std_vectorf_back(self)


    def assign(self, n, x):
        """assign(std_vectorf self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _qplt.std_vectorf_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vectorf self, std::vector< float >::size_type new_size)
        resize(std_vectorf self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _qplt.std_vectorf_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vectorf self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(std_vectorf self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _qplt.std_vectorf_insert(self, *args)


    def reserve(self, n):
        """reserve(std_vectorf self, std::vector< float >::size_type n)"""
        return _qplt.std_vectorf_reserve(self, n)


    def capacity(self):
        """capacity(std_vectorf self) -> std::vector< float >::size_type"""
        return _qplt.std_vectorf_capacity(self)

    __swig_destroy__ = _qplt.delete_std_vectorf
    __del__ = lambda self: None
std_vectorf_swigregister = _qplt.std_vectorf_swigregister
std_vectorf_swigregister(std_vectorf)

class std_vectors(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(std_vectors self) -> SwigPyIterator"""
        return _qplt.std_vectors_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(std_vectors self) -> bool"""
        return _qplt.std_vectors___nonzero__(self)


    def __bool__(self):
        """__bool__(std_vectors self) -> bool"""
        return _qplt.std_vectors___bool__(self)


    def __len__(self):
        """__len__(std_vectors self) -> std::vector< std::string >::size_type"""
        return _qplt.std_vectors___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(std_vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> std_vectors"""
        return _qplt.std_vectors___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(std_vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, std_vectors v)
        """
        return _qplt.std_vectors___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(std_vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _qplt.std_vectors___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vectors self, std::vector< std::string >::difference_type i)
        __delitem__(std_vectors self, PySliceObject * slice)
        """
        return _qplt.std_vectors___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vectors self, PySliceObject * slice) -> std_vectors
        __getitem__(std_vectors self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _qplt.std_vectors___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vectors self, PySliceObject * slice, std_vectors v)
        __setitem__(std_vectors self, PySliceObject * slice)
        __setitem__(std_vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _qplt.std_vectors___setitem__(self, *args)


    def pop(self):
        """pop(std_vectors self) -> std::vector< std::string >::value_type"""
        return _qplt.std_vectors_pop(self)


    def append(self, x):
        """append(std_vectors self, std::vector< std::string >::value_type const & x)"""
        return _qplt.std_vectors_append(self, x)


    def empty(self):
        """empty(std_vectors self) -> bool"""
        return _qplt.std_vectors_empty(self)


    def size(self):
        """size(std_vectors self) -> std::vector< std::string >::size_type"""
        return _qplt.std_vectors_size(self)


    def swap(self, v):
        """swap(std_vectors self, std_vectors v)"""
        return _qplt.std_vectors_swap(self, v)


    def begin(self):
        """begin(std_vectors self) -> std::vector< std::string >::iterator"""
        return _qplt.std_vectors_begin(self)


    def end(self):
        """end(std_vectors self) -> std::vector< std::string >::iterator"""
        return _qplt.std_vectors_end(self)


    def rbegin(self):
        """rbegin(std_vectors self) -> std::vector< std::string >::reverse_iterator"""
        return _qplt.std_vectors_rbegin(self)


    def rend(self):
        """rend(std_vectors self) -> std::vector< std::string >::reverse_iterator"""
        return _qplt.std_vectors_rend(self)


    def clear(self):
        """clear(std_vectors self)"""
        return _qplt.std_vectors_clear(self)


    def get_allocator(self):
        """get_allocator(std_vectors self) -> std::vector< std::string >::allocator_type"""
        return _qplt.std_vectors_get_allocator(self)


    def pop_back(self):
        """pop_back(std_vectors self)"""
        return _qplt.std_vectors_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vectors self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(std_vectors self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _qplt.std_vectors_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> std_vectors
        __init__(std::vector<(std::string)> self, std_vectors arg2) -> std_vectors
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> std_vectors
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> std_vectors
        """
        this = _qplt.new_std_vectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(std_vectors self, std::vector< std::string >::value_type const & x)"""
        return _qplt.std_vectors_push_back(self, x)


    def front(self):
        """front(std_vectors self) -> std::vector< std::string >::value_type const &"""
        return _qplt.std_vectors_front(self)


    def back(self):
        """back(std_vectors self) -> std::vector< std::string >::value_type const &"""
        return _qplt.std_vectors_back(self)


    def assign(self, n, x):
        """assign(std_vectors self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _qplt.std_vectors_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vectors self, std::vector< std::string >::size_type new_size)
        resize(std_vectors self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _qplt.std_vectors_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vectors self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(std_vectors self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _qplt.std_vectors_insert(self, *args)


    def reserve(self, n):
        """reserve(std_vectors self, std::vector< std::string >::size_type n)"""
        return _qplt.std_vectors_reserve(self, n)


    def capacity(self):
        """capacity(std_vectors self) -> std::vector< std::string >::size_type"""
        return _qplt.std_vectors_capacity(self)

    __swig_destroy__ = _qplt.delete_std_vectors
    __del__ = lambda self: None
std_vectors_swigregister = _qplt.std_vectors_swigregister
std_vectors_swigregister(std_vectors)

class QpltImage(_object):
    """Proxy of C++ aiw::QpltImage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QpltImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QpltImage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buf"] = _qplt.QpltImage_buf_set
    __swig_getmethods__["buf"] = _qplt.QpltImage_buf_get
    if _newclass:
        buf = _swig_property(_qplt.QpltImage_buf_get, _qplt.QpltImage_buf_set)
    __swig_setmethods__["Nx"] = _qplt.QpltImage_Nx_set
    __swig_getmethods__["Nx"] = _qplt.QpltImage_Nx_get
    if _newclass:
        Nx = _swig_property(_qplt.QpltImage_Nx_get, _qplt.QpltImage_Nx_set)
    __swig_setmethods__["Ny"] = _qplt.QpltImage_Ny_set
    __swig_getmethods__["Ny"] = _qplt.QpltImage_Ny_get
    if _newclass:
        Ny = _swig_property(_qplt.QpltImage_Ny_get, _qplt.QpltImage_Ny_set)

    def __nonzero__(self):
        return _qplt.QpltImage___nonzero__(self)
    __bool__ = __nonzero__



    def __init__(self, Nx_=0, Ny_=0):
        """
        __init__(aiw::QpltImage self, int Nx_=0, int Ny_=0) -> QpltImage
        __init__(aiw::QpltImage self, int Nx_=0) -> QpltImage
        __init__(aiw::QpltImage self) -> QpltImage
        """
        this = _qplt.new_QpltImage(Nx_, Ny_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fill(self, color):
        """fill(QpltImage self, int color)"""
        return _qplt.QpltImage_fill(self, color)


    def set_pixel(self, x, y, color):
        """set_pixel(QpltImage self, int x, int y, int color)"""
        return _qplt.QpltImage_set_pixel(self, x, y, color)


    def grad_bw(self, color=0xFFFFFF):
        """
        grad_bw(QpltImage self, int color=0xFFFFFF)
        grad_bw(QpltImage self)
        """
        return _qplt.QpltImage_grad_bw(self, color)


    def rgb888(self):
        """rgb888(QpltImage self) -> std::string"""
        return _qplt.QpltImage_rgb888(self)


    def dump2ppm(self, path):
        """dump2ppm(QpltImage self, char const * path)"""
        return _qplt.QpltImage_dump2ppm(self, path)

    __swig_destroy__ = _qplt.delete_QpltImage
    __del__ = lambda self: None
QpltImage_swigregister = _qplt.QpltImage_swigregister
QpltImage_swigregister(QpltImage)

class QpltColor(_object):
    """Proxy of C++ aiw::QpltColor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QpltColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QpltColor, name)
    __repr__ = _swig_repr

    def get_pals():
        """get_pals() -> std_vectors"""
        return _qplt.QpltColor_get_pals()

    get_pals = staticmethod(get_pals)

    def add_pal(name, pal):
        """add_pal(char const * name, std_vectori pal) -> bool"""
        return _qplt.QpltColor_add_pal(name, pal)

    add_pal = staticmethod(add_pal)

    def plot_pal(*args):
        """
        plot_pal(char const * pal, QpltImage image, bool vertical)
        plot_pal(char const * pal, int Nx, int Ny, bool vertical) -> QpltImage
        """
        return _qplt.QpltColor_plot_pal(*args)

    plot_pal = staticmethod(plot_pal)

    def __nonzero__(self):
        return _qplt.QpltColor___nonzero__(self)
    __bool__ = __nonzero__



    def get_min(self):
        """get_min(QpltColor self) -> float"""
        return _qplt.QpltColor_get_min(self)


    def get_max(self):
        """get_max(QpltColor self) -> float"""
        return _qplt.QpltColor_get_max(self)


    def get_logscale(self):
        """get_logscale(QpltColor self) -> bool"""
        return _qplt.QpltColor_get_logscale(self)


    def init(self, pal_, min_, max_, logscale_=False):
        """
        init(QpltColor self, char const * pal_, float min_, float max_, bool logscale_=False) -> bool
        init(QpltColor self, char const * pal_, float min_, float max_) -> bool
        """
        return _qplt.QpltColor_init(self, pal_, min_, max_, logscale_)


    def reinit(self, min_, max_):
        """reinit(QpltColor self, float min_, float max_)"""
        return _qplt.QpltColor_reinit(self, min_, max_)


    def __init__(self, *args):
        """
        __init__(aiw::QpltColor self) -> QpltColor
        __init__(aiw::QpltColor self, char const * pal_, float min_, float max_, bool logscale_=False) -> QpltColor
        __init__(aiw::QpltColor self, char const * pal_, float min_, float max_) -> QpltColor
        """
        this = _qplt.new_QpltColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["nan_color"] = _qplt.QpltColor_nan_color_set
    __swig_getmethods__["nan_color"] = _qplt.QpltColor_nan_color_get
    if _newclass:
        nan_color = _swig_property(_qplt.QpltColor_nan_color_get, _qplt.QpltColor_nan_color_set)
    __swig_setmethods__["modulus"] = _qplt.QpltColor_modulus_set
    __swig_getmethods__["modulus"] = _qplt.QpltColor_modulus_get
    if _newclass:
        modulus = _swig_property(_qplt.QpltColor_modulus_get, _qplt.QpltColor_modulus_set)

    def __call__(self, f):
        """__call__(QpltColor self, float f) -> int"""
        return _qplt.QpltColor___call__(self, f)


    def get_f(self, x):
        """get_f(QpltColor self, float x) -> float"""
        return _qplt.QpltColor_get_f(self, x)

    __swig_setmethods__["arr_length"] = _qplt.QpltColor_arr_length_set
    __swig_getmethods__["arr_length"] = _qplt.QpltColor_arr_length_get
    if _newclass:
        arr_length = _swig_property(_qplt.QpltColor_arr_length_get, _qplt.QpltColor_arr_length_set)
    __swig_setmethods__["arr_width"] = _qplt.QpltColor_arr_width_set
    __swig_getmethods__["arr_width"] = _qplt.QpltColor_arr_width_get
    if _newclass:
        arr_width = _swig_property(_qplt.QpltColor_arr_width_get, _qplt.QpltColor_arr_width_set)
    __swig_setmethods__["arr_spacing"] = _qplt.QpltColor_arr_spacing_set
    __swig_getmethods__["arr_spacing"] = _qplt.QpltColor_arr_spacing_get
    if _newclass:
        arr_spacing = _swig_property(_qplt.QpltColor_arr_spacing_get, _qplt.QpltColor_arr_spacing_set)

    def arr_plot(self, cx, cy, v, im):
        """arr_plot(QpltColor self, int cx, int cy, float const * v, QpltImage im)"""
        return _qplt.QpltColor_arr_plot(self, cx, cy, v, im)

    __swig_destroy__ = _qplt.delete_QpltColor
    __del__ = lambda self: None
QpltColor_swigregister = _qplt.QpltColor_swigregister
QpltColor_swigregister(QpltColor)

def QpltColor_get_pals():
    """QpltColor_get_pals() -> std_vectors"""
    return _qplt.QpltColor_get_pals()

def QpltColor_add_pal(name, pal):
    """QpltColor_add_pal(char const * name, std_vectori pal) -> bool"""
    return _qplt.QpltColor_add_pal(name, pal)

def QpltColor_plot_pal(*args):
    """
    plot_pal(char const * pal, QpltImage image, bool vertical)
    QpltColor_plot_pal(char const * pal, int Nx, int Ny, bool vertical) -> QpltImage
    """
    return _qplt.QpltColor_plot_pal(*args)

class QpltAccessor(_object):
    """Proxy of C++ aiw::QpltAccessor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QpltAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QpltAccessor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ctype"] = _qplt.QpltAccessor_ctype_set
    __swig_getmethods__["ctype"] = _qplt.QpltAccessor_ctype_get
    if _newclass:
        ctype = _swig_property(_qplt.QpltAccessor_ctype_get, _qplt.QpltAccessor_ctype_set)
    __swig_setmethods__["Din"] = _qplt.QpltAccessor_Din_set
    __swig_getmethods__["Din"] = _qplt.QpltAccessor_Din_get
    if _newclass:
        Din = _swig_property(_qplt.QpltAccessor_Din_get, _qplt.QpltAccessor_Din_set)
    __swig_setmethods__["mask"] = _qplt.QpltAccessor_mask_set
    __swig_getmethods__["mask"] = _qplt.QpltAccessor_mask_get
    if _newclass:
        mask = _swig_property(_qplt.QpltAccessor_mask_get, _qplt.QpltAccessor_mask_set)

    def get_offset(self, i):
        """get_offset(QpltAccessor self, int i) -> int"""
        return _qplt.QpltAccessor_get_offset(self, i)


    def set_offset(self, i, off):
        """set_offset(QpltAccessor self, int i, int off)"""
        return _qplt.QpltAccessor_set_offset(self, i, off)

    __swig_setmethods__["diff"] = _qplt.QpltAccessor_diff_set
    __swig_getmethods__["diff"] = _qplt.QpltAccessor_diff_get
    if _newclass:
        diff = _swig_property(_qplt.QpltAccessor_diff_get, _qplt.QpltAccessor_diff_set)
    __swig_setmethods__["rsteps"] = _qplt.QpltAccessor_rsteps_set
    __swig_getmethods__["rsteps"] = _qplt.QpltAccessor_rsteps_get
    if _newclass:
        rsteps = _swig_property(_qplt.QpltAccessor_rsteps_get, _qplt.QpltAccessor_rsteps_set)
    __swig_setmethods__["vconv"] = _qplt.QpltAccessor_vconv_set
    __swig_getmethods__["vconv"] = _qplt.QpltAccessor_vconv_get
    if _newclass:
        vconv = _swig_property(_qplt.QpltAccessor_vconv_get, _qplt.QpltAccessor_vconv_set)

    def Dout(self):
        """Dout(QpltAccessor self) -> int"""
        return _qplt.QpltAccessor_Dout(self)


    def Ddiff(self):
        """Ddiff(QpltAccessor self) -> int"""
        return _qplt.QpltAccessor_Ddiff(self)

    __swig_setmethods__["minus"] = _qplt.QpltAccessor_minus_set
    __swig_getmethods__["minus"] = _qplt.QpltAccessor_minus_get
    if _newclass:
        minus = _swig_property(_qplt.QpltAccessor_minus_get, _qplt.QpltAccessor_minus_set)

    def check(self):
        """check(QpltAccessor self) -> bool"""
        return _qplt.QpltAccessor_check(self)


    def get_AID(self):
        """get_AID(QpltAccessor self) -> int"""
        return _qplt.QpltAccessor_get_AID(self)


    def __init__(self):
        """__init__(aiw::QpltAccessor self) -> QpltAccessor"""
        this = _qplt.new_QpltAccessor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _qplt.delete_QpltAccessor
    __del__ = lambda self: None
QpltAccessor_swigregister = _qplt.QpltAccessor_swigregister
QpltAccessor_swigregister(QpltAccessor)

class QpltScene(_object):
    """Proxy of C++ aiw::QpltScene class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QpltScene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QpltScene, name)
    __repr__ = _swig_repr
    __swig_setmethods__["autoscale"] = _qplt.QpltScene_autoscale_set
    __swig_getmethods__["autoscale"] = _qplt.QpltScene_autoscale_get
    if _newclass:
        autoscale = _swig_property(_qplt.QpltScene_autoscale_get, _qplt.QpltScene_autoscale_set)
    __swig_setmethods__["autoscale_tot"] = _qplt.QpltScene_autoscale_tot_set
    __swig_getmethods__["autoscale_tot"] = _qplt.QpltScene_autoscale_tot_get
    if _newclass:
        autoscale_tot = _swig_property(_qplt.QpltScene_autoscale_tot_get, _qplt.QpltScene_autoscale_tot_set)

    def get_axe(self, i):
        """get_axe(QpltScene self, int i) -> int"""
        return _qplt.QpltScene_get_axe(self, i)


    def set_axe(self, i, v):
        """set_axe(QpltScene self, int i, int v)"""
        return _qplt.QpltScene_set_axe(self, i, v)


    def get_min(self, axe):
        """get_min(QpltScene self, int axe) -> double"""
        return _qplt.QpltScene_get_min(self, axe)


    def get_max(self, axe):
        """get_max(QpltScene self, int axe) -> double"""
        return _qplt.QpltScene_get_max(self, axe)


    def get_pos(self, i):
        """get_pos(QpltScene self, int i) -> double"""
        return _qplt.QpltScene_get_pos(self, i)


    def set_pos(self, i, v):
        """set_pos(QpltScene self, int i, double v)"""
        return _qplt.QpltScene_set_pos(self, i, v)


    def get_interp(self, axe):
        """get_interp(QpltScene self, int axe) -> int"""
        return _qplt.QpltScene_get_interp(self, axe)


    def get_autoscale(self, axe):
        """get_autoscale(QpltScene self, int axe) -> int"""
        return _qplt.QpltScene_get_autoscale(self, axe)


    def get_flip(self, axe):
        """get_flip(QpltScene self, int axe) -> int"""
        return _qplt.QpltScene_get_flip(self, axe)


    def set_interp(self, axe, interp):
        """set_interp(QpltScene self, int axe, int interp)"""
        return _qplt.QpltScene_set_interp(self, axe, interp)


    def set_autoscale(self, axe, v):
        """set_autoscale(QpltScene self, int axe, bool v)"""
        return _qplt.QpltScene_set_autoscale(self, axe, v)


    def set_flip(self, axe, v):
        """set_flip(QpltScene self, int axe, bool v)"""
        return _qplt.QpltScene_set_flip(self, axe, v)


    def set_min_max(self, axe, a, b, arg5=False):
        """
        set_min_max(QpltScene self, int axe, double a, double b, bool arg5=False)
        set_min_max(QpltScene self, int axe, double a, double b)
        """
        return _qplt.QpltScene_set_min_max(self, axe, a, b, arg5)


    def crop(self, A, B, logscale):
        """crop(QpltScene self, aiw::Vec< 3 > A, aiw::Vec< 3 > B, int logscale)"""
        return _qplt.QpltScene_crop(self, A, B, logscale)


    def uncrop(self):
        """uncrop(QpltScene self)"""
        return _qplt.QpltScene_uncrop(self)

    __swig_setmethods__["D3"] = _qplt.QpltScene_D3_set
    __swig_getmethods__["D3"] = _qplt.QpltScene_D3_get
    if _newclass:
        D3 = _swig_property(_qplt.QpltScene_D3_get, _qplt.QpltScene_D3_set)
    __swig_setmethods__["theta"] = _qplt.QpltScene_theta_set
    __swig_getmethods__["theta"] = _qplt.QpltScene_theta_get
    if _newclass:
        theta = _swig_property(_qplt.QpltScene_theta_get, _qplt.QpltScene_theta_set)
    __swig_setmethods__["phi"] = _qplt.QpltScene_phi_set
    __swig_getmethods__["phi"] = _qplt.QpltScene_phi_get
    if _newclass:
        phi = _swig_property(_qplt.QpltScene_phi_get, _qplt.QpltScene_phi_set)
    __swig_setmethods__["dx"] = _qplt.QpltScene_dx_set
    __swig_getmethods__["dx"] = _qplt.QpltScene_dx_get
    if _newclass:
        dx = _swig_property(_qplt.QpltScene_dx_get, _qplt.QpltScene_dx_set)
    __swig_setmethods__["dy"] = _qplt.QpltScene_dy_set
    __swig_getmethods__["dy"] = _qplt.QpltScene_dy_get
    if _newclass:
        dy = _swig_property(_qplt.QpltScene_dy_get, _qplt.QpltScene_dy_set)
    __swig_setmethods__["dz"] = _qplt.QpltScene_dz_set
    __swig_getmethods__["dz"] = _qplt.QpltScene_dz_get
    if _newclass:
        dz = _swig_property(_qplt.QpltScene_dz_get, _qplt.QpltScene_dz_set)
    __swig_setmethods__["D3scale_mode"] = _qplt.QpltScene_D3scale_mode_set
    __swig_getmethods__["D3scale_mode"] = _qplt.QpltScene_D3scale_mode_get
    if _newclass:
        D3scale_mode = _swig_property(_qplt.QpltScene_D3scale_mode_get, _qplt.QpltScene_D3scale_mode_set)

    def get_flcenter_x(self):
        """get_flcenter_x(QpltScene self) -> int"""
        return _qplt.QpltScene_get_flcenter_x(self)


    def get_flcenter_y(self):
        """get_flcenter_y(QpltScene self) -> int"""
        return _qplt.QpltScene_get_flcenter_y(self)


    def get_flpoint_x(self, i):
        """get_flpoint_x(QpltScene self, int i) -> int"""
        return _qplt.QpltScene_get_flpoint_x(self, i)


    def get_flpoint_y(self, i):
        """get_flpoint_y(QpltScene self, int i) -> int"""
        return _qplt.QpltScene_get_flpoint_y(self, i)


    def get_flpoint_a(self, i):
        """get_flpoint_a(QpltScene self, int i) -> int"""
        return _qplt.QpltScene_get_flpoint_a(self, i)


    def get_flpoint_b(self, i):
        """get_flpoint_b(QpltScene self, int i) -> int"""
        return _qplt.QpltScene_get_flpoint_b(self, i)


    def __init__(self):
        """__init__(aiw::QpltScene self) -> QpltScene"""
        this = _qplt.new_QpltScene()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _qplt.delete_QpltScene
    __del__ = lambda self: None
QpltScene_swigregister = _qplt.QpltScene_swigregister
QpltScene_swigregister(QpltScene)

class QpltContainer(_object):
    """Proxy of C++ aiw::QpltContainer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QpltContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QpltContainer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["mem_limit"] = _qplt.QpltContainer_mem_limit_set
    __swig_getmethods__["mem_limit"] = _qplt.QpltContainer_mem_limit_get
    if _newclass:
        mem_limit = _swig_property(_qplt.QpltContainer_mem_limit_get, _qplt.QpltContainer_mem_limit_set)

    def fname(self):
        """fname(QpltContainer self) -> char const *"""
        return _qplt.QpltContainer_fname(self)


    def frame(self):
        """frame(QpltContainer self) -> int"""
        return _qplt.QpltContainer_frame(self)


    def get_dim0(self):
        """get_dim0(QpltContainer self) -> int"""
        return _qplt.QpltContainer_get_dim0(self)


    def get_dim(self):
        """get_dim(QpltContainer self) -> int"""
        return _qplt.QpltContainer_get_dim(self)


    def get_szT(self):
        """get_szT(QpltContainer self) -> int"""
        return _qplt.QpltContainer_get_szT(self)


    def get_head(self):
        """get_head(QpltContainer self) -> char const *"""
        return _qplt.QpltContainer_get_head(self)


    def get_info(self):
        """get_info(QpltContainer self) -> char const *"""
        return _qplt.QpltContainer_get_info(self)


    def get_bbox0(self, i):
        """get_bbox0(QpltContainer self, int i) -> int"""
        return _qplt.QpltContainer_get_bbox0(self, i)


    def get_bmin(self, axe):
        """get_bmin(QpltContainer self, int axe) -> float"""
        return _qplt.QpltContainer_get_bmin(self, axe)


    def get_bmax(self, axe):
        """get_bmax(QpltContainer self, int axe) -> float"""
        return _qplt.QpltContainer_get_bmax(self, axe)


    def get_logscale(self, axe):
        """get_logscale(QpltContainer self, int axe) -> bool"""
        return _qplt.QpltContainer_get_logscale(self, axe)


    def get_step0(self, i):
        """get_step0(QpltContainer self, int i) -> float"""
        return _qplt.QpltContainer_get_step0(self, i)


    def get_axe_name0(self, i):
        """get_axe_name0(QpltContainer self, int i) -> char const *"""
        return _qplt.QpltContainer_get_axe_name0(self, i)


    def get_bmin0(self, i):
        """get_bmin0(QpltContainer self, int i) -> float"""
        return _qplt.QpltContainer_get_bmin0(self, i)


    def get_bmax0(self, i):
        """get_bmax0(QpltContainer self, int i) -> float"""
        return _qplt.QpltContainer_get_bmax0(self, i)


    def get_logscale0(self, i):
        """get_logscale0(QpltContainer self, int i) -> bool"""
        return _qplt.QpltContainer_get_logscale0(self, i)


    def prepare(self, arg2, arg3, arg4):
        """prepare(QpltContainer self, QpltScene arg2, QpltAccessor arg3, QpltColor arg4)"""
        return _qplt.QpltContainer_prepare(self, arg2, arg3, arg4)


    def plot(self, arg2, arg3, arg4, arg5):
        """plot(QpltContainer self, QpltScene arg2, QpltAccessor arg3, QpltColor arg4, QpltImage arg5)"""
        return _qplt.QpltContainer_plot(self, arg2, arg3, arg4, arg5)


    def get(self, arg2, arg3, x, y):
        """get(QpltContainer self, QpltScene arg2, QpltAccessor arg3, float x, float y) -> std::string"""
        return _qplt.QpltContainer_get(self, arg2, arg3, x, y)


    def get_coord(self, axe, x):
        """get_coord(QpltContainer self, int axe, float x) -> float"""
        return _qplt.QpltContainer_get_coord(self, axe, x)


    def get_pos(self, axe, x):
        """get_pos(QpltContainer self, int axe, float x) -> int"""
        return _qplt.QpltContainer_get_pos(self, axe, x)


    def coord2pos(self, i, x):
        """coord2pos(QpltContainer self, int i, float x) -> int"""
        return _qplt.QpltContainer_coord2pos(self, i, x)


    def pos2coord(self, i, p):
        """pos2coord(QpltContainer self, int i, int p) -> float"""
        return _qplt.QpltContainer_pos2coord(self, i, p)


    def prepare3D(self, arg2, Nx, Ny):
        """prepare3D(QpltContainer self, QpltScene arg2, int Nx, int Ny)"""
        return _qplt.QpltContainer_prepare3D(self, arg2, Nx, Ny)

    __swig_destroy__ = _qplt.delete_QpltContainer
    __del__ = lambda self: None
QpltContainer_swigregister = _qplt.QpltContainer_swigregister
QpltContainer_swigregister(QpltContainer)
cvar = _qplt.cvar

class QpltFactory(_object):
    """Proxy of C++ aiw::QpltFactory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QpltFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QpltFactory, name)
    __repr__ = _swig_repr

    def get_sz(self):
        """get_sz(QpltFactory self) -> int"""
        return _qplt.QpltFactory_get_sz(self)


    def get_file_sz(self, fileID):
        """get_file_sz(QpltFactory self, int fileID) -> int"""
        return _qplt.QpltFactory_get_file_sz(self, fileID)


    def get_file_name(self, fileID):
        """get_file_name(QpltFactory self, int fileID) -> char const *"""
        return _qplt.QpltFactory_get_file_name(self, fileID)


    def open_file(self, fname):
        """open_file(QpltFactory self, char const * fname) -> bool"""
        return _qplt.QpltFactory_open_file(self, fname)


    def load_frame(self):
        """load_frame(QpltFactory self) -> bool"""
        return _qplt.QpltFactory_load_frame(self)


    def skip_frame(self):
        """skip_frame(QpltFactory self) -> bool"""
        return _qplt.QpltFactory_skip_frame(self)


    def close_file(self):
        """close_file(QpltFactory self)"""
        return _qplt.QpltFactory_close_file(self)


    def get_frame(self, fileID, frameID):
        """get_frame(QpltFactory self, int fileID, int frameID) -> QpltContainer"""
        return _qplt.QpltFactory_get_frame(self, fileID, frameID)


    def free_frame(self, fileID, frameID):
        """free_frame(QpltFactory self, int fileID, int frameID)"""
        return _qplt.QpltFactory_free_frame(self, fileID, frameID)


    def free_file(self, fileID):
        """free_file(QpltFactory self, int fileID)"""
        return _qplt.QpltFactory_free_file(self, fileID)


    def __init__(self):
        """__init__(aiw::QpltFactory self) -> QpltFactory"""
        this = _qplt.new_QpltFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _qplt.delete_QpltFactory
    __del__ = lambda self: None
QpltFactory_swigregister = _qplt.QpltFactory_swigregister
QpltFactory_swigregister(QpltFactory)

# This file is compatible with both classic and new-style classes.


